webpackJsonp([0x19a09016f2399900],{"./node_modules/json-loader/index.js!./.cache/json/java-loops-infinite-loops.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h1>Infinite Loops</h1>\n<p>An infinte loop is a loop statement (<code>for</code>, <code>while</code>, <code>do-while</code>) which does not end on its own.</p>\n<p>The test condition of a looping statement decides whether the loop body will execute or not. So a test condition which is always true will keep on executing the body of the loop, forever. That’s the case in an infinte loop.</p>\n<p>Examples:</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token comment" spellcheck="true">// Infinite For Loop</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// some code here</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// Infinite While Loop</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// some code here</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// Infinite Do While Loop</span>\n<span class="token keyword">do</span>\n<span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// some code here</span>\n<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Normally, if your loop is running infinitely, it is an error that should not occur as an infinite loop does not stop and prevents the rest of the program from running.</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The loop above runs infinitely because every time i approaches 49, it is set to be 0. i never reaches 100 to terminate the loop, so the loop is an infinite loop. </p>\n<p>But a program stuck in such a loop will keep using computer resources indefinitely. This is undesirable, and is a type of ‘run-time error’.</p>\n<p>To prevent the error, programmers use a break statement to break out of the loop. The break executes only under a particular condition. Use of a selection statement like if-else ensures the same.</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// do something</span>\n    \n    <span class="token keyword">if</span><span class="token punctuation">(</span>conditionToEndLoop <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    \n    <span class="token comment" spellcheck="true">// do more</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The main advantage of using an infinite loop over a regular loop is readability.</p>\n<p>Sometimes, the body of a loop is easier to understand if the loop ends in the middle, and not at the end/beginning. In such a situation, an infinite loop will be a better choice.</p>',fields:{slug:"/java/loops/infinite-loops/"},frontmatter:{title:"Infinite Loops"}}},pathContext:{slug:"/java/loops/infinite-loops/"}}}});
//# sourceMappingURL=path---java-loops-infinite-loops-b388716caee9e49a7665.js.map