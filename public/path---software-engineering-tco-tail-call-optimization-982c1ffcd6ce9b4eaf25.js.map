{"version":3,"sources":["webpack:///path---software-engineering-tco-tail-call-optimization-982c1ffcd6ce9b4eaf25.js","webpack:///./.cache/json/software-engineering-tco-tail-call-optimization.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/software-engineering-tco-tail-call-optimization.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,yGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,6+OAA+iNC,QAAuqCC,KAAA,qDAA2DC,aAAgBC,MAAA,gCAAuCC,aAAgBH,KAAA","file":"path---software-engineering-tco-tail-call-optimization-982c1ffcd6ce9b4eaf25.js","sourcesContent":["webpackJsonp([18231346629851490000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/software-engineering-tco-tail-call-optimization.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Tail Call Optimization (TCO)</h2>\\n<p>Tail Call Optimization (<strong>TCO</strong>) is a solution to the problem of stack overflows when doing recursion.</p>\\n<h3>The Problem</h3>\\n<p>Every call to a function is pushed to a stack in computer memory. When the function finishes, it is popped from the stack. In recursion, the function calls itself so it keeps on adding to the stack until all those functions finishes. There is, of course, a limit to this stack. When there are too many functions called, too many calls are added to the stack. When the stack is full and a function is called, this results in a <strong>stack overflow</strong> because the stack is already full. The recursive function will not finish and will result in an error.</p>\\n<h4>Example</h4>\\n<p>Here is an example of a JavaScript factorial function using recursion <strong>without</strong> TCO:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token number\\\">-1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3628800</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// RangeError: Maximum call stack size exceeded</span>\\n</code></pre>\\n      </div>\\n<p>Notice that running <code>fact</code> with an argument of 10000 will result in a <strong>stack overflow</strong>.</p>\\n<h3>Using TCO to solve the problem</h3>\\n<p>To solve this using Tail Call Optimization, the statement where the function calls itself should be in a tail position. The tail position is the last statement to be executed in a function. Therefore, the function’s call to itself should be the last thing called before the function ends.</p>\\n<p>In the previous example, the multiplication operation is executed last in the <code>return x * fact(x-1)</code> statement, so it was not the final operation of the function. Therefore, it is not tail call optimized. In order for it to be tail call optimized, you need to make the call to itself the last operation of the function.</p>\\n<h4>Example</h4>\\n<p>Here is an example of a JavaScript (ES5) factorial function using recursion <strong>with</strong> TCO.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">factTCO</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">factTCO</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> acc<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> acc<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">factTCO</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token number\\\">-1</span><span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token operator\\\">*</span>acc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3628800</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Infinity - Number too large, but unlike the unoptimized factorial, this does not result in stack overflow.</span>\\n</code></pre>\\n      </div>\\n<p>Notice that running <code>fact</code> on 10000 this time will <strong>not result in a stack overflow</strong> when <em>run in a browser that supports ES6</em> because the call to <code>factTCO</code> is the last operation of the function.</p>\\n<h3>Why this works</h3>\\n<p>When the compiler or interpreter notices that the self-call is the last operation of the function, it pops the current function and pushes the self-call to the stack. This way the size of the stack isn’t changed. Therefore, the stack doesn’t overflow because of the function.</p>\\n<h3>Notes</h3>\\n<h4>More Information:</h4>\\n<ul>\\n<li><a href='https://stackoverflow.com/questions/310974/what-is-tail-call-optimization' target='_blank' rel='nofollow'>What is tail call optmization?</a> (StackOverflow)</li>\\n<li><a href='http://2ality.com/2015/06/tail-call-optimization.html' target='_blank' rel='nofollow'>Tail call optimization in ECMAScript 6</a> (2ality - Dr. Axel Rauschmayer’s blog)</li>\\n</ul>\",\"fields\":{\"slug\":\"/software-engineering/tco-tail-call-optimization/\"},\"frontmatter\":{\"title\":\"TCO Tail Call Optimization\"}}},\"pathContext\":{\"slug\":\"/software-engineering/tco-tail-call-optimization/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---software-engineering-tco-tail-call-optimization-982c1ffcd6ce9b4eaf25.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Tail Call Optimization (TCO)</h2>\\n<p>Tail Call Optimization (<strong>TCO</strong>) is a solution to the problem of stack overflows when doing recursion.</p>\\n<h3>The Problem</h3>\\n<p>Every call to a function is pushed to a stack in computer memory. When the function finishes, it is popped from the stack. In recursion, the function calls itself so it keeps on adding to the stack until all those functions finishes. There is, of course, a limit to this stack. When there are too many functions called, too many calls are added to the stack. When the stack is full and a function is called, this results in a <strong>stack overflow</strong> because the stack is already full. The recursive function will not finish and will result in an error.</p>\\n<h4>Example</h4>\\n<p>Here is an example of a JavaScript factorial function using recursion <strong>without</strong> TCO:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token number\\\">-1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3628800</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// RangeError: Maximum call stack size exceeded</span>\\n</code></pre>\\n      </div>\\n<p>Notice that running <code>fact</code> with an argument of 10000 will result in a <strong>stack overflow</strong>.</p>\\n<h3>Using TCO to solve the problem</h3>\\n<p>To solve this using Tail Call Optimization, the statement where the function calls itself should be in a tail position. The tail position is the last statement to be executed in a function. Therefore, the function’s call to itself should be the last thing called before the function ends.</p>\\n<p>In the previous example, the multiplication operation is executed last in the <code>return x * fact(x-1)</code> statement, so it was not the final operation of the function. Therefore, it is not tail call optimized. In order for it to be tail call optimized, you need to make the call to itself the last operation of the function.</p>\\n<h4>Example</h4>\\n<p>Here is an example of a JavaScript (ES5) factorial function using recursion <strong>with</strong> TCO.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">factTCO</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">factTCO</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> acc<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> acc<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">factTCO</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token number\\\">-1</span><span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token operator\\\">*</span>acc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3628800</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">fact</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Infinity - Number too large, but unlike the unoptimized factorial, this does not result in stack overflow.</span>\\n</code></pre>\\n      </div>\\n<p>Notice that running <code>fact</code> on 10000 this time will <strong>not result in a stack overflow</strong> when <em>run in a browser that supports ES6</em> because the call to <code>factTCO</code> is the last operation of the function.</p>\\n<h3>Why this works</h3>\\n<p>When the compiler or interpreter notices that the self-call is the last operation of the function, it pops the current function and pushes the self-call to the stack. This way the size of the stack isn’t changed. Therefore, the stack doesn’t overflow because of the function.</p>\\n<h3>Notes</h3>\\n<h4>More Information:</h4>\\n<ul>\\n<li><a href='https://stackoverflow.com/questions/310974/what-is-tail-call-optimization' target='_blank' rel='nofollow'>What is tail call optmization?</a> (StackOverflow)</li>\\n<li><a href='http://2ality.com/2015/06/tail-call-optimization.html' target='_blank' rel='nofollow'>Tail call optimization in ECMAScript 6</a> (2ality - Dr. Axel Rauschmayer’s blog)</li>\\n</ul>\",\"fields\":{\"slug\":\"/software-engineering/tco-tail-call-optimization/\"},\"frontmatter\":{\"title\":\"TCO Tail Call Optimization\"}}},\"pathContext\":{\"slug\":\"/software-engineering/tco-tail-call-optimization/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/software-engineering-tco-tail-call-optimization.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/software-engineering-tco-tail-call-optimization.json\n// module chunks = 18231346629851490000"],"sourceRoot":""}