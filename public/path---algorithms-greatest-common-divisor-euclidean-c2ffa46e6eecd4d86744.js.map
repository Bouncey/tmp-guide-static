{"version":3,"sources":["webpack:///path---algorithms-greatest-common-divisor-euclidean-c2ffa46e6eecd4d86744.js","webpack:///./.cache/json/algorithms-greatest-common-divisor-euclidean.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/algorithms-greatest-common-divisor-euclidean.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,sGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,2xJAAs7IC,QAA0eC,KAAA,kDAAwDC,aAAgBC,MAAA,uCAA8CC,aAAgBH,KAAA","file":"path---algorithms-greatest-common-divisor-euclidean-c2ffa46e6eecd4d86744.js","sourcesContent":["webpackJsonp([1764425026663627300],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/algorithms-greatest-common-divisor-euclidean.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Greatest Common Divisor Euclidean</h2>\\n<p>For this topic you must know about Greatest Common Divisor (GCD) and the MOD operation first.</p>\\n<h4>Greatest Common Divisor (GCD)</h4>\\n<p>The GCD of two or more integers is the largest integer that divides each of the integers such that their remainder is zero.</p>\\n<p>Example-<br>\\nGCD of 20, 30 = 10 <em>(10 is the largest number which divides 20 and 30 with remainder as 0)</em><br>\\nGCD of 42, 120, 285 = 3 <em>(3 is the largest number which divides 42, 120 and 285 with remainder as 0)</em>  </p>\\n<h4>“mod” Operation</h4>\\n<p>The mod operation gives you the remainder when two positive integers are divided.\\nWe write it as follows-<br>\\n<code>A mod B = R</code></p>\\n<p>This means, dividing A by B gives you the remainder R, this is different than your division operation which gives you the quotient.</p>\\n<p>Example-<br>\\n7 mod 2 = 1 <em>(Dividing 7 by 2 gives the remainder 1)</em><br>\\n42 mod 7 = 0 <em>(Dividing 42 by 7 gives the remainder 0)</em>  </p>\\n<p>With the above two concepts understood you will easily understand the Euclidean Algorithm.</p>\\n<h3>Euclidean Algorithm for Greatest Common Divisor (GCD)</h3>\\n<p>The Euclidean Algorithm finds the GCD of 2 numbers.</p>\\n<p>You will better understand this Algorithm by seeing it in action.\\nAssuming you want to calculate the GCD of  1220 and 516, lets apply the Euclidean Algorithm-  </p>\\n<p>Assuming you want to calculate the GCD of  1220 and 516, lets apply the Euclidean Algorithm-\\n<img src=\\\"https://i.imgur.com/aa8oGgP.png\\\" alt=\\\"Euclidean Example\\\">  </p>\\n<p>Pseudo Code of the Algorithm-<br>\\nStep 1: <strong>Let <code>a, b</code> be the two numbers</strong><br>\\nStep 2: <strong><code>a mod b = R</code></strong><br>\\nStep 3: <strong>Let <code>a = b</code> and <code>b = R</code></strong><br>\\nStep 4: <strong>Repeat Steps 2 and 3 until <code>a mod b</code> is greater than 0</strong><br>\\nStep 5: <strong>GCD = b</strong><br>\\nStep 6: Finish  </p>\\n<p>Javascript Code to Perform GCD-</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">gcd</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> R<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a <span class=\\\"token operator\\\">%</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token punctuation\\\">{</span>\\n    R <span class=\\\"token operator\\\">=</span> a <span class=\\\"token operator\\\">%</span> b<span class=\\\"token punctuation\\\">;</span>\\n    a <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">;</span>\\n    b <span class=\\\"token operator\\\">=</span> R<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Javascript Code to Perform GCD using Recursion-</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">gcd</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>b <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">else</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">gcd</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>a <span class=\\\"token operator\\\">%</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>You can also use the Euclidean Algorithm to find GCD of more than two numbers.\\nSince, GCD is associative, the following operation is valid- <code>GCD(a,b,c) == GCD(GCD(a,b), c)</code></p>\\n<p>Calculate the GCD of the first two numbers, then find GCD of the result and the next number.\\nExample- <code>GCD(203,91,77) == GCD(GCD(203,91),77) == GCD(7, 77) == 7</code></p>\\n<p>You can find GCD of <code>n</code> numbers in the same way.</p>\",\"fields\":{\"slug\":\"/algorithms/greatest-common-divisor-euclidean/\"},\"frontmatter\":{\"title\":\"Greatest Common Divisor Euclidean\"}}},\"pathContext\":{\"slug\":\"/algorithms/greatest-common-divisor-euclidean/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---algorithms-greatest-common-divisor-euclidean-c2ffa46e6eecd4d86744.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Greatest Common Divisor Euclidean</h2>\\n<p>For this topic you must know about Greatest Common Divisor (GCD) and the MOD operation first.</p>\\n<h4>Greatest Common Divisor (GCD)</h4>\\n<p>The GCD of two or more integers is the largest integer that divides each of the integers such that their remainder is zero.</p>\\n<p>Example-<br>\\nGCD of 20, 30 = 10 <em>(10 is the largest number which divides 20 and 30 with remainder as 0)</em><br>\\nGCD of 42, 120, 285 = 3 <em>(3 is the largest number which divides 42, 120 and 285 with remainder as 0)</em>  </p>\\n<h4>“mod” Operation</h4>\\n<p>The mod operation gives you the remainder when two positive integers are divided.\\nWe write it as follows-<br>\\n<code>A mod B = R</code></p>\\n<p>This means, dividing A by B gives you the remainder R, this is different than your division operation which gives you the quotient.</p>\\n<p>Example-<br>\\n7 mod 2 = 1 <em>(Dividing 7 by 2 gives the remainder 1)</em><br>\\n42 mod 7 = 0 <em>(Dividing 42 by 7 gives the remainder 0)</em>  </p>\\n<p>With the above two concepts understood you will easily understand the Euclidean Algorithm.</p>\\n<h3>Euclidean Algorithm for Greatest Common Divisor (GCD)</h3>\\n<p>The Euclidean Algorithm finds the GCD of 2 numbers.</p>\\n<p>You will better understand this Algorithm by seeing it in action.\\nAssuming you want to calculate the GCD of  1220 and 516, lets apply the Euclidean Algorithm-  </p>\\n<p>Assuming you want to calculate the GCD of  1220 and 516, lets apply the Euclidean Algorithm-\\n<img src=\\\"https://i.imgur.com/aa8oGgP.png\\\" alt=\\\"Euclidean Example\\\">  </p>\\n<p>Pseudo Code of the Algorithm-<br>\\nStep 1: <strong>Let <code>a, b</code> be the two numbers</strong><br>\\nStep 2: <strong><code>a mod b = R</code></strong><br>\\nStep 3: <strong>Let <code>a = b</code> and <code>b = R</code></strong><br>\\nStep 4: <strong>Repeat Steps 2 and 3 until <code>a mod b</code> is greater than 0</strong><br>\\nStep 5: <strong>GCD = b</strong><br>\\nStep 6: Finish  </p>\\n<p>Javascript Code to Perform GCD-</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">gcd</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> R<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a <span class=\\\"token operator\\\">%</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token punctuation\\\">{</span>\\n    R <span class=\\\"token operator\\\">=</span> a <span class=\\\"token operator\\\">%</span> b<span class=\\\"token punctuation\\\">;</span>\\n    a <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">;</span>\\n    b <span class=\\\"token operator\\\">=</span> R<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Javascript Code to Perform GCD using Recursion-</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">gcd</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>b <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">else</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">gcd</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>a <span class=\\\"token operator\\\">%</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>You can also use the Euclidean Algorithm to find GCD of more than two numbers.\\nSince, GCD is associative, the following operation is valid- <code>GCD(a,b,c) == GCD(GCD(a,b), c)</code></p>\\n<p>Calculate the GCD of the first two numbers, then find GCD of the result and the next number.\\nExample- <code>GCD(203,91,77) == GCD(GCD(203,91),77) == GCD(7, 77) == 7</code></p>\\n<p>You can find GCD of <code>n</code> numbers in the same way.</p>\",\"fields\":{\"slug\":\"/algorithms/greatest-common-divisor-euclidean/\"},\"frontmatter\":{\"title\":\"Greatest Common Divisor Euclidean\"}}},\"pathContext\":{\"slug\":\"/algorithms/greatest-common-divisor-euclidean/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/algorithms-greatest-common-divisor-euclidean.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/algorithms-greatest-common-divisor-euclidean.json\n// module chunks = 1764425026663627300"],"sourceRoot":""}