webpackJsonp([0x7afdf08c6cb16c00],{"./node_modules/json-loader/index.js!./.cache/json/javascript-typeof.json":function(n,a){n.exports={data:{markdownRemark:{html:'<h2>Typeof</h2>\n<p><code>typeof</code> is a JavaScript keyword that will return the type of a variable when it is called. This can be used for validation of function parameters, checking if variables are defined or not throughout a JavaScript program, and many other use cases.</p>\n<p>The <code>typeof</code> operator is useful in JavaScript as it allows programmers to easily check the type of a variable in their code. This is important as JavaScript is a language that does not require variables to have types assigned when they are created (it is a <a href=\'https://stackoverflow.com/questions/2690544/what-is-the-difference-between-a-strongly-typed-language-and-a-statically-typed\' target=\'_blank\' rel=\'nofollow\'>dynamically typed language</a>). What this means is that any JavaScript variable is not restricted to have a specific type, and the type of a variable can change during the runtime of a program.</p>\n<p>For example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// number</span>\nx <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span>\nx <span class="token operator">=</span> <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">"value"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// object</span>\n</code></pre>\n      </div>\n<p>As you can see from the above example, a variable in JavaScript can change types throughout the execution of a program. This can be hard to keep track of as a programmer, and this is where the <code>typeof</code> operator is useful.</p>\n<p>The <code>typeof</code> operator returns a string that represents the current type of a variable in a JavaScript program. It is used by typing <code>typeof(variable)</code> or <code>typeof variable</code> (you can leave the brackets out and the command still works). Going back to the previous example, it can be used to check the type of the variable <code>x</code> at each stage:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// "number"</span>\nx <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// "string"</span>\nx <span class="token operator">=</span> <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">"value"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "object"</span>\n</code></pre>\n      </div>\n<p>This can be useful for checking the type of a variable in a function that can accept multiple types, and continuing accordingly.</p>\n<p>Here’s an example of a function that can take a variable that is a string or a number:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'x is a string\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'number\'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'x is a number\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Another way the <code>typeof</code> operator can be useful is ensuring that a variable is defined before you try to access it in your code. This can help prevent errors in a program that may occur if you try to access a variable that is not defined.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'variable x is not defined\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment" spellcheck="true">//continue with function here...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The output of the <code>typeof</code> operator might not always be what you expect when you check for a number.<br>\nNumbers can turn in to the value <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN">NaN (Not A Number)</a> for multiple reasons.  </p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"number"</span>\n</code></pre>\n      </div>\n<p>Maybe you tried to multiply a number with an object because you forgot to access the number inside the object.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">{</span> number<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "number"</span>\n</code></pre>\n      </div>\n<p>When checking for a number, it is not sufficient to check the output of <code>typeof</code> for a number, since <code>NaN</code> also<br>\npasses this test.<br>\nThis function check for numbers, and also doesn’t allow the <code>NaN</code> value to pass.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">"number"</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isNan</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Even thought this is a useful validation method, we have to be careful because javascript has some weird parts and one of them is the result of <code>typeof</code> over particular instructions. For example, in javascript many things are just <code>objects</code> so you’ll find.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// object</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// object</span>\n</code></pre>\n      </div>\n<h3>More Information:</h3>\n<p><a href=\'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\' target=\'_blank\' rel=\'nofollow\'>MDN Documentation for typeof</a></p>',fields:{slug:"/javascript/typeof/"},frontmatter:{title:"Typeof"}}},pathContext:{slug:"/javascript/typeof/"}}}});
//# sourceMappingURL=path---javascript-typeof-257f94791651e5273efc.js.map