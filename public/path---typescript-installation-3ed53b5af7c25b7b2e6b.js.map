{"version":3,"sources":["webpack:///path---typescript-installation-3ed53b5af7c25b7b2e6b.js","webpack:///./.cache/json/typescript-installation.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/typescript-installation.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,iFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,qiNAAw/MC,QAAoNC,KAAA,6BAAmCC,aAAgBC,MAAA,kBAAyBC,aAAgBH,KAAA","file":"path---typescript-installation-3ed53b5af7c25b7b2e6b.js","sourcesContent":["webpackJsonp([16223731343174440000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/typescript-installation.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Installation</h2>\\n<p><img src=\\\"https://i.imgur.com/9ILjA1q.jpg\\\" alt=\\\"Installation\\\"></p>\\n<p>To get started yourself, the two things you will need are the TypeScript compiler and a editor that supports TypeScript.</p>\\n<p>In the above screenshot, I’m installing both the compiler and <a href='https://github.com/palantir/tslint' target='_blank' rel='nofollow'>TSLint</a> (which is similar to <a href='https://eslint.org/' target='_blank' rel='nofollow'>ESLint</a>) using <code>npm</code> in <a href='https://code.visualstudio.com/' target='_blank' rel='nofollow'>Visual Studio Code</a>’s integrated terminal.</p>\\n<h3>Installing TypeScript</h3>\\n<p>This command will install the TypeScript package as a dependency in your project using <a href='https://www.npmjs.com/' target='_blank' rel='nofollow'><code>npm</code></a> which is a popular package manager.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code><span class=\\\"token function\\\">npm</span> i typescript\\n</code></pre>\\n      </div>\\n<p><em>To Note</em> There are <a href='https://docs.npmjs.com/cli/install' target='_blank' rel='nofollow'>several options</a> that <code>npm</code> provides depending on where you want TypeScript installed.</p>\\n<ul>\\n<li><code>npm i -g typescript</code> to globally install the TypeScript package</li>\\n<li><code>npm i -D typescript</code> to install the TypeScript package as a dev dependency</li>\\n</ul>\\n<h3>TSLint</h3>\\n<p>See how to setup linting options for TypeScript at <a href=\\\"./\\\">TypeScript</a> > <a href=\\\"./linter\\\">Linter</a> within the <strong>freeCodeCamp Guide</strong>.</p>\\n<h3>Compiling a single file down to JavaScript</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>tsc multiplication.ts\\n</code></pre>\\n      </div>\\n<p><em>To Note</em> You can configure this TypeScript compilation process as a custom npm script in your <code>package.json</code>.</p>\\n<h3>Configuration Options</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code><span class=\\\"token function\\\">touch</span> tsconfig.json\\n</code></pre>\\n      </div>\\n<p>There’s also the option to create a <a href='https://www.typescriptlang.org/docs/handbook/tsconfig-json.html' target='_blank' rel='nofollow'><code>tsconfig.json</code></a> file that specifies the root files and compiler options.</p>\\n<p>Within your <a href='https://www.typescriptlang.org/docs/handbook/tsconfig-json.html' target='_blank' rel='nofollow'><code>tsconfig.json</code></a> file, for example, you could specify that you want TypeScript to compile down to ES5 instead of ES6.</p>\\n<h3>Quick Example</h3>\\n<p><img src=\\\"https://i.imgur.com/V5nP3xj.jpg\\\" alt=\\\"Multiplication\\\"></p>\\n<p>In the screenshot above, you can see two files - <code>multiplication.js</code> and <code>multiplication.ts</code>.</p>\\n<p>This program just prints out the product of two numbers I’ve pre-defined.</p>\\n<blockquote>\\n<p><code>multiplication.ts</code></p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">number</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">number</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">showProduct</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">number</span><span class=\\\"token punctuation\\\">,</span> second<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">number</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Mathematical! The result is \\\"</span> <span class=\\\"token operator\\\">+</span> first <span class=\\\"token operator\\\">*</span> second <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\".\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">showProduct</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Mathematical! The result is 20.</span>\\n</code></pre>\\n      </div>\\n<p>Once I’ve finished creating <code>multiplication.ts</code>, I can compile it down to JavaScript using the <code>tsc</code> command which stands for TypeScript compile.</p>\\n<blockquote>\\n<p><code>multiplication.js</code></p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">showProduct</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">,</span> second<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Mathematical! The result is \\\"</span> <span class=\\\"token operator\\\">+</span> first <span class=\\\"token operator\\\">*</span> second <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\".\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">showProduct</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Mathematical! The result is 20.</span>\\n</code></pre>\\n      </div>\\n<p>Bam - I just successfully compiled TypeScript to JavaScript!</p>\",\"fields\":{\"slug\":\"/typescript/installation/\"},\"frontmatter\":{\"title\":\"Installation\"}}},\"pathContext\":{\"slug\":\"/typescript/installation/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---typescript-installation-3ed53b5af7c25b7b2e6b.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Installation</h2>\\n<p><img src=\\\"https://i.imgur.com/9ILjA1q.jpg\\\" alt=\\\"Installation\\\"></p>\\n<p>To get started yourself, the two things you will need are the TypeScript compiler and a editor that supports TypeScript.</p>\\n<p>In the above screenshot, I’m installing both the compiler and <a href='https://github.com/palantir/tslint' target='_blank' rel='nofollow'>TSLint</a> (which is similar to <a href='https://eslint.org/' target='_blank' rel='nofollow'>ESLint</a>) using <code>npm</code> in <a href='https://code.visualstudio.com/' target='_blank' rel='nofollow'>Visual Studio Code</a>’s integrated terminal.</p>\\n<h3>Installing TypeScript</h3>\\n<p>This command will install the TypeScript package as a dependency in your project using <a href='https://www.npmjs.com/' target='_blank' rel='nofollow'><code>npm</code></a> which is a popular package manager.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code><span class=\\\"token function\\\">npm</span> i typescript\\n</code></pre>\\n      </div>\\n<p><em>To Note</em> There are <a href='https://docs.npmjs.com/cli/install' target='_blank' rel='nofollow'>several options</a> that <code>npm</code> provides depending on where you want TypeScript installed.</p>\\n<ul>\\n<li><code>npm i -g typescript</code> to globally install the TypeScript package</li>\\n<li><code>npm i -D typescript</code> to install the TypeScript package as a dev dependency</li>\\n</ul>\\n<h3>TSLint</h3>\\n<p>See how to setup linting options for TypeScript at <a href=\\\"./\\\">TypeScript</a> > <a href=\\\"./linter\\\">Linter</a> within the <strong>freeCodeCamp Guide</strong>.</p>\\n<h3>Compiling a single file down to JavaScript</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>tsc multiplication.ts\\n</code></pre>\\n      </div>\\n<p><em>To Note</em> You can configure this TypeScript compilation process as a custom npm script in your <code>package.json</code>.</p>\\n<h3>Configuration Options</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code><span class=\\\"token function\\\">touch</span> tsconfig.json\\n</code></pre>\\n      </div>\\n<p>There’s also the option to create a <a href='https://www.typescriptlang.org/docs/handbook/tsconfig-json.html' target='_blank' rel='nofollow'><code>tsconfig.json</code></a> file that specifies the root files and compiler options.</p>\\n<p>Within your <a href='https://www.typescriptlang.org/docs/handbook/tsconfig-json.html' target='_blank' rel='nofollow'><code>tsconfig.json</code></a> file, for example, you could specify that you want TypeScript to compile down to ES5 instead of ES6.</p>\\n<h3>Quick Example</h3>\\n<p><img src=\\\"https://i.imgur.com/V5nP3xj.jpg\\\" alt=\\\"Multiplication\\\"></p>\\n<p>In the screenshot above, you can see two files - <code>multiplication.js</code> and <code>multiplication.ts</code>.</p>\\n<p>This program just prints out the product of two numbers I’ve pre-defined.</p>\\n<blockquote>\\n<p><code>multiplication.ts</code></p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">number</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">number</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">showProduct</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">number</span><span class=\\\"token punctuation\\\">,</span> second<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">number</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Mathematical! The result is \\\"</span> <span class=\\\"token operator\\\">+</span> first <span class=\\\"token operator\\\">*</span> second <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\".\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">showProduct</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Mathematical! The result is 20.</span>\\n</code></pre>\\n      </div>\\n<p>Once I’ve finished creating <code>multiplication.ts</code>, I can compile it down to JavaScript using the <code>tsc</code> command which stands for TypeScript compile.</p>\\n<blockquote>\\n<p><code>multiplication.js</code></p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">showProduct</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">,</span> second<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Mathematical! The result is \\\"</span> <span class=\\\"token operator\\\">+</span> first <span class=\\\"token operator\\\">*</span> second <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\".\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">showProduct</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Mathematical! The result is 20.</span>\\n</code></pre>\\n      </div>\\n<p>Bam - I just successfully compiled TypeScript to JavaScript!</p>\",\"fields\":{\"slug\":\"/typescript/installation/\"},\"frontmatter\":{\"title\":\"Installation\"}}},\"pathContext\":{\"slug\":\"/typescript/installation/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/typescript-installation.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/typescript-installation.json\n// module chunks = 16223731343174440000"],"sourceRoot":""}