webpackJsonp([60302031226349e5],{"./node_modules/json-loader/index.js!./.cache/json/java-classes-and-objects.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h1>Classes and Objects</h1>\n<p>Think of a <code>Class</code> as a blueprint for creating something concrete. A <code>Class</code> tells you the ‘what’ and ‘how’ an <code>object</code> of that Class will look like once <code>instantiated</code>. In essence, it defines <code>properties</code> (say color, engine capacity) and <code>behavior</code> (stop, speed up, change gears, honk etc.) for a Car in this case.</p>\n<p>Objects are <em>instances</em> of a class. All objects are instances of a certain class. Imagine a class being a “template”, which every Object copies to. When you create an Object, basically it creates a new object on the blueprint of a class. Now lets look at this from a little piece of code :</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token comment" spellcheck="true">// Car class</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// car name</span>\n    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>\n    \n    <span class="token comment" spellcheck="true">// car manufacturer name</span>\n    <span class="token keyword">private</span> String manufacturerName<span class="token punctuation">;</span>\n    \n    <span class="token comment" spellcheck="true">// constructor</span>\n    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String man<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>manufacturerName <span class="token operator">=</span> man<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token comment" spellcheck="true">// getter method</span>\n    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token comment" spellcheck="true">// getter method</span>\n    <span class="token keyword">public</span> String <span class="token function">getManufacturerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> manufacturerName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment" spellcheck="true">//setter method</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nCar modelS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Model S"</span><span class="token punctuation">,</span><span class="token string">"Tesla"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nSystem<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Full Car Name = "</span> <span class="token operator">+</span> modelS<span class="token punctuation">.</span><span class="token function">getManufacturerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> modelS<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// prints Tesla Model S</span>\n</code></pre>\n      </div>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CJZP/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<p>So, <code>Car</code> is a class, which has the fields or properties name and manufacturerName. <code>modelS</code> is an object of <code>Car</code> class. So <code>modelS</code> also has the same properties and methods.</p>',fields:{slug:"/java/classes-and-objects/"},frontmatter:{title:"Classes and Objects"}}},pathContext:{slug:"/java/classes-and-objects/"}}}});
//# sourceMappingURL=path---java-classes-and-objects-c54ee7a95f102289f6c4.js.map