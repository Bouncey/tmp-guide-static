{"version":3,"sources":["webpack:///path---javascript-tutorials-declare-javascript-variables-6bf1e90f92fbe50acf80.js","webpack:///./.cache/json/javascript-tutorials-declare-javascript-variables.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/javascript-tutorials-declare-javascript-variables.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,2GACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,yzOAA+2OC,QAAuQC,KAAA,uDAA6DC,aAAgBC,MAAA,uBAA8BC,aAAgBH,KAAA","file":"path---javascript-tutorials-declare-javascript-variables-6bf1e90f92fbe50acf80.js","sourcesContent":["webpackJsonp([1456443074124358100],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/javascript-tutorials-declare-javascript-variables.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Declare Variables</h1>\\n<p>JavaScript variable declarations can be sorted into three distinct components: the variable type, the variable name, and the variable value.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">var</span> myName <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Rafael\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Let’s break the above line of code into the pieces that make it up: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">var</span><span class=\\\"token operator\\\">/</span><span class=\\\"token keyword\\\">const</span><span class=\\\"token operator\\\">/</span><span class=\\\"token keyword\\\">let</span>\\n</code></pre>\\n      </div>\\n<p>JavaScript variables can have three declaration types: var, const, and let. Var-type variables are global, if declared outside a function they can be accessed by any JS file (or the console), and if created within a function they are accessible regardless of block scope. Let-type variables are limited in scope to their block. See the example below for the difference.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>     <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">varTest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">var</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// same variable!</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">letTest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">let</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">let</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// different variable</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Const-type variables have the same scope as let variables (block scope), but are immutable. Whatever value a const-type variable is to be assigned, must happen when the variable is declared, and JavaScript will thrown an error if the variable is changed later.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">const</span> genre <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"non-fiction\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>genre<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"non-fiction\\\";</span>\\n    genre <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"fantasy\\\"</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// error</span>\\n</code></pre>\\n      </div>\\n<p>Now that we can determine what the variable type is, let’s take a look at the name. JavaScript variable names are written in <code>camel case</code> format. An example of camel case is: <code>camelCase</code>. In the context of our example: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    myName\\n</code></pre>\\n      </div>\\n<p>The name is also we’ll access the variable again later:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>myName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"Rafael\\\"</span>\\n</code></pre>\\n      </div>\\n<p>Finally, our value: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    <span class=\\\"token string\\\">\\\"Rafael\\\"</span>\\n</code></pre>\\n      </div>\\n<p>JavaScript is dynamically typed, which means any given variable can represent any given data type at any given time. For example: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">var</span> example <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"This is an example\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    example <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span>\\n    example <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Result\\\"</span><span class=\\\"token punctuation\\\">}</span>\\n    example <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span>\\n</code></pre>\\n      </div>\\n<p>All those statements are perfectly valid - JavaScript variables can jump from string to array to object to integer.</p>\",\"fields\":{\"slug\":\"/javascript/tutorials/declare-javascript-variables/\"},\"frontmatter\":{\"title\":\"Declare Variables\"}}},\"pathContext\":{\"slug\":\"/javascript/tutorials/declare-javascript-variables/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-tutorials-declare-javascript-variables-6bf1e90f92fbe50acf80.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Declare Variables</h1>\\n<p>JavaScript variable declarations can be sorted into three distinct components: the variable type, the variable name, and the variable value.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">var</span> myName <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Rafael\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Let’s break the above line of code into the pieces that make it up: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">var</span><span class=\\\"token operator\\\">/</span><span class=\\\"token keyword\\\">const</span><span class=\\\"token operator\\\">/</span><span class=\\\"token keyword\\\">let</span>\\n</code></pre>\\n      </div>\\n<p>JavaScript variables can have three declaration types: var, const, and let. Var-type variables are global, if declared outside a function they can be accessed by any JS file (or the console), and if created within a function they are accessible regardless of block scope. Let-type variables are limited in scope to their block. See the example below for the difference.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>     <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">varTest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">var</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// same variable!</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">letTest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">let</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">let</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// different variable</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Const-type variables have the same scope as let variables (block scope), but are immutable. Whatever value a const-type variable is to be assigned, must happen when the variable is declared, and JavaScript will thrown an error if the variable is changed later.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">const</span> genre <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"non-fiction\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>genre<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"non-fiction\\\";</span>\\n    genre <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"fantasy\\\"</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// error</span>\\n</code></pre>\\n      </div>\\n<p>Now that we can determine what the variable type is, let’s take a look at the name. JavaScript variable names are written in <code>camel case</code> format. An example of camel case is: <code>camelCase</code>. In the context of our example: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    myName\\n</code></pre>\\n      </div>\\n<p>The name is also we’ll access the variable again later:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>myName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"Rafael\\\"</span>\\n</code></pre>\\n      </div>\\n<p>Finally, our value: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    <span class=\\\"token string\\\">\\\"Rafael\\\"</span>\\n</code></pre>\\n      </div>\\n<p>JavaScript is dynamically typed, which means any given variable can represent any given data type at any given time. For example: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">var</span> example <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"This is an example\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    example <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span>\\n    example <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Result\\\"</span><span class=\\\"token punctuation\\\">}</span>\\n    example <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span>\\n</code></pre>\\n      </div>\\n<p>All those statements are perfectly valid - JavaScript variables can jump from string to array to object to integer.</p>\",\"fields\":{\"slug\":\"/javascript/tutorials/declare-javascript-variables/\"},\"frontmatter\":{\"title\":\"Declare Variables\"}}},\"pathContext\":{\"slug\":\"/javascript/tutorials/declare-javascript-variables/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-tutorials-declare-javascript-variables.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/javascript-tutorials-declare-javascript-variables.json\n// module chunks = 1456443074124358100"],"sourceRoot":""}