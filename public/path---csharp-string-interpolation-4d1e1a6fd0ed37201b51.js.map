{"version":3,"sources":["webpack:///path---csharp-string-interpolation-4d1e1a6fd0ed37201b51.js","webpack:///./.cache/json/csharp-string-interpolation.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/csharp-string-interpolation.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,qFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,mtCAAmjCC,QAAmMC,KAAA,iCAAuCC,aAAgBC,MAAA,0BAAiCC,aAAgBH,KAAA","file":"path---csharp-string-interpolation-4d1e1a6fd0ed37201b51.js","sourcesContent":["webpackJsonp([2004112690037086500],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/csharp-string-interpolation.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>String Interpolation</h1>\\n<p>In C#, typically to concatenate strings you would either use the “+” operator or composite formatting with a method such as String.Format. By composite formatting I am referring to a format string with indexed placeholders (format items) and a list of objects to be used in the placeholders.</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>string message = \\\"Hello \\\" + firstName + \\\" \\\" + lastName + \\\"!\\\";\\n\\nstring message2 = string.Format(\\\"Hello {0} {1}!\\\", firstName, lastName);</code></pre>\\n      </div>\\n<p>With interpolated string expressions, you have a string with contained expressions that are replaced with the expressions’ results. You have to prefix your string literal with a dollar sign ($). The expressions you want included in the string are placed inline enclosed in curly braces. The above message would now look like this:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>string message = $\\\"Hello {firstName} {lastName}!\\\";</code></pre>\\n      </div>\\n<p><strong>Small Bit Of Useful Information</strong>\\nIn string interpolation you have the ability to call functions, properties and ternary operators.</p>\",\"fields\":{\"slug\":\"/csharp/string-interpolation/\"},\"frontmatter\":{\"title\":\"String Interpolation\"}}},\"pathContext\":{\"slug\":\"/csharp/string-interpolation/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---csharp-string-interpolation-4d1e1a6fd0ed37201b51.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>String Interpolation</h1>\\n<p>In C#, typically to concatenate strings you would either use the “+” operator or composite formatting with a method such as String.Format. By composite formatting I am referring to a format string with indexed placeholders (format items) and a list of objects to be used in the placeholders.</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>string message = \\\"Hello \\\" + firstName + \\\" \\\" + lastName + \\\"!\\\";\\n\\nstring message2 = string.Format(\\\"Hello {0} {1}!\\\", firstName, lastName);</code></pre>\\n      </div>\\n<p>With interpolated string expressions, you have a string with contained expressions that are replaced with the expressions’ results. You have to prefix your string literal with a dollar sign ($). The expressions you want included in the string are placed inline enclosed in curly braces. The above message would now look like this:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>string message = $\\\"Hello {firstName} {lastName}!\\\";</code></pre>\\n      </div>\\n<p><strong>Small Bit Of Useful Information</strong>\\nIn string interpolation you have the ability to call functions, properties and ternary operators.</p>\",\"fields\":{\"slug\":\"/csharp/string-interpolation/\"},\"frontmatter\":{\"title\":\"String Interpolation\"}}},\"pathContext\":{\"slug\":\"/csharp/string-interpolation/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/csharp-string-interpolation.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/csharp-string-interpolation.json\n// module chunks = 2004112690037086500"],"sourceRoot":""}