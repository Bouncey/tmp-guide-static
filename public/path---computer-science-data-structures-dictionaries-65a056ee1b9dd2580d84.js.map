{"version":3,"sources":["webpack:///path---computer-science-data-structures-dictionaries-65a056ee1b9dd2580d84.js","webpack:///./.cache/json/computer-science-data-structures-dictionaries.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/computer-science-data-structures-dictionaries.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,uGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,wvzBAAykxBC,QAAqlEC,KAAA,mDAAyDC,aAAgBC,MAAA,kBAAyBC,aAAgBH,KAAA","file":"path---computer-science-data-structures-dictionaries-65a056ee1b9dd2580d84.js","sourcesContent":["webpackJsonp([11072870230442527000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/computer-science-data-structures-dictionaries.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Dictionaries</h2>\\n<p>Let’s assume we have a homogeneous list.  We want to count how many times each item occurs in the list.  How can we do that, without using Python’s built-in methods such as count or Counter from the Python collections module?  A Google search for “How to count the occurrences of an item in a list?” will return Stack Overflow answers pointing you to the count method and the collections module, but for learning purposes let’s try to solve the problem without using these tools.</p>\\n<p>Here’s the list we’ll be working with:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"strawberry\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"vanilla\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"vanilla\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"banana\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"rum raisin\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"banana\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>This code, using nested for loops, produces the right answer, storing the answer in the list “count”:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>count <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">for</span> flavor <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n  found <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">False</span>\\n  <span class=\\\"token keyword\\\">for</span> entry <span class=\\\"token keyword\\\">in</span> count<span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">if</span> entry<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> flavor<span class=\\\"token punctuation\\\">:</span>\\n      entry<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span>\\n      found <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">True</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token operator\\\">not</span> found<span class=\\\"token punctuation\\\">:</span>\\n      count<span class=\\\"token punctuation\\\">.</span>append<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Print.</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>entry<span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">in</span> count<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>entry<span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Although this code gives the correct answer, there are two things wrong with it.  First, it is complex.  The more nested loops a program contains, the harder it is to understand, fix, and extend.  Moreover, it is inefficient.  This may not be a problem in this small example, but imagine a list with thousands or millions of items.  Scanning the list of entries each time we make an observation would take a very, very long time, no matter how fast the computer.  This is a topic addressed more fully when studying topics such as big O notation and comparing searching and sorting algorithms.</p>\\n<p>A better answer is to use another data structure known as a <strong>dictionary</strong> or <strong>map</strong>.  This data structure is an <em>unordered, mutable</em> collection of <em>key / value</em> pairs.  Think of a dictionary like a phonebook, where the key is the person’s name, and the value is the phone number.  Keys in a dictionary form a set, meaning they can only appear once, and they cannot be changed (they are immutable), although the values associated with a key can be changed.  </p>\\n<p>Dictionaries are created by putting key/value pairs inside of braces.  To get the value associated with a key, you put the key in square brackets.  </p>\\n<p>Here are some code examples:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'strawberry'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>ice_cream<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'strawberry'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>ice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'strawberry'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span> <span class=\\\"token number\\\">1</span>\\n</code></pre>\\n      </div>\\n<p>To test whether a key is in a dictionary, use k in d:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'strawberry'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'chocolate is in the list'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token keyword\\\">del</span> ice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'chocolate'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'oops: why is chocolate still there?'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p><strong>Updating and Membership</strong>\\nTo update dictionaries, just assign a value to a key. If the key is already in the dictionary, this changes the value associated with it.</p>\\n<p>If the key was not present, it is added, along with the value:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'chocolate'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">33</span>\\nice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'vanilla'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">999</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># oops</span>\\n<span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>ice_cream<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> vanilla' <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">999</span><span class=\\\"token punctuation\\\">}</span>\\nice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'vanilla'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">9</span>\\n<span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>ice_cream<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> vanilla' <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Use <em>del d[k]</em>, to remove an entry from a dictionary, where <em>d</em> is the dictionary name and <em>k</em> is the key being removed. Only entries that are present can be removed; trying to remove one that isn’t there causes an error:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> vanilla' <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">del</span> ice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'chocolate'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>ice_cream<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'vanilla'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">del</span> ice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'strawberry'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token operator\\\">>></span> Traceback <span class=\\\"token punctuation\\\">(</span>most recent call last<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n   File <span class=\\\"token string\\\">\\\"&lt;stdin>\\\"</span><span class=\\\"token punctuation\\\">,</span> line <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">in</span> <span class=\\\"token operator\\\">&lt;</span>module<span class=\\\"token operator\\\">></span>\\n   KeyError<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'strawberry'</span>\\n</code></pre>\\n      </div>\\n<p><strong>Loops</strong>\\nSince dictionaries are collections (along with lists, tuples, and sets), we’re going to want to loop over their\\ncontents. We do this with a for loop, which assigns each of the keys in the dictionary to the loop variable in turn:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">183</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">'vanilla'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">71</span><span class=\\\"token punctuation\\\">,</span>\\n             <span class=\\\"token string\\\">'strawberry'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">63</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">'banana'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">for</span> flavor <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>flavor<span class=\\\"token punctuation\\\">,</span> ice_cream<span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token operator\\\">>></span> <span class=\\\"token string\\\">'banana'</span> <span class=\\\"token number\\\">1</span>\\n   <span class=\\\"token string\\\">'vanilla'</span> <span class=\\\"token number\\\">71</span>\\n   <span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token number\\\">183</span>\\n   <span class=\\\"token string\\\">'strawberry'</span> <span class=\\\"token number\\\">63</span>\\n</code></pre>\\n      </div>\\n<p>As with set elements, Python loops over the entries in the dictionary in an arbitrary order. There is no guarantee that they will be seen alphabetically or in the order, they were added to the dictionary. Notice, by the way, that looping over dictionaries is slightly different from looping over lists. When Python loops over a list, the values in the list are assigned to the loop variable. When it loops over a dictionary, on the other hand, it assigns the keys. Python’s designers chose to do this because:</p>\\n<ul>\\n<li>looping over the indices of a list isn’t very interesting, since the\\nprogram would always get the sequence 0, 1, 2, …; and</li>\\n<li>it’s a lot easier to go from a dictionary key to the associated value\\nthan it is to take the value and find the associated key.</li>\\n</ul>\\n<p><strong>Dictionary Methods</strong>\\nDictionaries are objects, just like lists, tuples and sets.  A few common dictionary methods are:</p>\\n<ul>\\n<li><em>d.clear()</em> - clear a dictionary</li>\\n<li><em>d.get(x, 99)</em> - Returns the value associated with a key, or a default value if the key is not present.</li>\\n<li><em>d.keys()</em> - return keys</li>\\n<li><em>d.items()</em> - return list of key, value pairs</li>\\n<li><em>d.values()</em> - return values as a list, values may not be unique</li>\\n<li><em>d.update()</em> - update the dictionary with the contents of another</li>\\n</ul>\\n<p>One common use of items is to loop over the keys and values in a dictionary together:\\nfor (key, value) in dictionary.items():\\n…do something with the key and value…</p>\\n<p>This is inefficient for large dictionaries since items() actually constructs a list of (key, value) pairs. A similar method called <em>iteritems()</em> hands these pairs back one by one on demand:\\nfor (key, value) in dictionary.iteritems():\\n…do something with the key and value…</p>\\n<p>Let’s go back to the original example - how do we count the number of items in the ice_cream list using a dictionary?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Count all the flavors.</span>\\nice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"strawberry\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"vanilla\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"vanilla\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"banana\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"rum raisin\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"banana\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n\\ncount <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">for</span> flavor <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">if</span> flavor <span class=\\\"token keyword\\\">in</span> count<span class=\\\"token punctuation\\\">:</span>\\n    count<span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> count<span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n  <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n    count<span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Print.</span>\\n<span class=\\\"token keyword\\\">for</span> b <span class=\\\"token keyword\\\">in</span> count<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>To do this, we create a dictionary that is initially empty. Each time we loop through the ice_cream list, we check\\nto see whether that flavor is already in the count dictionary. If it is, we add one to its count.\\nIf it isn’t, we add the name to the dictionary with the value 1.</p>\\n<p>We can shorten this program a bit using the method <em>dict.get()</em>. This returns either the value associated with a key or some default value that we provide. In this case, we get either the number of times we’ve already seen a flavor or zero, add one to whichever value the method returns, and store that back in the dictionary:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Count all the flavors.</span>\\ncount <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">for</span> flavor <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n  count<span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> count<span class=\\\"token punctuation\\\">.</span>get<span class=\\\"token punctuation\\\">(</span>flavor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Print.</span>\\nkeys <span class=\\\"token operator\\\">=</span> count<span class=\\\"token punctuation\\\">.</span>keys<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nkeys<span class=\\\"token punctuation\\\">.</span>sort<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">for</span> b <span class=\\\"token keyword\\\">in</span> keys<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Print.</span>\\n<span class=\\\"token keyword\\\">for</span> key <span class=\\\"token keyword\\\">in</span> sorted<span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Note that we’re using two separate ways to print the key and the value: one uses Python’s sorted method, and the other does not.  </p>\\n<p>If we wanted to print the flavors in order of frequency, we need to <strong>invert the dictionary</strong>.  This means we need to use the values as keys, and the keys as values.  Since there is no guarantee that the values are unique, we need to take steps to avoid <em>collisions</em>. </p>\\n<p>The solution is to use some sort of collection, such as a list, to store the inverted dictionary’s values. If we go this route, the inverse of the dictionary shown earlier would be {1:[’a’,’b’,’c’]}. Here’s a program to do what we want:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"strawberry\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"vanilla\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"vanilla\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"banana\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"rum raisin\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"banana\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Count all the flavors.</span>\\ncount <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">for</span> flavor <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n  count<span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> count<span class=\\\"token punctuation\\\">.</span>get<span class=\\\"token punctuation\\\">(</span>flavor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Invert the dictionary.</span>\\nfreq <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>flavor<span class=\\\"token punctuation\\\">,</span> times<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">in</span> count<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">if</span> times <span class=\\\"token keyword\\\">in</span> freq<span class=\\\"token punctuation\\\">:</span>\\n    freq<span class=\\\"token punctuation\\\">[</span>times<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>append<span class=\\\"token punctuation\\\">(</span>flavor<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n    freq<span class=\\\"token punctuation\\\">[</span>times<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span>\\n  \\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Print.</span>\\n<span class=\\\"token keyword\\\">for</span> key <span class=\\\"token keyword\\\">in</span> freq<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">for</span> flavor <span class=\\\"token keyword\\\">in</span> sorted<span class=\\\"token punctuation\\\">(</span>freq<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\":\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\" \\\"</span><span class=\\\"token punctuation\\\">,</span> flavor<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>More Information:</h4>\\n<!-- Please add any articles you think might be helpful to read before writing the article -->\",\"fields\":{\"slug\":\"/computer-science/data-structures/dictionaries/\"},\"frontmatter\":{\"title\":\"Dictionaries\"}}},\"pathContext\":{\"slug\":\"/computer-science/data-structures/dictionaries/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---computer-science-data-structures-dictionaries-65a056ee1b9dd2580d84.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Dictionaries</h2>\\n<p>Let’s assume we have a homogeneous list.  We want to count how many times each item occurs in the list.  How can we do that, without using Python’s built-in methods such as count or Counter from the Python collections module?  A Google search for “How to count the occurrences of an item in a list?” will return Stack Overflow answers pointing you to the count method and the collections module, but for learning purposes let’s try to solve the problem without using these tools.</p>\\n<p>Here’s the list we’ll be working with:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"strawberry\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"vanilla\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"vanilla\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"banana\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"rum raisin\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"banana\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>This code, using nested for loops, produces the right answer, storing the answer in the list “count”:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>count <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">for</span> flavor <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n  found <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">False</span>\\n  <span class=\\\"token keyword\\\">for</span> entry <span class=\\\"token keyword\\\">in</span> count<span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">if</span> entry<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> flavor<span class=\\\"token punctuation\\\">:</span>\\n      entry<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span>\\n      found <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">True</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token operator\\\">not</span> found<span class=\\\"token punctuation\\\">:</span>\\n      count<span class=\\\"token punctuation\\\">.</span>append<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Print.</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>entry<span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">in</span> count<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>entry<span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Although this code gives the correct answer, there are two things wrong with it.  First, it is complex.  The more nested loops a program contains, the harder it is to understand, fix, and extend.  Moreover, it is inefficient.  This may not be a problem in this small example, but imagine a list with thousands or millions of items.  Scanning the list of entries each time we make an observation would take a very, very long time, no matter how fast the computer.  This is a topic addressed more fully when studying topics such as big O notation and comparing searching and sorting algorithms.</p>\\n<p>A better answer is to use another data structure known as a <strong>dictionary</strong> or <strong>map</strong>.  This data structure is an <em>unordered, mutable</em> collection of <em>key / value</em> pairs.  Think of a dictionary like a phonebook, where the key is the person’s name, and the value is the phone number.  Keys in a dictionary form a set, meaning they can only appear once, and they cannot be changed (they are immutable), although the values associated with a key can be changed.  </p>\\n<p>Dictionaries are created by putting key/value pairs inside of braces.  To get the value associated with a key, you put the key in square brackets.  </p>\\n<p>Here are some code examples:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'strawberry'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>ice_cream<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'strawberry'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>ice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'strawberry'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span> <span class=\\\"token number\\\">1</span>\\n</code></pre>\\n      </div>\\n<p>To test whether a key is in a dictionary, use k in d:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'strawberry'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'chocolate is in the list'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token keyword\\\">del</span> ice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'chocolate'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'oops: why is chocolate still there?'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p><strong>Updating and Membership</strong>\\nTo update dictionaries, just assign a value to a key. If the key is already in the dictionary, this changes the value associated with it.</p>\\n<p>If the key was not present, it is added, along with the value:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'chocolate'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">33</span>\\nice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'vanilla'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">999</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># oops</span>\\n<span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>ice_cream<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> vanilla' <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">999</span><span class=\\\"token punctuation\\\">}</span>\\nice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'vanilla'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">9</span>\\n<span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>ice_cream<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> vanilla' <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Use <em>del d[k]</em>, to remove an entry from a dictionary, where <em>d</em> is the dictionary name and <em>k</em> is the key being removed. Only entries that are present can be removed; trying to remove one that isn’t there causes an error:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> vanilla' <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">del</span> ice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'chocolate'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>ice_cream<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'vanilla'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">del</span> ice_cream<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'strawberry'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token operator\\\">>></span> Traceback <span class=\\\"token punctuation\\\">(</span>most recent call last<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n   File <span class=\\\"token string\\\">\\\"&lt;stdin>\\\"</span><span class=\\\"token punctuation\\\">,</span> line <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">in</span> <span class=\\\"token operator\\\">&lt;</span>module<span class=\\\"token operator\\\">></span>\\n   KeyError<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'strawberry'</span>\\n</code></pre>\\n      </div>\\n<p><strong>Loops</strong>\\nSince dictionaries are collections (along with lists, tuples, and sets), we’re going to want to loop over their\\ncontents. We do this with a for loop, which assigns each of the keys in the dictionary to the loop variable in turn:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">183</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">'vanilla'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">71</span><span class=\\\"token punctuation\\\">,</span>\\n             <span class=\\\"token string\\\">'strawberry'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">63</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">'banana'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">for</span> flavor <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>flavor<span class=\\\"token punctuation\\\">,</span> ice_cream<span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token operator\\\">>></span> <span class=\\\"token string\\\">'banana'</span> <span class=\\\"token number\\\">1</span>\\n   <span class=\\\"token string\\\">'vanilla'</span> <span class=\\\"token number\\\">71</span>\\n   <span class=\\\"token string\\\">'chocolate'</span> <span class=\\\"token number\\\">183</span>\\n   <span class=\\\"token string\\\">'strawberry'</span> <span class=\\\"token number\\\">63</span>\\n</code></pre>\\n      </div>\\n<p>As with set elements, Python loops over the entries in the dictionary in an arbitrary order. There is no guarantee that they will be seen alphabetically or in the order, they were added to the dictionary. Notice, by the way, that looping over dictionaries is slightly different from looping over lists. When Python loops over a list, the values in the list are assigned to the loop variable. When it loops over a dictionary, on the other hand, it assigns the keys. Python’s designers chose to do this because:</p>\\n<ul>\\n<li>looping over the indices of a list isn’t very interesting, since the\\nprogram would always get the sequence 0, 1, 2, …; and</li>\\n<li>it’s a lot easier to go from a dictionary key to the associated value\\nthan it is to take the value and find the associated key.</li>\\n</ul>\\n<p><strong>Dictionary Methods</strong>\\nDictionaries are objects, just like lists, tuples and sets.  A few common dictionary methods are:</p>\\n<ul>\\n<li><em>d.clear()</em> - clear a dictionary</li>\\n<li><em>d.get(x, 99)</em> - Returns the value associated with a key, or a default value if the key is not present.</li>\\n<li><em>d.keys()</em> - return keys</li>\\n<li><em>d.items()</em> - return list of key, value pairs</li>\\n<li><em>d.values()</em> - return values as a list, values may not be unique</li>\\n<li><em>d.update()</em> - update the dictionary with the contents of another</li>\\n</ul>\\n<p>One common use of items is to loop over the keys and values in a dictionary together:\\nfor (key, value) in dictionary.items():\\n…do something with the key and value…</p>\\n<p>This is inefficient for large dictionaries since items() actually constructs a list of (key, value) pairs. A similar method called <em>iteritems()</em> hands these pairs back one by one on demand:\\nfor (key, value) in dictionary.iteritems():\\n…do something with the key and value…</p>\\n<p>Let’s go back to the original example - how do we count the number of items in the ice_cream list using a dictionary?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Count all the flavors.</span>\\nice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"strawberry\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"vanilla\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"vanilla\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"banana\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"rum raisin\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"banana\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n\\ncount <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">for</span> flavor <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">if</span> flavor <span class=\\\"token keyword\\\">in</span> count<span class=\\\"token punctuation\\\">:</span>\\n    count<span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> count<span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n  <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n    count<span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Print.</span>\\n<span class=\\\"token keyword\\\">for</span> b <span class=\\\"token keyword\\\">in</span> count<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>To do this, we create a dictionary that is initially empty. Each time we loop through the ice_cream list, we check\\nto see whether that flavor is already in the count dictionary. If it is, we add one to its count.\\nIf it isn’t, we add the name to the dictionary with the value 1.</p>\\n<p>We can shorten this program a bit using the method <em>dict.get()</em>. This returns either the value associated with a key or some default value that we provide. In this case, we get either the number of times we’ve already seen a flavor or zero, add one to whichever value the method returns, and store that back in the dictionary:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Count all the flavors.</span>\\ncount <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">for</span> flavor <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n  count<span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> count<span class=\\\"token punctuation\\\">.</span>get<span class=\\\"token punctuation\\\">(</span>flavor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Print.</span>\\nkeys <span class=\\\"token operator\\\">=</span> count<span class=\\\"token punctuation\\\">.</span>keys<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nkeys<span class=\\\"token punctuation\\\">.</span>sort<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">for</span> b <span class=\\\"token keyword\\\">in</span> keys<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Print.</span>\\n<span class=\\\"token keyword\\\">for</span> key <span class=\\\"token keyword\\\">in</span> sorted<span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Note that we’re using two separate ways to print the key and the value: one uses Python’s sorted method, and the other does not.  </p>\\n<p>If we wanted to print the flavors in order of frequency, we need to <strong>invert the dictionary</strong>.  This means we need to use the values as keys, and the keys as values.  Since there is no guarantee that the values are unique, we need to take steps to avoid <em>collisions</em>. </p>\\n<p>The solution is to use some sort of collection, such as a list, to store the inverted dictionary’s values. If we go this route, the inverse of the dictionary shown earlier would be {1:[’a’,’b’,’c’]}. Here’s a program to do what we want:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>ice_cream <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"strawberry\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"vanilla\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"vanilla\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"chocolate\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"banana\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"rum raisin\\\"</span><span class=\\\"token punctuation\\\">,</span> \\n             <span class=\\\"token string\\\">\\\"banana\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Count all the flavors.</span>\\ncount <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">for</span> flavor <span class=\\\"token keyword\\\">in</span> ice_cream<span class=\\\"token punctuation\\\">:</span>\\n  count<span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> count<span class=\\\"token punctuation\\\">.</span>get<span class=\\\"token punctuation\\\">(</span>flavor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Invert the dictionary.</span>\\nfreq <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>flavor<span class=\\\"token punctuation\\\">,</span> times<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">in</span> count<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">if</span> times <span class=\\\"token keyword\\\">in</span> freq<span class=\\\"token punctuation\\\">:</span>\\n    freq<span class=\\\"token punctuation\\\">[</span>times<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>append<span class=\\\"token punctuation\\\">(</span>flavor<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n    freq<span class=\\\"token punctuation\\\">[</span>times<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>flavor<span class=\\\"token punctuation\\\">]</span>\\n  \\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Print.</span>\\n<span class=\\\"token keyword\\\">for</span> key <span class=\\\"token keyword\\\">in</span> freq<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">for</span> flavor <span class=\\\"token keyword\\\">in</span> sorted<span class=\\\"token punctuation\\\">(</span>freq<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span> <span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\":\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\" \\\"</span><span class=\\\"token punctuation\\\">,</span> flavor<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>More Information:</h4>\\n<!-- Please add any articles you think might be helpful to read before writing the article -->\",\"fields\":{\"slug\":\"/computer-science/data-structures/dictionaries/\"},\"frontmatter\":{\"title\":\"Dictionaries\"}}},\"pathContext\":{\"slug\":\"/computer-science/data-structures/dictionaries/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/computer-science-data-structures-dictionaries.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/computer-science-data-structures-dictionaries.json\n// module chunks = 11072870230442527000"],"sourceRoot":""}