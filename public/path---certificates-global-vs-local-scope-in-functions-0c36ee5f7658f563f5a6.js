webpackJsonp([0x897760cb186ad800],{"./node_modules/json-loader/index.js!./.cache/json/certificates-global-vs-local-scope-in-functions.json":function(e,o){e.exports={data:{markdownRemark:{html:'<p>It is possible to have both <code>local</code> and <code>global</code> variables with the same name. When you do this, the local variable takes precedence over the <code>global</code> variable.</p>\n<p>In this example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>var someVar = "Hat";\nfunction myOutfit() {\n  var someVar = "Head";\n  return someVar;\n}</code></pre>\n      </div>\n<p>The function <code>myOutfit</code> will return <code>"Head"</code> because the <code>local</code> version of the variable is present.</p>',fields:{slug:"/certificates/global-vs-local-scope-in-functions/"},frontmatter:{title:"Global Vs Local Scope in Functions"}}},pathContext:{slug:"/certificates/global-vs-local-scope-in-functions/"}}}});
//# sourceMappingURL=path---certificates-global-vs-local-scope-in-functions-0c36ee5f7658f563f5a6.js.map