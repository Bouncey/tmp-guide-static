webpackJsonp([0x31e560a3ebe7a400],{"./node_modules/json-loader/index.js!./.cache/json/canvas-basic-usage.json":function(a,n){a.exports={data:{markdownRemark:{html:'<h2>Basic Usage of Canvas</h2>\n<p>When using canvas, first place a canvas into the document as an element.</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>\n<p>The <code>width</code> and <code>height</code> attributes will control the size of the canvas. These attributes control the size of the drawing canvas, not the actual rendered size. See the “Canvas Dimensions” page for more.</p>\n<p>In order to use a <code>canvas</code>, we must first grab the element from the page as a DOM element, and then get a drawing context from it.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">\'2d\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>All drawing calls after this will be made from the <code>ctx</code> object. The <code>ctx</code> represents the drawing context of the object, and contains information about the 2D drawing space. The <code>canvas</code> object is the actual DOM element. Interacting with it allows us to access attributes like <code>width</code> and <code>height</code>.</p>\n<p>There are a few available drawing contexts, including <code>webgl</code>. WebGL is really an entirely different technology, so we will only focus on 2D drawing.</p>\n<p>Paths are the building block of drawing in <code>canvas</code>. See the ’<a href="/articles/canvas/paths">Paths</a>’ page for more.</p>\n<h4>More Information:</h4>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">MDN Canvas API</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext">HTMLCanvasElement.getContext() (MDN)</a></li>\n</ul>',fields:{slug:"/canvas/basic-usage/"},frontmatter:{title:"Basic Usage"}}},pathContext:{slug:"/canvas/basic-usage/"}}}});
//# sourceMappingURL=path---canvas-basic-usage-609ccc09e5299c8bbc53.js.map