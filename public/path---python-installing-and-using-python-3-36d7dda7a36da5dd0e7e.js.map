{"version":3,"sources":["webpack:///path---python-installing-and-using-python-3-36d7dda7a36da5dd0e7e.js","webpack:///./.cache/json/python-installing-and-using-python-3.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/python-installing-and-using-python-3.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,8FACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,06LAAwsJC,QAAmvCC,KAAA,0CAAgDC,aAAgBC,MAAA,mCAA0CC,aAAgBH,KAAA","file":"path---python-installing-and-using-python-3-36d7dda7a36da5dd0e7e.js","sourcesContent":["webpackJsonp([14541009097982603000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/python-installing-and-using-python-3.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Installing Python 3</h2>\\n<p>You can download Python from this official <a href='https://www.python.org/downloads/' target='_blank' rel='nofollow'>link</a>. Based on your OS (Windows or Linux or OSX), you might want to install Python 3 following <a href='http://docs.python-guide.org/en/latest/starting/installation/' target='_blank' rel='nofollow'>these instructions</a>.</p>\\n<h2>Using Virtual Environments</h2>\\n<p>It is always a great idea to <a href='https://en.wikipedia.org/wiki/Sandbox_(computer_security)' target='_blank' rel='nofollow'>sandbox</a> your Python installation; and keeping it separate from your <em>System Python</em>. The <em>System Python</em> is the path to Python interpreter, which is used by other modules installed along with your OS.</p>\\n<p>It’s <strong>not safe</strong> to install Python Web-frameworks or libraries directly using <em>System Python</em>. Instead, you can use <a href='https://virtualenv.readthedocs.org/en/latest/' target='_blank' rel='nofollow'>Virtualenv</a> to create and spawn a separate Python process when you are developing Python applications.</p>\\n<h3>Virtualenvwrapper</h3>\\n<p>The <a href='https://virtualenvwrapper.readthedocs.org/en/latest/' target='_blank' rel='nofollow'>Virtualenvwrapper module</a> makes it easy for you to manage and sandbox multiple Python sandboxed environments in one machine; without corrupting any modules or services written in Python and used by your machine.</p>\\n<p>Of course, most cloud hosted development environment such as <a href='https://www.nitrous.io/' target='_blank' rel='nofollow'>Nitrous</a> or <a href='https://c9.io/' target='_blank' rel='nofollow'>Cloud9</a> also comes with these pre-installed and ready for you to get coding! You can quickly pick a box from your dashboard, and start coding after activating a Python 3 environment.</p>\\n<p>In <a href='https://c9.io/' target='_blank' rel='nofollow'>Cloud9</a>, you need to select the Django box while creating a new development environment.</p>\\n<p>A few shell command examples would follow. If you wish to copy-paste, do note that the <code>$</code> sign is a shorthand for the terminal prompt, it’s not part of the command. My terminal prompt looks something like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>alayek:~/workspace (master) $</code></pre>\\n      </div>\\n<p>And, an <code>ls</code> would look like</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>alayek:~/workspace (master) $ ls</code></pre>\\n      </div>\\n<p>But, while writing the same in this documentation, I would be writing it as</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ ls</code></pre>\\n      </div>\\n<p>Getting back to our discussion, you can create a Python 3 interpreter-included sandbox on Cloud9 by running on your cloud terminal:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ mkvirtualenv py3 --python=/usr/bin/python3</code></pre>\\n      </div>\\n<p>You have to run it only once after creating a new box for your project. Once executed, this command would create a new sandboxed virtualenv ready for you to use, named <code>py3</code>.</p>\\n<p>To view available virtual environments, you can use</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ workon</code></pre>\\n      </div>\\n<p>To activate <code>py3</code>, you can use the <code>workon</code> command with the name of the environment:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ workon py3</code></pre>\\n      </div>\\n<p>All three terminal commands above would also work on local Linux machines or OSX machines. These are <a href='https://virtualenvwrapper.readthedocs.org/en/latest/#introduction' target='_blank' rel='nofollow'>virtualenvwrapper</a> commands; so if you are planning on using them, make sure you have this module installed and added to <code>PATH</code> variable.</p>\\n<p>If you are inside a virtual environment; you can easily find that out by checking your terminal prompt. The environment name would be clearly shown in your terminal prompt.</p>\\n<p>For instance, when I am inside the <code>py3</code> environment; I would be seeing this as my terminal prompt:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>(py3)alayek:~/workspace (master) $</code></pre>\\n      </div>\\n<p>Notice the <code>(py3)</code> in braces! If for some reason, you are not seeing this, even if you are inside a virtual env; you can try doing one of the things <a href='http://stackoverflow.com/questions/1871549/python-determine-if-running-inside-virtualenv' target='_blank' rel='nofollow'>mentioned here</a>.</p>\\n<p>To get out of a virtual environment; or to deactivate one - use the command</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ deactivate</code></pre>\\n      </div>\\n<p>Again, this works only with virtualenvwrapper module.</p>\\n<h3>Pipenv</h3>\\n<p>An alternative to using virtualenvwrapper is <a href=\\\"https://docs.pipenv.org/\\\">Pipenv</a>. It automatically creates virtual environments for your projects, and maintains a <code>Pipfile</code> which contains the dependencies. Using Pipenv means you no longer need to use pip and virtualenv separately, or manage your own <code>requirements.txt</code> file. For those familiar with JavaScript, Pipenv is similar to using a packaging tool like <code>npm</code>.</p>\\n<p>To get started with Pipenv, you can follow this very detailed <a href=\\\"https://docs.pipenv.org/install.html#installing-pipenv\\\">guide</a>. Pipenv makes it easy to <a href=\\\"https://docs.pipenv.org/basics.html#specifying-versions-of-python\\\">specify which version of Python</a> you wish to use for each project, <a href=\\\"https://docs.pipenv.org/basics.html#importing-from-requirements-txt\\\">import</a> from an existing <code>requirements.txt</code> file and <a href=\\\"https://docs.pipenv.org/#pipenv-graph\\\">graph</a> your dependencies.</p>\",\"fields\":{\"slug\":\"/python/installing-and-using-python-3/\"},\"frontmatter\":{\"title\":\"Installing and Using Python 3\"}}},\"pathContext\":{\"slug\":\"/python/installing-and-using-python-3/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---python-installing-and-using-python-3-36d7dda7a36da5dd0e7e.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Installing Python 3</h2>\\n<p>You can download Python from this official <a href='https://www.python.org/downloads/' target='_blank' rel='nofollow'>link</a>. Based on your OS (Windows or Linux or OSX), you might want to install Python 3 following <a href='http://docs.python-guide.org/en/latest/starting/installation/' target='_blank' rel='nofollow'>these instructions</a>.</p>\\n<h2>Using Virtual Environments</h2>\\n<p>It is always a great idea to <a href='https://en.wikipedia.org/wiki/Sandbox_(computer_security)' target='_blank' rel='nofollow'>sandbox</a> your Python installation; and keeping it separate from your <em>System Python</em>. The <em>System Python</em> is the path to Python interpreter, which is used by other modules installed along with your OS.</p>\\n<p>It’s <strong>not safe</strong> to install Python Web-frameworks or libraries directly using <em>System Python</em>. Instead, you can use <a href='https://virtualenv.readthedocs.org/en/latest/' target='_blank' rel='nofollow'>Virtualenv</a> to create and spawn a separate Python process when you are developing Python applications.</p>\\n<h3>Virtualenvwrapper</h3>\\n<p>The <a href='https://virtualenvwrapper.readthedocs.org/en/latest/' target='_blank' rel='nofollow'>Virtualenvwrapper module</a> makes it easy for you to manage and sandbox multiple Python sandboxed environments in one machine; without corrupting any modules or services written in Python and used by your machine.</p>\\n<p>Of course, most cloud hosted development environment such as <a href='https://www.nitrous.io/' target='_blank' rel='nofollow'>Nitrous</a> or <a href='https://c9.io/' target='_blank' rel='nofollow'>Cloud9</a> also comes with these pre-installed and ready for you to get coding! You can quickly pick a box from your dashboard, and start coding after activating a Python 3 environment.</p>\\n<p>In <a href='https://c9.io/' target='_blank' rel='nofollow'>Cloud9</a>, you need to select the Django box while creating a new development environment.</p>\\n<p>A few shell command examples would follow. If you wish to copy-paste, do note that the <code>$</code> sign is a shorthand for the terminal prompt, it’s not part of the command. My terminal prompt looks something like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>alayek:~/workspace (master) $</code></pre>\\n      </div>\\n<p>And, an <code>ls</code> would look like</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>alayek:~/workspace (master) $ ls</code></pre>\\n      </div>\\n<p>But, while writing the same in this documentation, I would be writing it as</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ ls</code></pre>\\n      </div>\\n<p>Getting back to our discussion, you can create a Python 3 interpreter-included sandbox on Cloud9 by running on your cloud terminal:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ mkvirtualenv py3 --python=/usr/bin/python3</code></pre>\\n      </div>\\n<p>You have to run it only once after creating a new box for your project. Once executed, this command would create a new sandboxed virtualenv ready for you to use, named <code>py3</code>.</p>\\n<p>To view available virtual environments, you can use</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ workon</code></pre>\\n      </div>\\n<p>To activate <code>py3</code>, you can use the <code>workon</code> command with the name of the environment:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ workon py3</code></pre>\\n      </div>\\n<p>All three terminal commands above would also work on local Linux machines or OSX machines. These are <a href='https://virtualenvwrapper.readthedocs.org/en/latest/#introduction' target='_blank' rel='nofollow'>virtualenvwrapper</a> commands; so if you are planning on using them, make sure you have this module installed and added to <code>PATH</code> variable.</p>\\n<p>If you are inside a virtual environment; you can easily find that out by checking your terminal prompt. The environment name would be clearly shown in your terminal prompt.</p>\\n<p>For instance, when I am inside the <code>py3</code> environment; I would be seeing this as my terminal prompt:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>(py3)alayek:~/workspace (master) $</code></pre>\\n      </div>\\n<p>Notice the <code>(py3)</code> in braces! If for some reason, you are not seeing this, even if you are inside a virtual env; you can try doing one of the things <a href='http://stackoverflow.com/questions/1871549/python-determine-if-running-inside-virtualenv' target='_blank' rel='nofollow'>mentioned here</a>.</p>\\n<p>To get out of a virtual environment; or to deactivate one - use the command</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ deactivate</code></pre>\\n      </div>\\n<p>Again, this works only with virtualenvwrapper module.</p>\\n<h3>Pipenv</h3>\\n<p>An alternative to using virtualenvwrapper is <a href=\\\"https://docs.pipenv.org/\\\">Pipenv</a>. It automatically creates virtual environments for your projects, and maintains a <code>Pipfile</code> which contains the dependencies. Using Pipenv means you no longer need to use pip and virtualenv separately, or manage your own <code>requirements.txt</code> file. For those familiar with JavaScript, Pipenv is similar to using a packaging tool like <code>npm</code>.</p>\\n<p>To get started with Pipenv, you can follow this very detailed <a href=\\\"https://docs.pipenv.org/install.html#installing-pipenv\\\">guide</a>. Pipenv makes it easy to <a href=\\\"https://docs.pipenv.org/basics.html#specifying-versions-of-python\\\">specify which version of Python</a> you wish to use for each project, <a href=\\\"https://docs.pipenv.org/basics.html#importing-from-requirements-txt\\\">import</a> from an existing <code>requirements.txt</code> file and <a href=\\\"https://docs.pipenv.org/#pipenv-graph\\\">graph</a> your dependencies.</p>\",\"fields\":{\"slug\":\"/python/installing-and-using-python-3/\"},\"frontmatter\":{\"title\":\"Installing and Using Python 3\"}}},\"pathContext\":{\"slug\":\"/python/installing-and-using-python-3/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/python-installing-and-using-python-3.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/python-installing-and-using-python-3.json\n// module chunks = 14541009097982603000"],"sourceRoot":""}