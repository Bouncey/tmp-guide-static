webpackJsonp([0x948c18a01ee0f80],{"./node_modules/json-loader/index.js!./.cache/json/clojure-vectors.json":function(e,o){e.exports={data:{markdownRemark:{html:'<p>A vector is perhaps the most simple type of collection in Clojure. You can think of it like an array in Javascript. Let’s define a simple vector:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>(def a-vector [1 2 3 4 5])\n;; Alternatively, use the vector function:\n(def another-vector (vector 1 2 3 4 5))\n;; You can use commas to separate items, since Clojure treats them as whitespace.\n(def comma-vector [1, 2, 3, 4, 5])</code></pre>\n      </div>\n<p>You’ll see that it uses square brackets, just like an array in JS. Since Clojure, like JS, is dynamically typed, vectors can hold elements of any type, including other vectors.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>(def mixed-type-vector [1 "foo" :bar ["spam" 22] #"^baz$"])</code></pre>\n      </div>\n<h2>Adding items to a vector</h2>\n<p>You can append items to a vector using <code>conj</code>. You can also prepend to a list using <code>into</code>, but note that <code>into</code> is intended for merging two vectors, so both its arguments must be vectors, and using <code>into</code> is slower than using <code>conj</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>(time (conj [1 2] 3))\n; => "Elapsed time: 0.032206 msecs"\n;    [1 2 3]\n(time (into [1] [2 3]))\n; => "Elapsed time: 0.078499 msecs"\n;    [1 2 3]</code></pre>\n      </div>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://ideone.com/wBSUEd\' target=\'_blank\' rel=\'nofollow\'>IDEOne it!</a></p>\n<h2>Retrieving items from a vector</h2>\n<p>You can retrieve items from a vector using <code>get</code>. This is equivalent to using bracket notation to access items in an array in many imperative languages. Items in a vector are 0-indexed, counting from the left.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>var arr = [1, 2, 3, 4, 5];\narr[0];\n// => 1</code></pre>\n      </div>\n<p>In Clojure, this would be written like so:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>(def a-vector [1 2 3 4 5])\n(get a-vector 0)\n; => 1</code></pre>\n      </div>\n<p>You can also give <code>get</code> a default value, if you give it an index that isn’t in the array.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>;; the list doesn\'t have 2147483647 elements, so it\'ll return a string instead.\n(get a-vector 2147483646 "sorry, not found!")\n; => "sorry, not found!"</code></pre>\n      </div>\n<h2>Converting other collections into vectors</h2>\n<p>Non-vector data structures can be converted into vectors using the <code>vec</code> function. With hashmaps, this produces a 2D vector containing pairs of keys and values.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>(vec \'(1 2 3 4 5))\n; => [1 2 3 4 5]\n(vec {:jack "black" :barry "white"})\n; => [[:jack "black"] [:barry "white"]]</code></pre>\n      </div>\n<h2>When to use a vector?</h2>\n<p>A vector should be used in almost all cases if you need a collection, because they have the shortest random-access times, which makes it easy to retrieve items from a vector. Note that vectors are ordered. If order doesn’t matter, it may be better to use a set. Also note that vectors are designed for appending items; if you need to prepend items, you might want to use a list.</p>\n<p>| <a href="//forum.freecodecamp.com/t/clojure-lists-they-are-everything/18417"><img src="//forum.freecodecamp.com/images/emoji/emoji_one/point_left.png?v=2" title=":point_left:" alt=":point_left:" class="forum-image"> Previous</a> | <a href="//forum.freecodecamp.com/t/clojure-resources/18422"><img src="//forum.freecodecamp.com/images/emoji/emoji_one/book.png?v=2" title=":book:" alt=":book:" class="forum-image"> Home <img src="//forum.freecodecamp.com/images/emoji/emoji_one/book.png?v=2" title=":book:" alt=":book:" class="forum-image"></a> | <a href="//forum.freecodecamp.com/t/clojure-hashmaps/18414">Next <img src="//forum.freecodecamp.com/images/emoji/emoji_one/point_right.png?v=2" title=":point_right:" alt=":point_right:" class="forum-image"></a>|<br>\n| <a href="//forum.freecodecamp.com/t/clojure-lists-they-are-everything/18417">Lists</a> | <a href="//forum.freecodecamp.com/t/clojure-resources/18422">Table of Contents</a> | <a href="//forum.freecodecamp.com/t/clojure-hashmaps/18414">Hashmaps</a>|</p>',fields:{slug:"/clojure/vectors/"},frontmatter:{title:"Clojure   Vectors"}}},pathContext:{slug:"/clojure/vectors/"}}}});
//# sourceMappingURL=path---clojure-vectors-9557cc8bfe60b9e681e4.js.map