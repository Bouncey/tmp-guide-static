{"version":3,"sources":["webpack:///path---security-query-parameterization-ad5efb207988301c9562.js","webpack:///./.cache/json/security-query-parameterization.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/security-query-parameterization.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,oBAERC,yFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,gvRAA6xRC,QAAoSC,KAAA,qCAA2CC,aAAgBC,MAAA,4BAAmCC,aAAgBH,KAAA","file":"path---security-query-parameterization-ad5efb207988301c9562.js","sourcesContent":["webpackJsonp([1144346943127461000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/security-query-parameterization.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Query Parameterization</h2>\\n<p>A common mistake when connecting your program to a database is to accept a user’s input and apply it directly to the database without checking it first. This is a dangerous habit to get into, and you may hear more experienced developers warning others to “sanitize input” or “parameterize queries”.</p>\\n<p>Let’s start with a short example demonstrating the problem:</p>\\n<p><em>(the following snippets are written in C# for MySQL, but the concept applies to any language and database)</em></p>\\n<h3>The Problem</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">RetrieveEmployeeInfo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">string</span> username<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> connection <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MySqlConnection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"valid_connection_string\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> query <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"SELECT * FROM EMPLOYEES WHERE USERNAME = '\\\"</span> <span class=\\\"token operator\\\">+</span> username <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\"'\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> command <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MySqlCommand</span><span class=\\\"token punctuation\\\">(</span>query<span class=\\\"token punctuation\\\">,</span> connection<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">var</span> reader <span class=\\\"token operator\\\">=</span> command<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteReader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>reader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Read</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// do something with the results of your query, like display the employee</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>At first glance, that might seem fairly harmless. If the user types “JDOE” into your program, and it’s passed to this function, you’ll end up executing a query like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">FROM</span> EMPLOYEES <span class=\\\"token keyword\\\">WHERE</span> USERNAME <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'JDOE'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The problem becomes more apparent when you consider what happens if the user <em>doesn’t</em> type what you expect. What if they type something like <code>JDOE'; DROP TABLE EMPLOYEES; --</code>? Your “query” string now looks like this, which will select the employee info, then delete the entire EMPLOYEES table!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">FROM</span> EMPLOYEES <span class=\\\"token keyword\\\">WHERE</span> USERNAME <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'JDOE'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">DROP</span> <span class=\\\"token keyword\\\">TABLE</span> EMPLOYEES<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">--'</span>\\n</code></pre>\\n      </div>\\n<h3>The Solution</h3>\\n<p>To prevent issues like this, we can parameterize our queries. Let’s look at another example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">RetrieveEmployeeInfo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">string</span> username<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> connection <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MySqlConnection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"valid_connection_string\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> query <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"SELECT * FROM EMPLOYEES WHERE USERNAME = @username\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> command <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MySqlCommand</span><span class=\\\"token punctuation\\\">(</span>query<span class=\\\"token punctuation\\\">,</span> connection<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            command<span class=\\\"token punctuation\\\">.</span>Parameters<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddWithValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"username\\\"</span><span class=\\\"token punctuation\\\">,</span> username<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    \\n            <span class=\\\"token keyword\\\">var</span> reader <span class=\\\"token operator\\\">=</span> command<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteReader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>reader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Read</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// do something with the results of your query, like display the employee</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Now what happens if the user types in <code>JDOE'; DROP TABLE EMPLOYEES; --</code>? Our program ends up executing a query like this one and, finding no employee whose username actually matches that input, simply returns no records.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">FROM</span> EMPLOYEES <span class=\\\"token keyword\\\">WHERE</span> USERNAME <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'JDOE\\\\'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">DROP</span> <span class=\\\"token keyword\\\">TABLE</span> EMPLOYEES<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">--'</span>\\n</code></pre>\\n      </div>\\n<p>No matter which language or database you’re using, if you consider querying the database using user input, check the documentation for the proper way to parameterize queries.</p>\",\"fields\":{\"slug\":\"/security/query-parameterization/\"},\"frontmatter\":{\"title\":\"Query Parameterization\"}}},\"pathContext\":{\"slug\":\"/security/query-parameterization/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---security-query-parameterization-ad5efb207988301c9562.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Query Parameterization</h2>\\n<p>A common mistake when connecting your program to a database is to accept a user’s input and apply it directly to the database without checking it first. This is a dangerous habit to get into, and you may hear more experienced developers warning others to “sanitize input” or “parameterize queries”.</p>\\n<p>Let’s start with a short example demonstrating the problem:</p>\\n<p><em>(the following snippets are written in C# for MySQL, but the concept applies to any language and database)</em></p>\\n<h3>The Problem</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">RetrieveEmployeeInfo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">string</span> username<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> connection <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MySqlConnection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"valid_connection_string\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> query <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"SELECT * FROM EMPLOYEES WHERE USERNAME = '\\\"</span> <span class=\\\"token operator\\\">+</span> username <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\"'\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> command <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MySqlCommand</span><span class=\\\"token punctuation\\\">(</span>query<span class=\\\"token punctuation\\\">,</span> connection<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">var</span> reader <span class=\\\"token operator\\\">=</span> command<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteReader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>reader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Read</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// do something with the results of your query, like display the employee</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>At first glance, that might seem fairly harmless. If the user types “JDOE” into your program, and it’s passed to this function, you’ll end up executing a query like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">FROM</span> EMPLOYEES <span class=\\\"token keyword\\\">WHERE</span> USERNAME <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'JDOE'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The problem becomes more apparent when you consider what happens if the user <em>doesn’t</em> type what you expect. What if they type something like <code>JDOE'; DROP TABLE EMPLOYEES; --</code>? Your “query” string now looks like this, which will select the employee info, then delete the entire EMPLOYEES table!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">FROM</span> EMPLOYEES <span class=\\\"token keyword\\\">WHERE</span> USERNAME <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'JDOE'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">DROP</span> <span class=\\\"token keyword\\\">TABLE</span> EMPLOYEES<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">--'</span>\\n</code></pre>\\n      </div>\\n<h3>The Solution</h3>\\n<p>To prevent issues like this, we can parameterize our queries. Let’s look at another example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">RetrieveEmployeeInfo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">string</span> username<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> connection <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MySqlConnection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"valid_connection_string\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> query <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"SELECT * FROM EMPLOYEES WHERE USERNAME = @username\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> command <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MySqlCommand</span><span class=\\\"token punctuation\\\">(</span>query<span class=\\\"token punctuation\\\">,</span> connection<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            command<span class=\\\"token punctuation\\\">.</span>Parameters<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddWithValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"username\\\"</span><span class=\\\"token punctuation\\\">,</span> username<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    \\n            <span class=\\\"token keyword\\\">var</span> reader <span class=\\\"token operator\\\">=</span> command<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteReader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>reader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Read</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// do something with the results of your query, like display the employee</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Now what happens if the user types in <code>JDOE'; DROP TABLE EMPLOYEES; --</code>? Our program ends up executing a query like this one and, finding no employee whose username actually matches that input, simply returns no records.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">FROM</span> EMPLOYEES <span class=\\\"token keyword\\\">WHERE</span> USERNAME <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'JDOE\\\\'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">DROP</span> <span class=\\\"token keyword\\\">TABLE</span> EMPLOYEES<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">--'</span>\\n</code></pre>\\n      </div>\\n<p>No matter which language or database you’re using, if you consider querying the database using user input, check the documentation for the proper way to parameterize queries.</p>\",\"fields\":{\"slug\":\"/security/query-parameterization/\"},\"frontmatter\":{\"title\":\"Query Parameterization\"}}},\"pathContext\":{\"slug\":\"/security/query-parameterization/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/security-query-parameterization.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/security-query-parameterization.json\n// module chunks = 1144346943127461000"],"sourceRoot":""}