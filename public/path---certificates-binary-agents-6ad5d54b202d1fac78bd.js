webpackJsonp([0x6c691e10f00e5000],{"./node_modules/json-loader/index.js!./.cache/json/certificates-binary-agents.json":function(n,a){n.exports={data:{markdownRemark:{html:'<p><img src="//discourse-user-assets.s3.amazonaws.com/original/2X/7/70cf3cc5462f69c2f770ad42d0f24f240a8d8f13.jpg"></p>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/triangular_flag_on_post.png?v=3" title=":triangular_flag_on_post:" alt=":triangular_flag_on_post:" class="forum-image"> Remember to use <a><strong><code>Read-Search-Ask</code></strong></a> if you get stuck. Try to pair program <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/busts_in_silhouette.png?v=3" title=":busts_in_silhouette:" alt=":busts_in_silhouette:" class="forum-image"> and write your own code <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/pencil.png?v=3" title=":pencil:" alt=":pencil:" class="forum-image"></p>\n<h2>Problem Explanation:</h2>\n<p>This problem is very straight forward, you will get a string that will represent a sentence in binary code, and you need to translate that into words. There is not direct way to do this so you will have to translate twice.</p>\n<h3>Relevant Links</h3>\n<ul>\n<li><a href=\'http://forum.freecodecamp.com/t/javascript-string-prototype-charcodeat/15933\' target=\'_blank\' rel=\'nofollow\'>String.prototype.charCodeAt</a></li>\n<li><a>String.fromCharCode</a></li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" title=":speech_balloon:" alt=":speech_balloon:" class="forum-image"> Hint: 1</h2>\n<p>You should first convert from <strong>binary</strong> to <strong>decimal</strong> before translating those values into characters.</p>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" title=":speech_balloon:" alt=":speech_balloon:" class="forum-image"> Hint: 2</h2>\n<p>Things are easier when focusing on smaller parts, divide the input to focus on one letter at the time.</p>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" title=":speech_balloon:" alt=":speech_balloon:" class="forum-image"> Hint: 3</h2>\n<p>Make sure that each time you transcode a character from binary to decimal, you reset whatever variable you used to keep track of the ones. Also do not forget to turn everything back into one string.</p>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2>Spoiler Alert!</h2>\n<p><img src="//discourse-user-assets.s3.amazonaws.com/original/2X/2/2d6c412a50797771301e7ceabd554cef4edcd74d.gif" alt="warning sign"></p>\n<p><strong>Solution ahead!</strong></p>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/beginner.png?v=3" title=":beginner:" alt=":beginner:" class="forum-image"> Basic Code Solution:</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">binaryAgent</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      biString <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      uniString <span class="token operator">=</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">\'https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3 ":rocket:"\'</span> target<span class="token operator">=</span><span class="token string">\'_blank\'</span> rel<span class="token operator">=</span><span class="token string">\'nofollow\'</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token comment" spellcheck="true">/*using the radix (or base) parameter in parseInt, we can convert the binary\n      number to a decimal number while simultaneously converting to a char*/</span>\n\n      <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> biString<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        uniString<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>biString<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment" spellcheck="true">// we then simply join the string</span>\n      <span class="token keyword">return</span> uniString<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment" spellcheck="true">// test here</span>\n    <span class="token function">binaryAgent</span><span class="token punctuation">(</span><span class="token string">"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CLnm/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<h1>Code Explanation:</h1>\n<ul>\n<li>Separate the string into an array of strings separated by whitespace.</li>\n<li>Create some variables that will be needed along the way, the names are self explanatory for the most part.</li>\n<li>Iterate through each binary string in the new array.</li>\n<li>Convert to decimal by using parseInt(<em>binary</em>, 2) (with the second parameter we tell in which base our numbers currently are)</li>\n<li>At the end, we return out converted message.</li>\n</ul>\n<h2>Relevant Links</h2>\n<ul>\n<li><a href=\'http://forum.freecodecamp.com/t/javascript-string-prototype-split/15944\' target=\'_blank\' rel=\'nofollow\'>String.prototype.split</a></li>\n<li><a href=\'http://forum.freecodecamp.com/t/javascript-parseint/14686\' target=\'_blank\' rel=\'nofollow\'>parseInt</a></li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/sunflower.png?v=3" title=":sunflower:" alt=":sunflower:" class="forum-image"> Intermediate Code Solution:</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">binaryAgent</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment" spellcheck="true">// Separate the binary code by space.</span>\n      str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> power<span class="token punctuation">;</span>\n      <span class="token keyword">var</span> decValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> sentence <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n\n      <span class="token comment" spellcheck="true">// Check each binary number from the array.</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">// Check each bit from binary number</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> str<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">\'https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3 ":rocket:"\'</span> target<span class="token operator">=</span><span class="token string">\'_blank\'</span> rel<span class="token operator">=</span><span class="token string">\'nofollow\'</span><span class="token operator">></span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment" spellcheck="true">// This only takes into consideration the active ones.</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment" spellcheck="true">// This is quivalent to 2 ** position</span>\n            power <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">+</span>str<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            decValue <span class="token operator">+=</span> power<span class="token punctuation">;</span>\n\n            <span class="token comment" spellcheck="true">// Record the decimal value by adding the number to the previous one.</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment" spellcheck="true">// After the binary number is converted to decimal, convert it to string and store</span>\n        sentence <span class="token operator">+=</span> <span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>decValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment" spellcheck="true">// Reset decimal value for next binary number.</span>\n        decValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> sentence<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment" spellcheck="true">// test here</span>\n    <span class="token function">binaryAgent</span><span class="token punctuation">(</span><span class="token string">"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CLno/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<h1>Code Explanation</h1>\n<ul>\n<li>For each of these binary strings, check for the ones and ignore the zeroes.</li>\n<li>For those that are one or active then convert them to decimal, this takes into account the position and the right power it needs to be raised to.</li>\n<li>Store the power into the <strong>power</strong> variable by adding it to any previous ones on the variable <strong>decValue</strong>. This variable will add and add the powers of the active ones until the end of the loop and then return the decimal number.</li>\n<li>Convert the final decimal outside of the inner loop and then convert it to ASCII and saving it to <strong>sentence</strong> along with any other text string already converted and stored.</li>\n<li>Reset the variable <strong>decValue</strong> to avoid getting wrong decimals before continuing to the outer loop.</li>\n</ul>\n<h2>Relevant Links</h2>\n<ul>\n<li><a href=\'http://forum.freecodecamp.com/t/javascript-math-pow/14685\' target=\'_blank\' rel=\'nofollow\'>Math.pow</a></li>\n<li><a>String.length</a></li>\n<li><a href=\'http://example.com\' target=\'_blank\' rel=\'nofollow\'>Link Title 3</a></li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/rotating_light.png?v=3" title=":rotating_light:" alt=":rotating_light:" class="forum-image"> Advanced Code Solution:</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">binaryAgent</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token operator">...</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment" spellcheck="true">// test here</span>\n    <span class="token function">binaryAgent</span><span class="token punctuation">(</span><span class="token string">"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CLnp/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<h1>Code Explanation</h1>\n<ul>\n<li>First we use <code>split()</code> to be able to work on each character as an Array element</li>\n<li>Then use <code>map()</code> to process each element from binary to decimal using <code>pareseInt()</code></li>\n<li>Last we can use <code>String.fromCharCode()</code> to convert each ASCII number into the corresponding character</li>\n<li>However <code>fromCharCode()</code> expects a series of numbers rather than an Array! We can use ES6 Spread Operator to pass in an Array of numbers as individual numbers. See here for more info; <a href=\'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\' target=\'_blank\' rel=\'nofollow\'>Spread Operator</a></li>\n</ul>\n<h2>Relevant Links</h2>\n<ul>\n<li><a href=\'http://forum.freecodecamp.com/t/javascript-array-prototype-map/14294\' target=\'_blank\' rel=\'nofollow\'>Array.prototype.map</a></li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/clipboard.png?v=3" title=":clipboard:" alt=":clipboard:" class="forum-image"> NOTES FOR CONTRIBUTIONS:</h2>\n<ul>\n<li><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3" title=":warning:" alt=":warning:" class="forum-image"> <strong>DO NOT</strong> add solutions that are similar to any existing solutions. If you think it is <strong><em>similar but better</em></strong>, then try to merge (or replace) the existing similar solution.</li>\n<li>Add an explanation of your solution.</li>\n<li>Categorize the solution in one of the following categories — <strong>Basic</strong>, <strong>Intermediate</strong> and <strong>Advanced</strong>. <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/traffic_light.png?v=3" title=":traffic_light:" alt=":traffic_light:" class="forum-image"></li>\n<li>Please add your username only if you have added any <strong>relevant main contents</strong>. (<img src="https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3" title=":warning:" alt=":warning:" class="forum-image"> <strong><em>DO NOT</em></strong> <em>remove any existing usernames</em>)</li>\n</ul>\n<blockquote>\n<p>See <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/point_right.png?v=3" title=":point_right:" alt=":point_right:" class="forum-image"> <a href=\'http://forum.freecodecamp.com/t/algorithm-article-template/14272\' target=\'_blank\' rel=\'nofollow\'><strong><code>Wiki Challenge Solution Template</code></strong></a> for reference.</p>\n</blockquote>',fields:{slug:"/certificates/binary-agents/"},frontmatter:{title:"Binary Agents"}}},pathContext:{slug:"/certificates/binary-agents/"}}}});
//# sourceMappingURL=path---certificates-binary-agents-6ad5d54b202d1fac78bd.js.map