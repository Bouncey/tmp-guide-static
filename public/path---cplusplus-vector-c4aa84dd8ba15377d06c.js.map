{"version":3,"sources":["webpack:///path---cplusplus-vector-c4aa84dd8ba15377d06c.js","webpack:///./.cache/json/cplusplus-vector.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/cplusplus-vector.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,0EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,wheAAipfC,QAAgDC,KAAA,sBAA4BC,aAAgBC,MAAA,YAAmBC,aAAgBH,KAAA","file":"path---cplusplus-vector-c4aa84dd8ba15377d06c.js","sourcesContent":["webpackJsonp([3247613488631012400],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/cplusplus-vector.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Vectors</h2>\\n<p><code>vector</code> is one of the most used containers in C++. A container is a data structure that stores a collection of objects, some in order, some not (eg. Structures, arrays, Classes .. etc) . All containers have a different set of functions that allow you to access an object(s) in that collection.</p>\\n<p><code>std::vector</code> is part of the C++ standard library (hence the prefix <code>std::</code>) and allows you to store contiguous data of the same data type. NOTE: <strong>All objects within a vector must be of the same data type</strong></p>\\n<p>The data type you store within a vector goes within angle brackets next to the vector keyword. For example, if you would like to store a collection of strings the vector would be <code>std::vector&#x3C;std::string> vector_name</code></p>\\n<h3>Vector Construction</h3>\\n<p>There are many convinent ways to construct a vector.</p>\\n<p>Using an intializer list - where objects are listed inside a set of braces: <code>{ }</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code>std<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">></span> a<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// a is a vector of 5 ints: 1, 2, 3, 4 and 5</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span>std<span class=\\\"token operator\\\">::</span>string<span class=\\\"token operator\\\">></span> b<span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"world\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// b is a vector of 2 strings: \\\"hello\\\" and \\\"world\\\"</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">bool</span><span class=\\\"token operator\\\">></span> v<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// v is an empty vector </span>\\n</code></pre>\\n      </div>\\n<p>Constructing it from another vector (this is known as a copy construction)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code>std<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">double</span><span class=\\\"token operator\\\">></span> a<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1.0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2.0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3.0</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">double</span><span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">b</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// b is a vector of 3 doubles: 1.0, 2.0 and 3.0</span>\\n</code></pre>\\n      </div>\\n<p>Initializing it with the same element:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code>std<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">a</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// a is a vector of 100 elements all set to -1</span>\\n</code></pre>\\n      </div>\\n<h3>Element Access</h3>\\n<p>The standard library provides different functions for accessing particular elements in your vector. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code>std<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span>std<span class=\\\"token operator\\\">::</span>string<span class=\\\"token operator\\\">></span> a<span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"element\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"access\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nstd<span class=\\\"token operator\\\">::</span>string first_item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">front</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// gets the first item of the vector (\\\"test\\\")</span>\\nstd<span class=\\\"token operator\\\">::</span>string last_item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">back</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// gets the last item in the vector (\\\"access\\\")</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// To get an element at a specific index (remember: vector indices start at 0)</span>\\nstd<span class=\\\"token operator\\\">::</span>string second_item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">at</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// gets \\\"element\\\"</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// OR</span>\\nstd<span class=\\\"token operator\\\">::</span>string second_item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// gets \\\"element\\\"</span>\\n</code></pre>\\n      </div>\\n<h3>Some useful member functions</h3>\\n<p>The standard template library (STL) also provide different <em>methods</em> for you:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code>std<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">size</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns the size of the vector (the number of positions in the vector)</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">begin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns an iterator which is a pointer to the beginning of the vector</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns an iterator which is a pointer to the end of the vector</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">empty</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns true if the vector is empty, otherwise returns false.</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">front</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns the first element of the vector.</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">back</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns the last element of the vector.</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push_back</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// inserts the element \\\"n\\\" to the end of the vector.</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pop_back</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// removes the last element of the vector</span>\\n</code></pre>\\n      </div>\\n<h3>Iterating Through a Vector</h3>\\n<p>There are different ways to iterate through a vector and access its contents. The following forms are equivalent, the first one involves using a range-based expression (since C++11), the second one uses iterators, and the last one is a index-based iteration</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;iostream></span></span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;vector></span></span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// First declare the vector</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">></span> myVector<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// a is a vector of 5 ints: 1, 2, 3, 4 and 5</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Using a range based loop (since C++11)</span>\\n<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> element <span class=\\\"token operator\\\">:</span> myVector <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Reads like \\\"for every element in myVector\\\"</span>\\n  std<span class=\\\"token operator\\\">::</span>cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"The element is \\\"</span> <span class=\\\"token operator\\\">&lt;&lt;</span> element <span class=\\\"token operator\\\">&lt;&lt;</span> std<span class=\\\"token operator\\\">::</span>endl<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Using an iterator</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">::</span>iterator it<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Declare the iterator</span>\\n<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span>it <span class=\\\"token operator\\\">=</span> myVector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">begin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> it <span class=\\\"token operator\\\">!=</span> myVector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token operator\\\">++</span>it<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  std<span class=\\\"token operator\\\">::</span>cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"The element is \\\"</span> <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token operator\\\">*</span>it <span class=\\\"token operator\\\">&lt;&lt;</span> std<span class=\\\"token operator\\\">::</span>endl<span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Dereference the iterator to access its data</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Using indices</span>\\n<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span>std<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">::</span>size_type i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">!=</span> myVector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">size</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  std<span class=\\\"token operator\\\">::</span>cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"The element is \\\"</span> <span class=\\\"token operator\\\">&lt;&lt;</span> myVector<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;&lt;</span> std<span class=\\\"token operator\\\">::</span>endl<span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Dereference the iterator to access its data</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/cplusplus/vector/\"},\"frontmatter\":{\"title\":\"vector\"}}},\"pathContext\":{\"slug\":\"/cplusplus/vector/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---cplusplus-vector-c4aa84dd8ba15377d06c.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Vectors</h2>\\n<p><code>vector</code> is one of the most used containers in C++. A container is a data structure that stores a collection of objects, some in order, some not (eg. Structures, arrays, Classes .. etc) . All containers have a different set of functions that allow you to access an object(s) in that collection.</p>\\n<p><code>std::vector</code> is part of the C++ standard library (hence the prefix <code>std::</code>) and allows you to store contiguous data of the same data type. NOTE: <strong>All objects within a vector must be of the same data type</strong></p>\\n<p>The data type you store within a vector goes within angle brackets next to the vector keyword. For example, if you would like to store a collection of strings the vector would be <code>std::vector&#x3C;std::string> vector_name</code></p>\\n<h3>Vector Construction</h3>\\n<p>There are many convinent ways to construct a vector.</p>\\n<p>Using an intializer list - where objects are listed inside a set of braces: <code>{ }</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code>std<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">></span> a<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// a is a vector of 5 ints: 1, 2, 3, 4 and 5</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span>std<span class=\\\"token operator\\\">::</span>string<span class=\\\"token operator\\\">></span> b<span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"world\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// b is a vector of 2 strings: \\\"hello\\\" and \\\"world\\\"</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">bool</span><span class=\\\"token operator\\\">></span> v<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// v is an empty vector </span>\\n</code></pre>\\n      </div>\\n<p>Constructing it from another vector (this is known as a copy construction)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code>std<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">double</span><span class=\\\"token operator\\\">></span> a<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1.0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2.0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3.0</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">double</span><span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">b</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// b is a vector of 3 doubles: 1.0, 2.0 and 3.0</span>\\n</code></pre>\\n      </div>\\n<p>Initializing it with the same element:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code>std<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">a</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// a is a vector of 100 elements all set to -1</span>\\n</code></pre>\\n      </div>\\n<h3>Element Access</h3>\\n<p>The standard library provides different functions for accessing particular elements in your vector. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code>std<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span>std<span class=\\\"token operator\\\">::</span>string<span class=\\\"token operator\\\">></span> a<span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"element\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"access\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nstd<span class=\\\"token operator\\\">::</span>string first_item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">front</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// gets the first item of the vector (\\\"test\\\")</span>\\nstd<span class=\\\"token operator\\\">::</span>string last_item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">back</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// gets the last item in the vector (\\\"access\\\")</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// To get an element at a specific index (remember: vector indices start at 0)</span>\\nstd<span class=\\\"token operator\\\">::</span>string second_item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">at</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// gets \\\"element\\\"</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// OR</span>\\nstd<span class=\\\"token operator\\\">::</span>string second_item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// gets \\\"element\\\"</span>\\n</code></pre>\\n      </div>\\n<h3>Some useful member functions</h3>\\n<p>The standard template library (STL) also provide different <em>methods</em> for you:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code>std<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">size</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns the size of the vector (the number of positions in the vector)</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">begin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns an iterator which is a pointer to the beginning of the vector</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns an iterator which is a pointer to the end of the vector</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">empty</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns true if the vector is empty, otherwise returns false.</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">front</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns the first element of the vector.</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">back</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// returns the last element of the vector.</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push_back</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// inserts the element \\\"n\\\" to the end of the vector.</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pop_back</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// removes the last element of the vector</span>\\n</code></pre>\\n      </div>\\n<h3>Iterating Through a Vector</h3>\\n<p>There are different ways to iterate through a vector and access its contents. The following forms are equivalent, the first one involves using a range-based expression (since C++11), the second one uses iterators, and the last one is a index-based iteration</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;iostream></span></span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;vector></span></span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// First declare the vector</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">></span> myVector<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// a is a vector of 5 ints: 1, 2, 3, 4 and 5</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Using a range based loop (since C++11)</span>\\n<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> element <span class=\\\"token operator\\\">:</span> myVector <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Reads like \\\"for every element in myVector\\\"</span>\\n  std<span class=\\\"token operator\\\">::</span>cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"The element is \\\"</span> <span class=\\\"token operator\\\">&lt;&lt;</span> element <span class=\\\"token operator\\\">&lt;&lt;</span> std<span class=\\\"token operator\\\">::</span>endl<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Using an iterator</span>\\nstd<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">::</span>iterator it<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Declare the iterator</span>\\n<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span>it <span class=\\\"token operator\\\">=</span> myVector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">begin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> it <span class=\\\"token operator\\\">!=</span> myVector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token operator\\\">++</span>it<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  std<span class=\\\"token operator\\\">::</span>cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"The element is \\\"</span> <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token operator\\\">*</span>it <span class=\\\"token operator\\\">&lt;&lt;</span> std<span class=\\\"token operator\\\">::</span>endl<span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Dereference the iterator to access its data</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Using indices</span>\\n<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span>std<span class=\\\"token operator\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">::</span>size_type i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">!=</span> myVector<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">size</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  std<span class=\\\"token operator\\\">::</span>cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"The element is \\\"</span> <span class=\\\"token operator\\\">&lt;&lt;</span> myVector<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;&lt;</span> std<span class=\\\"token operator\\\">::</span>endl<span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Dereference the iterator to access its data</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/cplusplus/vector/\"},\"frontmatter\":{\"title\":\"vector\"}}},\"pathContext\":{\"slug\":\"/cplusplus/vector/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/cplusplus-vector.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/cplusplus-vector.json\n// module chunks = 3247613488631012400"],"sourceRoot":""}