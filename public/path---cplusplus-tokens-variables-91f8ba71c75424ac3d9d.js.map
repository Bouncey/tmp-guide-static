{"version":3,"sources":["webpack:///path---cplusplus-tokens-variables-91f8ba71c75424ac3d9d.js","webpack:///./.cache/json/cplusplus-tokens-variables.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/cplusplus-tokens-variables.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,oFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,88dAAuhcC,QAAg2CC,KAAA,gCAAsCC,aAAgBC,MAAA,mBAA0BC,aAAgBH,KAAA","file":"path---cplusplus-tokens-variables-91f8ba71c75424ac3d9d.js","sourcesContent":["webpackJsonp([10268714735393165000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/cplusplus-tokens-variables.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3>What are tokens ?</h3>\\n<p>Tokens are the smallest unit of a program which are importanat to the compiler. There are different kinds of tokens:</p>\\n<ul>\\n<li>\\n<p>Keywords</p>\\n</li>\\n<li>\\n<p>Operators</p>\\n</li>\\n<li>\\n<p>Punctuators</p>\\n</li>\\n<li>\\n<p>Literals</p>\\n</li>\\n<li>\\n<p>Identifiers</p>\\n</li>\\n<li>\\n<p><strong>Combination of tokens form an expression</strong></p>\\n</li>\\n</ul>\\n<h3>What are Variables ?</h3>\\n<ul>\\n<li>\\n<p>Textbook definition : Variables are named memory locations whoose data can be altered.</p>\\n</li>\\n<li>\\n<p>But I would like you to think of a variable to be something like a box, something like this :\\n<img src=\\\"https://i.imgur.com/YdbgWHL.png\\\" alt=\\\"Img\\\"></p>\\n</li>\\n</ul>\\n<p>So, for example :\\nI’m shifting to a new place and I need to arrange my stuff in boxes . Thus there come 2 things to my mind  <strong>What kind of stuff will be stored in the box, so that the size off the box is known (the data type)</strong> and <strong>How do I identify the box ?(Naming the variable)</strong><br>\\nHence , we know that a variable in C++ needs a <em>name</em> and a <em>data type</em> and that the value stored in them can be changed.</p>\\n<h3>Data Types in C++ :</h3>\\n<p>When declaring variables in c++ they must have a name to which you will reffer later on, a value (constant or not) and a type.\\nThe type will tell the compiler the values that the variable can use, the possible operations and will save a certain space in memmory.\\nIn c++ there are two types of data:</p>\\n<ul>\\n<li>Simple type</li>\\n<li>Struct type</li>\\n</ul>\\n<h3>Simple data types</h3>\\n<ul>\\n<li>Boolean — bool\\nWorks like a switch, can be on or off.</li>\\n<li>Character — char\\nStores a single character.</li>\\n<li>Integer  — int\\nStores an <a href=\\\"https://en.wikipedia.org/wiki/Integer\\\">integer</a>.</li>\\n<li>Floating point  — float\\nThey can use decimals.</li>\\n<li>Double floating point  — double\\nDouble precision of the float type.</li>\\n</ul>\\n<p>Here you can see some examples:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token keyword\\\">bool</span> GameRunning <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">char</span> a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>These types can also be modified with modifiers such as:</h4>\\n<p>signed\\nunsigned\\nshort\\nlong</p>\\n<h3>Struct data type</h3>\\n<h4>Identifiers.</h4>\\n<ul>\\n<li>Identifiers are the names given to a variable or a class or a function or any user defined function.</li>\\n</ul>\\n<h2>Rules for naming a variable :</h2>\\n<ul>\\n<li>Start naming with a letter from A-Z or a-z .</li>\\n<li>Numbers can follow thee first letter but we cannot start naming with numbers.</li>\\n<li>NO use of spaces or special characters are allowed, instead, use an UNDERSCORE _ .  </li>\\n</ul>\\n<h4>Declaring a variabe :</h4>\\n<p>The syntax is as follows\\n&#x3C;<em>data type</em>> &#x3C;<em>variable name</em>>;\\nor\\n&#x3C;<em>data type</em>> &#x3C;<em>variable name</em>> = &#x3C;<em>value</em>>; if we also want to initialize the variable.</p>\\n<p>For example :</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token keyword\\\">int</span> a <span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//declaring a variable named 'a' of type integer.</span>\\na<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>        <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//initializing a variable</span>\\n<span class=\\\"token keyword\\\">int</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//declaring and initializing a variable 'b' of type integer.</span>\\n</code></pre>\\n      </div>\\n<p><strong>Examples of declaring a variable:</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token keyword\\\">int</span> a9<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">char</span> A<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">double</span> area_circle<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">long</span> l<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><strong>Wrong ways to declare variables</strong>- </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token keyword\\\">int</span> 9a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">char</span> <span class=\\\"token operator\\\">-</span>a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">double</span> area of circle<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">long</span> l<span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>Variable names cannot start with a number</li>\\n<li>Special characters are not allowed</li>\\n<li>Spaces are not allowed</li>\\n</ul>\\n<p>You can imagine different boxes of different sizes and storing different things as different variables.</p>\\n<p><strong>NOTES :</strong> </p>\\n<ol>\\n<li><strong>The C++ compiler ignores whitespaces and they are generally used for beautification of the code so that it is eassy for any programmer to debug or understand the code.</strong></li>\\n<li><strong>If a variable is not initialized , it contains a garbage value. Let me give an example:</strong></li>\\n</ol>\\n<h3>Scope of Variables</h3>\\n<p>All the variables have their area of functioning, and out of that boundary they don’t hold their value, this boundary is called scope of the variable. For most of the cases its between the curly braces,in which variable is declared that a variable exists, not outside it. We will study the storage classes later, but as of now, we can broadly divide variables into two main types,</p>\\n<p>*Global Variables.</p>\\n<p>*Local variables.</p>\\n<h4>Global variables</h4>\\n<p>Global variables are those, which ar once declared and can be used throughout the lifetime of the program by any class or any function. They must be declared outside the main() function. If only declared, they can be assigned different values at different time in program lifetime. But even if they are declared and initialized at the same time outside the main() function, then also they can be assigned any value at any point in the program.</p>\\n<p>Example : Only declared, not initialized.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;iostream></span></span>\\n<span class=\\\"token keyword\\\">using</span> <span class=\\\"token keyword\\\">namespace</span> std<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> x<span class=\\\"token punctuation\\\">;</span>                <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Global variable declared</span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n x<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>                 <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Initialized once</span>\\n cout <span class=\\\"token operator\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"first value of x = \\\"</span><span class=\\\"token operator\\\">&lt;&lt;</span> x<span class=\\\"token punctuation\\\">;</span>\\n x<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">;</span>                 <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Initialized again</span>\\n cout <span class=\\\"token operator\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"Initialized again with value = \\\"</span><span class=\\\"token operator\\\">&lt;&lt;</span> x<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h4>Local Variables</h4>\\n<p>Local variables are the variables which exist only between the curly braces, in which its declared. Outside that they are unavailable and leads to compile time error.</p>\\n<p>Example :</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;iostream></span></span>\\n<span class=\\\"token keyword\\\">using</span> <span class=\\\"token keyword\\\">namespace</span> std<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token keyword\\\">int</span> i<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">)</span>        <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// if condition scope starts</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">int</span> n<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Local variable declared and initialized</span>\\n  <span class=\\\"token punctuation\\\">}</span>              <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// if condition scope ends</span>\\n cout <span class=\\\"token operator\\\">&lt;&lt;</span> n<span class=\\\"token punctuation\\\">;</span>      <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Compile time error, n not available here</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>Constant Variables</h3>\\n<p>Constant variable are the variables which cannot be changed. For example, if you needed “pi” in your code, you would not want to change it after initialization.</p>\\n<p>Example :</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;iostream></span></span>\\n<span class=\\\"token keyword\\\">using</span> <span class=\\\"token keyword\\\">namespace</span> std<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token keyword\\\">double</span> PI <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3.14159253</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//Calculating the area of a circle, using user provided radius</span>\\n<span class=\\\"token keyword\\\">double</span> radius<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//input and output explained in other guide</span>\\ncin<span class=\\\"token operator\\\">>></span>radius<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//pi*r^2</span>\\n<span class=\\\"token keyword\\\">double</span> area <span class=\\\"token operator\\\">=</span> PI<span class=\\\"token operator\\\">*</span>radius<span class=\\\"token operator\\\">*</span>radius<span class=\\\"token punctuation\\\">;</span>\\ncout<span class=\\\"token operator\\\">&lt;&lt;</span>area<span class=\\\"token operator\\\">&lt;&lt;</span>endl<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>Garbage Values in a Variable</h3>\\n<p>If a variable is not initialized , it contains a garbage value. For example:</p>\\n<p>So in terms of boxes, you can imagine this as - </p>\\n<p><img src=\\\"https://i.imgur.com/YdbgWHL.png\\\" alt=\\\"Img\\\"></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span><span class=\\\"token string\\\">&lt;iostream></span></span>\\n<span class=\\\"token keyword\\\">using</span> <span class=\\\"token keyword\\\">namespace</span> std<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">int</span> a <span class=\\\"token punctuation\\\">;</span>\\n   cout<span class=\\\"token operator\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"Garbage value in a : \\\"</span><span class=\\\"token operator\\\">&lt;&lt;</span>a<span class=\\\"token operator\\\">&lt;&lt;</span>endl<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//declaring the variable named 'a' of type integer </span>\\n   a<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//initializing variable.</span>\\n   cout<span class=\\\"token operator\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"New value in a \\\"</span><span class=\\\"token operator\\\">&lt;&lt;</span>a<span class=\\\"token operator\\\">&lt;&lt;</span>endl<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>The output is :</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Garbage value in a : 0\\nNew value in a :  5</code></pre>\\n      </div>\\n<p>As you can see, there is already a value stored in ‘a’ before we give it a value(here , it is 0 ). This should remain in the mind of every programmer so that when the variables are used they do not create a logical error and print garbage values.</p>\\n<p><a href='https://repl.it/Mg7j' target='_blank' rel='nofollow'>Try the code yourself ! :) </a></p>\\n<h4>Keywords :</h4>\\n<p>*Keywords are reserved words that convey a special meaning to the compiler. They <strong>CANNOT</strong> be used for naming in c++.*\\nExamples of Keywords :\\ninline , operator, private int, double ,void , char, template ,using , virtual , break , case , switch , friend, etc. </p>\\n<p><strong>Each of these keywords is used for a special function in C++.</strong></p>\\n<p><em>Tokens part 1 is over. See you campers at <a href=\\\"https://guide.freecodecamp.org/cplusplus/tokens-part-II\\\">Part 2</a> of Tokens :)</em></p>\\n<p> <strong>Good Luck to all of you</strong> </p>\\n<p> <strong>Happy Coding ! :)</strong></p>\\n<p> <strong>Feel free to ask any queries on FreeCodeCamp’s GitHub page or <a href=\\\"https://forum.freecodecamp.org/\\\">FreeCodeCamp’s Forum .</a></strong></p>\",\"fields\":{\"slug\":\"/cplusplus/tokens-variables/\"},\"frontmatter\":{\"title\":\"Tokens Part 1\"}}},\"pathContext\":{\"slug\":\"/cplusplus/tokens-variables/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---cplusplus-tokens-variables-91f8ba71c75424ac3d9d.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3>What are tokens ?</h3>\\n<p>Tokens are the smallest unit of a program which are importanat to the compiler. There are different kinds of tokens:</p>\\n<ul>\\n<li>\\n<p>Keywords</p>\\n</li>\\n<li>\\n<p>Operators</p>\\n</li>\\n<li>\\n<p>Punctuators</p>\\n</li>\\n<li>\\n<p>Literals</p>\\n</li>\\n<li>\\n<p>Identifiers</p>\\n</li>\\n<li>\\n<p><strong>Combination of tokens form an expression</strong></p>\\n</li>\\n</ul>\\n<h3>What are Variables ?</h3>\\n<ul>\\n<li>\\n<p>Textbook definition : Variables are named memory locations whoose data can be altered.</p>\\n</li>\\n<li>\\n<p>But I would like you to think of a variable to be something like a box, something like this :\\n<img src=\\\"https://i.imgur.com/YdbgWHL.png\\\" alt=\\\"Img\\\"></p>\\n</li>\\n</ul>\\n<p>So, for example :\\nI’m shifting to a new place and I need to arrange my stuff in boxes . Thus there come 2 things to my mind  <strong>What kind of stuff will be stored in the box, so that the size off the box is known (the data type)</strong> and <strong>How do I identify the box ?(Naming the variable)</strong><br>\\nHence , we know that a variable in C++ needs a <em>name</em> and a <em>data type</em> and that the value stored in them can be changed.</p>\\n<h3>Data Types in C++ :</h3>\\n<p>When declaring variables in c++ they must have a name to which you will reffer later on, a value (constant or not) and a type.\\nThe type will tell the compiler the values that the variable can use, the possible operations and will save a certain space in memmory.\\nIn c++ there are two types of data:</p>\\n<ul>\\n<li>Simple type</li>\\n<li>Struct type</li>\\n</ul>\\n<h3>Simple data types</h3>\\n<ul>\\n<li>Boolean — bool\\nWorks like a switch, can be on or off.</li>\\n<li>Character — char\\nStores a single character.</li>\\n<li>Integer  — int\\nStores an <a href=\\\"https://en.wikipedia.org/wiki/Integer\\\">integer</a>.</li>\\n<li>Floating point  — float\\nThey can use decimals.</li>\\n<li>Double floating point  — double\\nDouble precision of the float type.</li>\\n</ul>\\n<p>Here you can see some examples:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token keyword\\\">bool</span> GameRunning <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">char</span> a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>These types can also be modified with modifiers such as:</h4>\\n<p>signed\\nunsigned\\nshort\\nlong</p>\\n<h3>Struct data type</h3>\\n<h4>Identifiers.</h4>\\n<ul>\\n<li>Identifiers are the names given to a variable or a class or a function or any user defined function.</li>\\n</ul>\\n<h2>Rules for naming a variable :</h2>\\n<ul>\\n<li>Start naming with a letter from A-Z or a-z .</li>\\n<li>Numbers can follow thee first letter but we cannot start naming with numbers.</li>\\n<li>NO use of spaces or special characters are allowed, instead, use an UNDERSCORE _ .  </li>\\n</ul>\\n<h4>Declaring a variabe :</h4>\\n<p>The syntax is as follows\\n&#x3C;<em>data type</em>> &#x3C;<em>variable name</em>>;\\nor\\n&#x3C;<em>data type</em>> &#x3C;<em>variable name</em>> = &#x3C;<em>value</em>>; if we also want to initialize the variable.</p>\\n<p>For example :</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token keyword\\\">int</span> a <span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//declaring a variable named 'a' of type integer.</span>\\na<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>        <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//initializing a variable</span>\\n<span class=\\\"token keyword\\\">int</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//declaring and initializing a variable 'b' of type integer.</span>\\n</code></pre>\\n      </div>\\n<p><strong>Examples of declaring a variable:</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token keyword\\\">int</span> a9<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">char</span> A<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">double</span> area_circle<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">long</span> l<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><strong>Wrong ways to declare variables</strong>- </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token keyword\\\">int</span> 9a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">char</span> <span class=\\\"token operator\\\">-</span>a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">double</span> area of circle<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">long</span> l<span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>Variable names cannot start with a number</li>\\n<li>Special characters are not allowed</li>\\n<li>Spaces are not allowed</li>\\n</ul>\\n<p>You can imagine different boxes of different sizes and storing different things as different variables.</p>\\n<p><strong>NOTES :</strong> </p>\\n<ol>\\n<li><strong>The C++ compiler ignores whitespaces and they are generally used for beautification of the code so that it is eassy for any programmer to debug or understand the code.</strong></li>\\n<li><strong>If a variable is not initialized , it contains a garbage value. Let me give an example:</strong></li>\\n</ol>\\n<h3>Scope of Variables</h3>\\n<p>All the variables have their area of functioning, and out of that boundary they don’t hold their value, this boundary is called scope of the variable. For most of the cases its between the curly braces,in which variable is declared that a variable exists, not outside it. We will study the storage classes later, but as of now, we can broadly divide variables into two main types,</p>\\n<p>*Global Variables.</p>\\n<p>*Local variables.</p>\\n<h4>Global variables</h4>\\n<p>Global variables are those, which ar once declared and can be used throughout the lifetime of the program by any class or any function. They must be declared outside the main() function. If only declared, they can be assigned different values at different time in program lifetime. But even if they are declared and initialized at the same time outside the main() function, then also they can be assigned any value at any point in the program.</p>\\n<p>Example : Only declared, not initialized.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;iostream></span></span>\\n<span class=\\\"token keyword\\\">using</span> <span class=\\\"token keyword\\\">namespace</span> std<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> x<span class=\\\"token punctuation\\\">;</span>                <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Global variable declared</span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n x<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>                 <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Initialized once</span>\\n cout <span class=\\\"token operator\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"first value of x = \\\"</span><span class=\\\"token operator\\\">&lt;&lt;</span> x<span class=\\\"token punctuation\\\">;</span>\\n x<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">;</span>                 <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Initialized again</span>\\n cout <span class=\\\"token operator\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"Initialized again with value = \\\"</span><span class=\\\"token operator\\\">&lt;&lt;</span> x<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h4>Local Variables</h4>\\n<p>Local variables are the variables which exist only between the curly braces, in which its declared. Outside that they are unavailable and leads to compile time error.</p>\\n<p>Example :</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;iostream></span></span>\\n<span class=\\\"token keyword\\\">using</span> <span class=\\\"token keyword\\\">namespace</span> std<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token keyword\\\">int</span> i<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">)</span>        <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// if condition scope starts</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">int</span> n<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Local variable declared and initialized</span>\\n  <span class=\\\"token punctuation\\\">}</span>              <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// if condition scope ends</span>\\n cout <span class=\\\"token operator\\\">&lt;&lt;</span> n<span class=\\\"token punctuation\\\">;</span>      <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Compile time error, n not available here</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>Constant Variables</h3>\\n<p>Constant variable are the variables which cannot be changed. For example, if you needed “pi” in your code, you would not want to change it after initialization.</p>\\n<p>Example :</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;iostream></span></span>\\n<span class=\\\"token keyword\\\">using</span> <span class=\\\"token keyword\\\">namespace</span> std<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token keyword\\\">double</span> PI <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3.14159253</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//Calculating the area of a circle, using user provided radius</span>\\n<span class=\\\"token keyword\\\">double</span> radius<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//input and output explained in other guide</span>\\ncin<span class=\\\"token operator\\\">>></span>radius<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//pi*r^2</span>\\n<span class=\\\"token keyword\\\">double</span> area <span class=\\\"token operator\\\">=</span> PI<span class=\\\"token operator\\\">*</span>radius<span class=\\\"token operator\\\">*</span>radius<span class=\\\"token punctuation\\\">;</span>\\ncout<span class=\\\"token operator\\\">&lt;&lt;</span>area<span class=\\\"token operator\\\">&lt;&lt;</span>endl<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>Garbage Values in a Variable</h3>\\n<p>If a variable is not initialized , it contains a garbage value. For example:</p>\\n<p>So in terms of boxes, you can imagine this as - </p>\\n<p><img src=\\\"https://i.imgur.com/YdbgWHL.png\\\" alt=\\\"Img\\\"></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span><span class=\\\"token string\\\">&lt;iostream></span></span>\\n<span class=\\\"token keyword\\\">using</span> <span class=\\\"token keyword\\\">namespace</span> std<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">int</span> a <span class=\\\"token punctuation\\\">;</span>\\n   cout<span class=\\\"token operator\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"Garbage value in a : \\\"</span><span class=\\\"token operator\\\">&lt;&lt;</span>a<span class=\\\"token operator\\\">&lt;&lt;</span>endl<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//declaring the variable named 'a' of type integer </span>\\n   a<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//initializing variable.</span>\\n   cout<span class=\\\"token operator\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"New value in a \\\"</span><span class=\\\"token operator\\\">&lt;&lt;</span>a<span class=\\\"token operator\\\">&lt;&lt;</span>endl<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>The output is :</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Garbage value in a : 0\\nNew value in a :  5</code></pre>\\n      </div>\\n<p>As you can see, there is already a value stored in ‘a’ before we give it a value(here , it is 0 ). This should remain in the mind of every programmer so that when the variables are used they do not create a logical error and print garbage values.</p>\\n<p><a href='https://repl.it/Mg7j' target='_blank' rel='nofollow'>Try the code yourself ! :) </a></p>\\n<h4>Keywords :</h4>\\n<p>*Keywords are reserved words that convey a special meaning to the compiler. They <strong>CANNOT</strong> be used for naming in c++.*\\nExamples of Keywords :\\ninline , operator, private int, double ,void , char, template ,using , virtual , break , case , switch , friend, etc. </p>\\n<p><strong>Each of these keywords is used for a special function in C++.</strong></p>\\n<p><em>Tokens part 1 is over. See you campers at <a href=\\\"https://guide.freecodecamp.org/cplusplus/tokens-part-II\\\">Part 2</a> of Tokens :)</em></p>\\n<p> <strong>Good Luck to all of you</strong> </p>\\n<p> <strong>Happy Coding ! :)</strong></p>\\n<p> <strong>Feel free to ask any queries on FreeCodeCamp’s GitHub page or <a href=\\\"https://forum.freecodecamp.org/\\\">FreeCodeCamp’s Forum .</a></strong></p>\",\"fields\":{\"slug\":\"/cplusplus/tokens-variables/\"},\"frontmatter\":{\"title\":\"Tokens Part 1\"}}},\"pathContext\":{\"slug\":\"/cplusplus/tokens-variables/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/cplusplus-tokens-variables.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/cplusplus-tokens-variables.json\n// module chunks = 10268714735393165000"],"sourceRoot":""}