webpackJsonp([0xe89e70d0f1a2b000],{"./node_modules/json-loader/index.js!./.cache/json/csharp-for.json":function(e,o){e.exports={data:{markdownRemark:{html:'<h1>For Loop</h1>\n<p>The <code>for</code> loop executes a block of code until a specified condition is false. Althought <code>for</code> loop looks like a <a href=\'https://guide.freecodecamp.org/csharp/while-loop\' target=\'_blank\' rel=\'nofollow\'><code>while</code> loop</a>, developers should use them <strong>properly</strong>. Use <code>while</code> loops when the number of iterations are variable, otherwise use <code>for</code> loops. A common use of <code>for</code> loops are array iterations.</p>\n<h2>Example</h2>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>int[] array = { 1, 2, 3, 4, 5 };\nfor (int i = 0; i < array.Length; i++)\n{\n\tConsole.WriteLine("Item on index {0} is {1}", i, array[i]);\n}</code></pre>\n      </div>\n<h2>Output:</h2>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>> Item on index 0 is 1\n> Item on index 1 is 2\n> Item on index 2 is 3\n> Item on index 3 is 4\n> Item on index 4 is 5</code></pre>\n      </div>',fields:{slug:"/csharp/for/"},frontmatter:{title:"For Loop"}}},pathContext:{slug:"/csharp/for/"}}}});
//# sourceMappingURL=path---csharp-for-1ff2779e5855704c8fa5.js.map