{"version":3,"sources":["webpack:///path---php-security-session-identifier-acquirement-b540ec1a42eb4fc3ad18.js","webpack:///./.cache/json/php-security-session-identifier-acquirement.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/php-security-session-identifier-acquirement.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,oBAERC,qGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,y8MAAyzLC,QAAm1BC,KAAA,iDAAuDC,aAAgBC,MAAA,oCAA2CC,aAAgBH,KAAA","file":"path---php-security-session-identifier-acquirement-b540ec1a42eb4fc3ad18.js","sourcesContent":["webpackJsonp([6626759627135640000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/php-security-session-identifier-acquirement.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Session Identifier Acquirement</h2>\\n<p>Session Identifier Acquirement is a vulnerability caused by an attacker being able to either guess the session identifier of a user or exploit vulnerabilities in the application itself or the user’s browser to obtain a session identifier. This attack is a prerequisite to performing a session hijacking attack.</p>\\n<h3>Example</h3>\\n<p>An attacker has a few options to perform a session identifier acquirement attack.</p>\\n<ul>\\n<li>Guessing the Identifier: A short and guessable session identifier could allow an attacker to brute-force the ID of a session and get in.</li>\\n<li>Attacking the Browser: In the event you store your session identifier in the browser’s cookies - if your website is vulnerable to cross site scripting an attacker could use the vulnerability to collect session identifier cookies and access high privilege level areas (for example an admin panel).</li>\\n<li>Changing the ID to the attacker’s choice: In older versions of PHP you were able to set the ID of a session in the URL. It’s disabled by default now, if in doubt make sure <code>session.use_trans_sid</code> is false. This is not a common issue anymore, however it can still happen, better safe than sorry.</li>\\n</ul>\\n<h3>Defending against Session Identifier Acquirement attacks in PHP</h3>\\n<p>To defend against Session Identifier Acquirement attacks you need to check  the attempted session access against several factors to confirm whether it’s a legitimate access and to avoid the user from successfully hijacking the user’s session. Below is an example implementation that can help mitigate the effects of a session identifier acquirement attack. It checks the IP Address, User Agent, and if the Session Expired removing a session before it’s acquired.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token function\\\">session_start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Does IP Address match?</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$_SERVER</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'REMOTE_ADDR'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'ipaddress'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token function\\\">session_unset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">session_destroy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Does user agent match?</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$_SERVER</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'HTTP_USER_AGENT'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'useragent'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">session_unset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">session_destroy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Is the last access over an hour ago?</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">time</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'lastaccess'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3600</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">session_unset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">session_destroy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">else</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'lastaccess'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">time</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>Tips:</strong></p>\\n<ul>\\n<li>Store lots of information about the current session (User Agent String, IP Address, Last Access Time, etc)</li>\\n<li>Check every request against information stored about the session (Does it match? If not delete the session and require the user to login again )</li>\\n<li>Sessions shouldn’t last forever - they should expire at a certain point to maintain session security.</li>\\n<li>Rate limit the amount of sessions a user can try to access (did a user try to access 1000+ invalid sessions? Chances are they are guessing - prevent the IP address from trying any more sessions for a few hours).</li>\\n</ul>\\n<h4>More Information:</h4>\\n<ul>\\n<li><a href=\\\"https://secure.php.net/manual/en/session.security.php\\\">php.net session security manual</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/php/security/session-identifier-acquirement/\"},\"frontmatter\":{\"title\":\"Session Identifier Acquirement\"}}},\"pathContext\":{\"slug\":\"/php/security/session-identifier-acquirement/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---php-security-session-identifier-acquirement-b540ec1a42eb4fc3ad18.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Session Identifier Acquirement</h2>\\n<p>Session Identifier Acquirement is a vulnerability caused by an attacker being able to either guess the session identifier of a user or exploit vulnerabilities in the application itself or the user’s browser to obtain a session identifier. This attack is a prerequisite to performing a session hijacking attack.</p>\\n<h3>Example</h3>\\n<p>An attacker has a few options to perform a session identifier acquirement attack.</p>\\n<ul>\\n<li>Guessing the Identifier: A short and guessable session identifier could allow an attacker to brute-force the ID of a session and get in.</li>\\n<li>Attacking the Browser: In the event you store your session identifier in the browser’s cookies - if your website is vulnerable to cross site scripting an attacker could use the vulnerability to collect session identifier cookies and access high privilege level areas (for example an admin panel).</li>\\n<li>Changing the ID to the attacker’s choice: In older versions of PHP you were able to set the ID of a session in the URL. It’s disabled by default now, if in doubt make sure <code>session.use_trans_sid</code> is false. This is not a common issue anymore, however it can still happen, better safe than sorry.</li>\\n</ul>\\n<h3>Defending against Session Identifier Acquirement attacks in PHP</h3>\\n<p>To defend against Session Identifier Acquirement attacks you need to check  the attempted session access against several factors to confirm whether it’s a legitimate access and to avoid the user from successfully hijacking the user’s session. Below is an example implementation that can help mitigate the effects of a session identifier acquirement attack. It checks the IP Address, User Agent, and if the Session Expired removing a session before it’s acquired.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token function\\\">session_start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Does IP Address match?</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$_SERVER</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'REMOTE_ADDR'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'ipaddress'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token function\\\">session_unset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">session_destroy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Does user agent match?</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$_SERVER</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'HTTP_USER_AGENT'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'useragent'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">session_unset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">session_destroy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Is the last access over an hour ago?</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">time</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'lastaccess'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3600</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">session_unset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">session_destroy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">else</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'lastaccess'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">time</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>Tips:</strong></p>\\n<ul>\\n<li>Store lots of information about the current session (User Agent String, IP Address, Last Access Time, etc)</li>\\n<li>Check every request against information stored about the session (Does it match? If not delete the session and require the user to login again )</li>\\n<li>Sessions shouldn’t last forever - they should expire at a certain point to maintain session security.</li>\\n<li>Rate limit the amount of sessions a user can try to access (did a user try to access 1000+ invalid sessions? Chances are they are guessing - prevent the IP address from trying any more sessions for a few hours).</li>\\n</ul>\\n<h4>More Information:</h4>\\n<ul>\\n<li><a href=\\\"https://secure.php.net/manual/en/session.security.php\\\">php.net session security manual</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/php/security/session-identifier-acquirement/\"},\"frontmatter\":{\"title\":\"Session Identifier Acquirement\"}}},\"pathContext\":{\"slug\":\"/php/security/session-identifier-acquirement/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/php-security-session-identifier-acquirement.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/php-security-session-identifier-acquirement.json\n// module chunks = 6626759627135640000"],"sourceRoot":""}