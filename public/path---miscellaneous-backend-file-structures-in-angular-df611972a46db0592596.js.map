{"version":3,"sources":["webpack:///path---miscellaneous-backend-file-structures-in-angular-df611972a46db0592596.js","webpack:///./.cache/json/miscellaneous-backend-file-structures-in-angular.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/miscellaneous-backend-file-structures-in-angular.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,0GACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,kzCAAAC,QAAm0CC,KAAA,sDAA4DC,aAAgBC,MAAA,wCAA+CC,aAAgBH,KAAA","file":"path---miscellaneous-backend-file-structures-in-angular-df611972a46db0592596.js","sourcesContent":["webpackJsonp([2894225629210063400],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/miscellaneous-backend-file-structures-in-angular.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Your app’s backend api that interacts with your database is located in <strong>/server/api</strong><br>\\nLet’s take a look at <strong>/server/api/thing</strong>:</p>\\n<ol>\\n<li><strong>index.js</strong>: this file routes the $http API requests made from your app’s front-end to the appropriate function in <strong>thing.controller.js</strong></li>\\n<li><strong>thing.controller.js</strong>: Here is where we actually deal with the database! Take a minute to look through here and figure out what’s going on. These functions will: return all items in a collection, return a single item from a collection when passed its id, post an item to a collection, update an item in the collection (this doesn’t really work as intended out of the box, we’re going to fix that in a minute), and of course, delete an item from the collection.</li>\\n<li><strong>thing.model.js</strong>: Here, the actual structure of a <em>thing</em> object is defined. You can add or remove any fields you want from the <em>thing</em> model, and as long as they’re syntactically correct they won’t break anything, even if there are <em>things</em> with different schemas in your database already. But! You don’t just have to edit the <em>thing</em> model to make a new type of collection, because generator-angular-fullstack can do it for you!</li>\\n</ol>\",\"fields\":{\"slug\":\"/miscellaneous/backend-file-structures-in-angular/\"},\"frontmatter\":{\"title\":\"Backend File Structures in Angular\"}}},\"pathContext\":{\"slug\":\"/miscellaneous/backend-file-structures-in-angular/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---miscellaneous-backend-file-structures-in-angular-df611972a46db0592596.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Your app’s backend api that interacts with your database is located in <strong>/server/api</strong><br>\\nLet’s take a look at <strong>/server/api/thing</strong>:</p>\\n<ol>\\n<li><strong>index.js</strong>: this file routes the $http API requests made from your app’s front-end to the appropriate function in <strong>thing.controller.js</strong></li>\\n<li><strong>thing.controller.js</strong>: Here is where we actually deal with the database! Take a minute to look through here and figure out what’s going on. These functions will: return all items in a collection, return a single item from a collection when passed its id, post an item to a collection, update an item in the collection (this doesn’t really work as intended out of the box, we’re going to fix that in a minute), and of course, delete an item from the collection.</li>\\n<li><strong>thing.model.js</strong>: Here, the actual structure of a <em>thing</em> object is defined. You can add or remove any fields you want from the <em>thing</em> model, and as long as they’re syntactically correct they won’t break anything, even if there are <em>things</em> with different schemas in your database already. But! You don’t just have to edit the <em>thing</em> model to make a new type of collection, because generator-angular-fullstack can do it for you!</li>\\n</ol>\",\"fields\":{\"slug\":\"/miscellaneous/backend-file-structures-in-angular/\"},\"frontmatter\":{\"title\":\"Backend File Structures in Angular\"}}},\"pathContext\":{\"slug\":\"/miscellaneous/backend-file-structures-in-angular/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/miscellaneous-backend-file-structures-in-angular.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/miscellaneous-backend-file-structures-in-angular.json\n// module chunks = 2894225629210063400"],"sourceRoot":""}