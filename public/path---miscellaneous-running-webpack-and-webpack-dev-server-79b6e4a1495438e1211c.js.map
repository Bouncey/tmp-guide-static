{"version":3,"sources":["webpack:///path---miscellaneous-running-webpack-and-webpack-dev-server-79b6e4a1495438e1211c.js","webpack:///./.cache/json/miscellaneous-running-webpack-and-webpack-dev-server.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/miscellaneous-running-webpack-and-webpack-dev-server.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,8GACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,gyKAAohGC,QAA6zEC,KAAA,0DAAgEC,aAAgBC,MAAA,4CAAmDC,aAAgBH,KAAA","file":"path---miscellaneous-running-webpack-and-webpack-dev-server-79b6e4a1495438e1211c.js","sourcesContent":["webpackJsonp([10483284330089593000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/miscellaneous-running-webpack-and-webpack-dev-server.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>The time has come to use Webpack. Because Webpack is installed globally, we can run the following in our terminal:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>webpack</code></pre>\\n      </div>\\n<p>This will run our <code>webpack.config.js</code> file. It should run successfully, and we should see something like this appear in our terminal:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Hash: 2474b15611d8d75c5a39\\nVersion: webpack 1.12.14\\nTime: 1721ms\\n    Asset    Size  Chunks             Chunk Names\\nbundle.js  679 kB       0  <a href='https://webpack.github.io/docs/webpack-dev-server.html' target='_blank' rel='nofollow'>emitted]  main\\n    + 159 hidden modules</code></pre>\\n      </div>\\n<p>Notice that it refers to an <code>Asset</code> called <code>bundle.js</code>. Webpack is telling us that this file has been created when we ran the <code>webpack</code> command. Check out your <code>dist</code> folder, and you should see your <code>bundle.js</code> alongside your <code>index.html</code>.</p>\\n<p>Our tree will now look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>.\\n├── dist\\n|   ├── bundle.js\\n│   └── index.html\\n├── node_modules\\n├── package.json\\n├── src\\n│   └── js\\n│       └── client.js\\n└── webpack.config.js</code></pre>\\n      </div>\\n<p>So now that we have a <code>dist/bundle.js</code>, our <code>dist/index.html</code> file is now referring to a file that exists! If we take a look at <code>bundle.js</code>, we’ll see that it’s a bundle of all the JavaScript files in our project. Cool!</p>\\n<p>Go ahead and search for some contents of our <code>dist/bundle.js</code>, like <code>This is one cool app!</code>. We can see its context in the file, it’s within a weird looking method:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>_createClass(Main, [{\\n  key: 'render',\\n  value: function render() {\\n    return _react2.default.createElement(\\n      'div',\\n      null,\\n      _react2.default.createElement(\\n        'h1',\\n        null,\\n        'This is one cool app!'\\n      )\\n    );\\n  }\\n}]);</code></pre>\\n      </div>\\n<p>This is what Babel has done; it has converted the code to ES5 and bundled it among other JavaScript files - including all our Node Modules, of course. Now all our React files can refer to this bundle using ES6 <code>import</code> statements.</p>\\n<p>Finally, it’s time to check out the app in a browser. For this, we are going to use Webpack Dev Server, which is a feature-rich tool to use for setting up a <code>localhost</code> server for developing purposes when using Webpack.</p>\\n<ul>\\n<li>[Help: More about Webpack Dev Server</a></li>\\n</ul>\\n<p>Go ahead and run:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>webpack-dev-server --content-base dist</code></pre>\\n      </div>\\n<p>We need to include <code>--content-base dist</code> to specify a content base to Webpack Dev Server, so that it knows where to get files to serve; in this case, it’s the <code>dist</code> folder, because that is the folder that we are using for <strong>production</strong> as opposed to the <code>src</code> folder, which we are using for *development**.</p>\\n<p>In our terminal, we should see something like the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>http://localhost:8080/webpack-dev-server/\\nwebpack result is served from /\\ncontent is served from /Code/react-webpack-example/dist\\nHash: 2474b15611d8d75c5a39\\nVersion: webpack 1.12.14\\nTime: 3738ms</code></pre>\\n      </div>\\n<p>Following that will be a very long list of all the files bundled into <code>dist/bundle.js</code> by Webpack. Amazing!</p>\\n<p>Now is the time to head to the URL provided by that <code>webpack-dev-server</code> command, <code>http://localhost:8080/</code>. We should see a page with an <code>h1</code> that reads:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>This is one cool app!</code></pre>\\n      </div>\\n<p>Let’s Check out your Elements pane of our Developer Tools. We should have the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code><!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n  <meta charset=\\\"UTF-8\\\">\\n  <title>React Webpack Example</title>\\n  <style type=\\\"text/css\\\"></style>\\n</head>\\n<body>\\n  <!-- React app will be injected into the following `div` element: -->\\n  <div id=\\\"app\\\">\\n    <div data-reactid=\\\".0\\\">\\n      <h1 data-reactid=\\\".0.0\\\">This is one cool app!</h1>\\n    </div>\\n  </div>\\n  <!-- Include bundled JavaScript: -->\\n  <script src=\\\"bundle.js\\\"></script>\\n</body>\\n</html></code></pre>\\n      </div>\\n<p>If we this to what we wrote in <code>src/js/client.js</code>, we will see how React renders into the <code>dist/index.html</code>.</p>\\n<p>If you got this far, well done! Now you know how to set up a workspace using React, Webpack and ES6 code, which is awesome, and gives you the starting point for making impressive web apps using cutting edge technologies.</p>\\n<p>In the next tutorial we will cover some more advanced steps, including:</p>\\n<ul>\\n<li>Going into more detail with React</li>\\n<li>Looking at some other cool features of Webpack, like compiling Sass files</li>\\n<li>Using minification on our <code>dist/bundle.js</code></li>\\n</ul>\",\"fields\":{\"slug\":\"/miscellaneous/running-webpack-and-webpack-dev-server/\"},\"frontmatter\":{\"title\":\"Running Webpack and Webpack Dev Server\"}}},\"pathContext\":{\"slug\":\"/miscellaneous/running-webpack-and-webpack-dev-server/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---miscellaneous-running-webpack-and-webpack-dev-server-79b6e4a1495438e1211c.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>The time has come to use Webpack. Because Webpack is installed globally, we can run the following in our terminal:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>webpack</code></pre>\\n      </div>\\n<p>This will run our <code>webpack.config.js</code> file. It should run successfully, and we should see something like this appear in our terminal:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Hash: 2474b15611d8d75c5a39\\nVersion: webpack 1.12.14\\nTime: 1721ms\\n    Asset    Size  Chunks             Chunk Names\\nbundle.js  679 kB       0  <a href='https://webpack.github.io/docs/webpack-dev-server.html' target='_blank' rel='nofollow'>emitted]  main\\n    + 159 hidden modules</code></pre>\\n      </div>\\n<p>Notice that it refers to an <code>Asset</code> called <code>bundle.js</code>. Webpack is telling us that this file has been created when we ran the <code>webpack</code> command. Check out your <code>dist</code> folder, and you should see your <code>bundle.js</code> alongside your <code>index.html</code>.</p>\\n<p>Our tree will now look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>.\\n├── dist\\n|   ├── bundle.js\\n│   └── index.html\\n├── node_modules\\n├── package.json\\n├── src\\n│   └── js\\n│       └── client.js\\n└── webpack.config.js</code></pre>\\n      </div>\\n<p>So now that we have a <code>dist/bundle.js</code>, our <code>dist/index.html</code> file is now referring to a file that exists! If we take a look at <code>bundle.js</code>, we’ll see that it’s a bundle of all the JavaScript files in our project. Cool!</p>\\n<p>Go ahead and search for some contents of our <code>dist/bundle.js</code>, like <code>This is one cool app!</code>. We can see its context in the file, it’s within a weird looking method:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>_createClass(Main, [{\\n  key: 'render',\\n  value: function render() {\\n    return _react2.default.createElement(\\n      'div',\\n      null,\\n      _react2.default.createElement(\\n        'h1',\\n        null,\\n        'This is one cool app!'\\n      )\\n    );\\n  }\\n}]);</code></pre>\\n      </div>\\n<p>This is what Babel has done; it has converted the code to ES5 and bundled it among other JavaScript files - including all our Node Modules, of course. Now all our React files can refer to this bundle using ES6 <code>import</code> statements.</p>\\n<p>Finally, it’s time to check out the app in a browser. For this, we are going to use Webpack Dev Server, which is a feature-rich tool to use for setting up a <code>localhost</code> server for developing purposes when using Webpack.</p>\\n<ul>\\n<li>[Help: More about Webpack Dev Server</a></li>\\n</ul>\\n<p>Go ahead and run:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>webpack-dev-server --content-base dist</code></pre>\\n      </div>\\n<p>We need to include <code>--content-base dist</code> to specify a content base to Webpack Dev Server, so that it knows where to get files to serve; in this case, it’s the <code>dist</code> folder, because that is the folder that we are using for <strong>production</strong> as opposed to the <code>src</code> folder, which we are using for *development**.</p>\\n<p>In our terminal, we should see something like the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>http://localhost:8080/webpack-dev-server/\\nwebpack result is served from /\\ncontent is served from /Code/react-webpack-example/dist\\nHash: 2474b15611d8d75c5a39\\nVersion: webpack 1.12.14\\nTime: 3738ms</code></pre>\\n      </div>\\n<p>Following that will be a very long list of all the files bundled into <code>dist/bundle.js</code> by Webpack. Amazing!</p>\\n<p>Now is the time to head to the URL provided by that <code>webpack-dev-server</code> command, <code>http://localhost:8080/</code>. We should see a page with an <code>h1</code> that reads:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>This is one cool app!</code></pre>\\n      </div>\\n<p>Let’s Check out your Elements pane of our Developer Tools. We should have the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code><!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n  <meta charset=\\\"UTF-8\\\">\\n  <title>React Webpack Example</title>\\n  <style type=\\\"text/css\\\"></style>\\n</head>\\n<body>\\n  <!-- React app will be injected into the following `div` element: -->\\n  <div id=\\\"app\\\">\\n    <div data-reactid=\\\".0\\\">\\n      <h1 data-reactid=\\\".0.0\\\">This is one cool app!</h1>\\n    </div>\\n  </div>\\n  <!-- Include bundled JavaScript: -->\\n  <script src=\\\"bundle.js\\\"></script>\\n</body>\\n</html></code></pre>\\n      </div>\\n<p>If we this to what we wrote in <code>src/js/client.js</code>, we will see how React renders into the <code>dist/index.html</code>.</p>\\n<p>If you got this far, well done! Now you know how to set up a workspace using React, Webpack and ES6 code, which is awesome, and gives you the starting point for making impressive web apps using cutting edge technologies.</p>\\n<p>In the next tutorial we will cover some more advanced steps, including:</p>\\n<ul>\\n<li>Going into more detail with React</li>\\n<li>Looking at some other cool features of Webpack, like compiling Sass files</li>\\n<li>Using minification on our <code>dist/bundle.js</code></li>\\n</ul>\",\"fields\":{\"slug\":\"/miscellaneous/running-webpack-and-webpack-dev-server/\"},\"frontmatter\":{\"title\":\"Running Webpack and Webpack Dev Server\"}}},\"pathContext\":{\"slug\":\"/miscellaneous/running-webpack-and-webpack-dev-server/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/miscellaneous-running-webpack-and-webpack-dev-server.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/miscellaneous-running-webpack-and-webpack-dev-server.json\n// module chunks = 10483284330089593000"],"sourceRoot":""}