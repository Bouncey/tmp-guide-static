webpackJsonp([0x1eafd38255b5af0],{"./node_modules/json-loader/index.js!./.cache/json/php-classes-and-objects.json":function(s,n){s.exports={data:{markdownRemark:{html:'<h1>Classes and Objects</h1>\n<p>Classes are the way that we represent types of objects in the world. Objects would be the actual <em>instances</em> of that class in the world. A class defines <em>properties</em> and <em>behavior</em> of an object of that class. The class defines how the object can interact with the rest of the world. Classes also allow us to abstract away details that we donâ€™t want to show other people! </p>\n<p>Say for example you have a dog named Spot. Spot is one instance of a Dog (class) object. </p>\n<p>PHP code to define a class: </p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token comment" spellcheck="true">// Dog class</span>\n<span class="token keyword">class</span> <span class="token class-name">dog</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// Keep name and age private - we don\'t want to be able to change these!</span>\n    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">private</span> <span class="token variable">$age</span><span class="token punctuation">;</span>\n    \n    <span class="token comment" spellcheck="true">// Constructor allows us to make an object of this class with given parameters.</span>\n    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \t<span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>\n    \t<span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>\n    \t<span class="token keyword">echo</span> <span class="token string">\'Dog named: \'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">.</span><span class="token string">\' is \'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span><span class="token punctuation">.</span><span class="token string">\' years old.\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment" spellcheck="true">// Destructor gets called when the item is deleted.</span>\n    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \t<span class="token keyword">echo</span> <span class="token string">\'Dog \'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">.</span><span class="token string">\' has ran off into the sunset\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token variable">$mydog</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dog</span><span class="token punctuation">(</span><span class="token string">"Spot"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token variable">$mydog</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token variable">$mydog</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>The code above would echo:\nDog named: Spot is 8 years old.\nSpot\n8\nDog Spot has ran off into the sunset</p>\n<p>I created an object $mydog of class dog. Its constructor was called, I used some methods inside of the class, then the destructor was called. </p>',fields:{slug:"/php/classes-and-objects/"},frontmatter:{title:"Classes and Objects"}}},pathContext:{slug:"/php/classes-and-objects/"}}}});
//# sourceMappingURL=path---php-classes-and-objects-f40f7162dc0498088810.js.map