{"version":3,"sources":["webpack:///path---python-variable-names-and-binding-d8d30cc9e71de6360cdd.js","webpack:///./.cache/json/python-variable-names-and-binding.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/python-variable-names-and-binding.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,2FACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,s1DAAAC,QAAu2DC,KAAA,uCAA6CC,aAAgBC,MAAA,wCAA+CC,aAAgBH,KAAA","file":"path---python-variable-names-and-binding-d8d30cc9e71de6360cdd.js","sourcesContent":["webpackJsonp([13476372264986587000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/python-variable-names-and-binding.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Having <em>objects</em> isn’t useful unless there is a way to use them. In order to use an <em>object</em>, there must be a way to reference them. In Python this is done by <strong>binding</strong> objects to <strong>names</strong>. A detailed overview of can be found <a href='https://docs.python.org/3/reference/executionmodel.html' target='_blank' rel='nofollow'>here</a></p>\\n<p>One way this is done is by using an <a href='https://docs.python.org/3/reference/simple_stmts.html#assignment-statements' target='_blank' rel='nofollow'><em>assignment statement</em></a>. This is commonly called <em>assigning a variable</em> in the context of Python. If speaking about programming in the context of other languages, <strong>binding</strong> an <em>object</em> to a <strong>name</strong> may be more precise.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>>> some_number = 1\\n>>> print(some_number)\\n1</code></pre>\\n      </div>\\n<p>In the example above, the target of the assignment statement is a name (identifier), <code>some_number</code>. The <em>object</em> being assigned is the number 1. The statement <strong>binds</strong> the <em>object</em> to the <strong>name</strong>. The second statement, we use this binding <code>print</code> the <em>object</em> that <code>some_number</code> refers to.</p>\\n<p>The identifier is not preceeded by a <em>type</em>. That is because Python is dynamically-typed language. The identifier is bound to an <em>object</em> that does have a <em>type</em>, however, the identifier itself can be rebound to another <em>object</em> of a different <em>type</em>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>>> some_variable = 1\\n>>> print(some_variable)\\n1\\n>>> some_variable = \\\"Hello campers!\\\"\\n>>> print(some_variable)\\nHello campers!</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/python/variable-names-and-binding/\"},\"frontmatter\":{\"title\":\"Python Variables Names and Binding\"}}},\"pathContext\":{\"slug\":\"/python/variable-names-and-binding/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---python-variable-names-and-binding-d8d30cc9e71de6360cdd.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Having <em>objects</em> isn’t useful unless there is a way to use them. In order to use an <em>object</em>, there must be a way to reference them. In Python this is done by <strong>binding</strong> objects to <strong>names</strong>. A detailed overview of can be found <a href='https://docs.python.org/3/reference/executionmodel.html' target='_blank' rel='nofollow'>here</a></p>\\n<p>One way this is done is by using an <a href='https://docs.python.org/3/reference/simple_stmts.html#assignment-statements' target='_blank' rel='nofollow'><em>assignment statement</em></a>. This is commonly called <em>assigning a variable</em> in the context of Python. If speaking about programming in the context of other languages, <strong>binding</strong> an <em>object</em> to a <strong>name</strong> may be more precise.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>>> some_number = 1\\n>>> print(some_number)\\n1</code></pre>\\n      </div>\\n<p>In the example above, the target of the assignment statement is a name (identifier), <code>some_number</code>. The <em>object</em> being assigned is the number 1. The statement <strong>binds</strong> the <em>object</em> to the <strong>name</strong>. The second statement, we use this binding <code>print</code> the <em>object</em> that <code>some_number</code> refers to.</p>\\n<p>The identifier is not preceeded by a <em>type</em>. That is because Python is dynamically-typed language. The identifier is bound to an <em>object</em> that does have a <em>type</em>, however, the identifier itself can be rebound to another <em>object</em> of a different <em>type</em>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>>> some_variable = 1\\n>>> print(some_variable)\\n1\\n>>> some_variable = \\\"Hello campers!\\\"\\n>>> print(some_variable)\\nHello campers!</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/python/variable-names-and-binding/\"},\"frontmatter\":{\"title\":\"Python Variables Names and Binding\"}}},\"pathContext\":{\"slug\":\"/python/variable-names-and-binding/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/python-variable-names-and-binding.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/python-variable-names-and-binding.json\n// module chunks = 13476372264986587000"],"sourceRoot":""}