webpackJsonp([0xc2a8da23f0e85000],{"./node_modules/json-loader/index.js!./.cache/json/software-engineering-design-patterns.json":function(e,t){e.exports={data:{markdownRemark:{html:"<h2>Design Patterns</h2>\n<p>Programmers and software architects use design patterns to solve <strong>common, recurring problems</strong> in software architecture. The patterns provide a language-agnostic approach to <strong>object-oriented programming</strong> that helps developers follow principles of good application design.</p>\n<h3>Why Design Patterns?</h3>\n<p>Developing by design patterns offer several advantages:</p>\n<ul>\n<li>It’s easier to follow good programming principles such as the <strong><a href='https://www.youtube.com/watch?v=XzdhzyAukMM' target='_blank' rel='nofollow'>SOLID</a> <a href='https://medium.com/@cramirez92/s-o-l-i-d-the-first-5-priciples-of-object-oriented-design-with-javascript-790f6ac9b9fa' target='_blank' rel='nofollow'>principles</a>.</strong></li>\n<li>It keeps code chunks smaller so code is easier to <strong>test</strong> and <strong>debug</strong></li>\n<li>It helps keep code loosely coupled so code is easier to <strong>re-use</strong> and <strong>update</strong> for new applications</li>\n<li>It makes code easier to <strong>understand</strong>, so new contributors can <strong>ramp up quickly</strong></li>\n</ul>\n<p>Using design patterns incurs some trade-offs, and developers new to the practice should remember the following:</p>\n<ul>\n<li>There are <strong>no silver bullets</strong> in programming, and design patterns are not an exception</li>\n<li>Design patterns add a <strong>layer of abstraction</strong> to code which increases initial design and development effort</li>\n<li>Over-use of design patterns or forcing them to fit makes code <strong>harder</strong> to understand</li>\n</ul>\n<h3>Language Support</h3>\n<p>Design patterns originated from the world of statically-typed languages like C++, Java, and C#. Most resources about development by design pattern are based in one of these languages. </p>\n<p>Nonetheless, design patterns are just that: patterns. They are <strong>not implementations</strong>, like classes or interfaces, and are <strong>not constrained to any one language</strong>. </p>\n<p>When learning design patterns within a dynamic language, if particular patterns seem needlessly complex or counter-intuitive, recall their origins. Developers in dynamic languages can still use and benefit from following design patterns, although more research may be required to fully understand them. </p>\n<h3>Uses</h3>\n<p>Design patterns are excellent at solving foundational coding problems in a simple and repeatable fashion. Broadly, they fall into three categories: </p>\n<ul>\n<li><strong>Creational</strong> patterns describe how to create new objects</li>\n<li><strong>Structural</strong> patterns describe how to compose objects out of other objects</li>\n<li><strong>Behavioral</strong> patterns describe how objects communicate with each other</li>\n</ul>\n<p>These tasks can all be performed without design patterns, but design patterns <strong>reduce the risk</strong> that you will violate good practices and create code that is hard to maintain.</p>\n<h4>More Information:</h4>\n<!-- Please add any articles you think might be helpful to read before writing the article -->\n<ul>\n<li>Kamran Ahmed’s <a href='https://github.com/kamranahmedse/design-patterns-for-humans' target='_blank' rel='nofollow'>Design Patterns for Humans</a> is an excellent introduction to the specific patterns</li>\n<li><a href='https://en.wikipedia.org/wiki/Design_Patterns' target='_blank' rel='nofollow'>Design Patterns</a> is the book that started this practice</li>\n<li>Martin Fowler’s <a href='https://martinfowler.com/eaaCatalog/' target='_blank' rel='nofollow'>Patterns of Enterprise Application Architecture</a> provide a suite of more sophisticated patterns for enterprise applications</li>\n<li>Sourcemaking provides an <a href='https://sourcemaking.com/design_patterns' target='_blank' rel='nofollow'>online resource</a> with additional examples and information about design patterns</li>\n</ul>",fields:{slug:"/software-engineering/design-patterns/"},frontmatter:{title:"Design Patterns"}}},pathContext:{slug:"/software-engineering/design-patterns/"}}}});
//# sourceMappingURL=path---software-engineering-design-patterns-e6047dac17c701829ee8.js.map