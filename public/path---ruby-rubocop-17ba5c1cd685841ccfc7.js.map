{"version":3,"sources":["webpack:///path---ruby-rubocop-17ba5c1cd685841ccfc7.js","webpack:///./.cache/json/ruby-rubocop.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/ruby-rubocop.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,oBAERC,sEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,65GAA6+EC,QAA69BC,KAAA,kBAAwBC,aAAgBC,MAAA,aAAoBC,aAAgBH,KAAA","file":"path---ruby-rubocop-17ba5c1cd685841ccfc7.js","sourcesContent":["webpackJsonp([10360090530333400000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/ruby-rubocop.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><a href=\\\"https://github.com/bbatsov/rubocop\\\">Rubocop</a> is a static analyis tool for\\n<a href=\\\"https://www.ruby-lang.org/en/\\\">Ruby</a>. What does this mean? It means Rubocop\\nwill to ‘read’ your code (as opposed to running it, hence the ‘static’ part\\nof the name), and analyse it. The analysis rules Rubocop uses are from the\\n<a href=\\\"https://github.com/bbatsov/ruby-style-guide\\\">Ruby community style guide</a>.</p>\\n<p>The style guide is a set of specific suggestions about how to write code which\\nis more readable, more expressive, and more conventional. As a community, it\\nwould be terrific if we could read anyone else’s code easily, and they could\\nread ours easily. This is what Rubocop helps us to do. This sort of tool is\\nalways valuable, but it’s particularly useful when you’re learning Ruby, and\\nyou may code which is <em>correct</em>, but which doesn’t stick to Ruby conventions,\\nor doesn’t take advantage of some of Ruby’s more powerful features.</p>\\n<p>Most usefully, Rubocop can automatically fix many of the minor warnings - like\\nincorrect spacing. This is very helpful before code review as it means your\\nfellow developers can focus on higher level concerns, and not have to waste\\ntime on syntax issues.</p>\\n<h2>Using Rubocop</h2>\\n<h3>Installation</h3>\\n<p>Rubocop is delivered as a Gem, so on a typical project which uses Bundler you\\nwould add it to the development section of your <code>Gemfile</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>group :development do\\n  gem rubocop\\nend</code></pre>\\n      </div>\\n<p>This means anyone using your project will have the same version of Rubocop, and\\neveryone will agree on what the current best practice is.</p>\\n<h3>Usage</h3>\\n<p>Before every commit, I like to check that my newly modified code complies with\\nthe commmunity standard, simply by running:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>rubocop</code></pre>\\n      </div>\\n<p>This will output a list of warnings about your code.</p>\\n<p>It can be helpful to ask Rubocop for more help:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>rubocop --extra-details --display-cop-names</code></pre>\\n      </div>\\n<p>(You might add these to a <code>.rubocop</code> file to make them default.)</p>\\n<p>Many editors will allow you to integrate Rubocop, which can give immediate\\nfeedback when you’re writing code.</p>\\n<h3>Fixing issues</h3>\\n<p>Let’s say I’ve written some new code; before I commit it, I might decide to\\ncheck it sticks to the guidelines:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code>rubocop <my new file></code></pre>\\n      </div>\\n<p>I can edit make the suggested changes manually, or I can ask Rubocop to fix\\nminor issues automatically:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>rubocop --auto-correct</code></pre>\\n      </div>\\n<h3>Running only certain Cops</h3>\\n<p>Each community guideline is implemented in a Rubocop ‘cop’. When working on a\\nlegacy codebase you might be swamped with warnings when introducing Rubocop.\\nIn this case it can often be useful to run only a single cop across the\\ncodebase, and check those changes in before moving on to the next guideline, for\\nexample:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>rubocop --auto-correct --only 'Layout/EmptyLineAfterMagicComment'</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/ruby/rubocop/\"},\"frontmatter\":{\"title\":\"Rubocop\"}}},\"pathContext\":{\"slug\":\"/ruby/rubocop/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---ruby-rubocop-17ba5c1cd685841ccfc7.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><a href=\\\"https://github.com/bbatsov/rubocop\\\">Rubocop</a> is a static analyis tool for\\n<a href=\\\"https://www.ruby-lang.org/en/\\\">Ruby</a>. What does this mean? It means Rubocop\\nwill to ‘read’ your code (as opposed to running it, hence the ‘static’ part\\nof the name), and analyse it. The analysis rules Rubocop uses are from the\\n<a href=\\\"https://github.com/bbatsov/ruby-style-guide\\\">Ruby community style guide</a>.</p>\\n<p>The style guide is a set of specific suggestions about how to write code which\\nis more readable, more expressive, and more conventional. As a community, it\\nwould be terrific if we could read anyone else’s code easily, and they could\\nread ours easily. This is what Rubocop helps us to do. This sort of tool is\\nalways valuable, but it’s particularly useful when you’re learning Ruby, and\\nyou may code which is <em>correct</em>, but which doesn’t stick to Ruby conventions,\\nor doesn’t take advantage of some of Ruby’s more powerful features.</p>\\n<p>Most usefully, Rubocop can automatically fix many of the minor warnings - like\\nincorrect spacing. This is very helpful before code review as it means your\\nfellow developers can focus on higher level concerns, and not have to waste\\ntime on syntax issues.</p>\\n<h2>Using Rubocop</h2>\\n<h3>Installation</h3>\\n<p>Rubocop is delivered as a Gem, so on a typical project which uses Bundler you\\nwould add it to the development section of your <code>Gemfile</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>group :development do\\n  gem rubocop\\nend</code></pre>\\n      </div>\\n<p>This means anyone using your project will have the same version of Rubocop, and\\neveryone will agree on what the current best practice is.</p>\\n<h3>Usage</h3>\\n<p>Before every commit, I like to check that my newly modified code complies with\\nthe commmunity standard, simply by running:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>rubocop</code></pre>\\n      </div>\\n<p>This will output a list of warnings about your code.</p>\\n<p>It can be helpful to ask Rubocop for more help:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>rubocop --extra-details --display-cop-names</code></pre>\\n      </div>\\n<p>(You might add these to a <code>.rubocop</code> file to make them default.)</p>\\n<p>Many editors will allow you to integrate Rubocop, which can give immediate\\nfeedback when you’re writing code.</p>\\n<h3>Fixing issues</h3>\\n<p>Let’s say I’ve written some new code; before I commit it, I might decide to\\ncheck it sticks to the guidelines:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code>rubocop <my new file></code></pre>\\n      </div>\\n<p>I can edit make the suggested changes manually, or I can ask Rubocop to fix\\nminor issues automatically:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>rubocop --auto-correct</code></pre>\\n      </div>\\n<h3>Running only certain Cops</h3>\\n<p>Each community guideline is implemented in a Rubocop ‘cop’. When working on a\\nlegacy codebase you might be swamped with warnings when introducing Rubocop.\\nIn this case it can often be useful to run only a single cop across the\\ncodebase, and check those changes in before moving on to the next guideline, for\\nexample:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>rubocop --auto-correct --only 'Layout/EmptyLineAfterMagicComment'</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/ruby/rubocop/\"},\"frontmatter\":{\"title\":\"Rubocop\"}}},\"pathContext\":{\"slug\":\"/ruby/rubocop/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/ruby-rubocop.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/ruby-rubocop.json\n// module chunks = 10360090530333400000"],"sourceRoot":""}