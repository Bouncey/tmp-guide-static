webpackJsonp([0x2149a4f51b6fe000],{"./node_modules/json-loader/index.js!./.cache/json/php-loops-for-loop.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h2>For Loop</h2>\n<p>The PHP  <code>for</code> statement consists of three expressions and a statement:</p>\n<p><code>for ((initialization); (condition); (final-expression)) statement</code></p>\n<h3>Description</h3>\n<ul>\n<li>\n<p>initialization</p>\n<ul>\n<li>Run before the first execution on the loop.</li>\n<li>This expression is commonly used to create counters. </li>\n<li>Variables created here are scoped to the loop. Once the loop has finished it is execution they are destroyed.</li>\n</ul>\n</li>\n<li>\n<p>condition </p>\n<ul>\n<li>Expression that is checked prior to the execution of every iteration. </li>\n<li>If omitted this expression evaluates to <code>true</code>.</li>\n</ul>\n</li>\n<li>\n<p>final-expression </p>\n<ul>\n<li>Expression that is run after every iteration. </li>\n<li>Usually used to increment a counter. </li>\n<li>But it can be used to run any expression.</li>\n</ul>\n</li>\n<li>\n<p>statement</p>\n<ul>\n<li>Code to be repeated in every loop iteration.</li>\n</ul>\n</li>\n</ul>\n<p>Any of these three expressions or the statement can be ommited. </p>\n<p>The expressions can contain multiple expressions separated by comma. </p>\n<p>In the (condition) expression, all the comma separated expressions will be evaluated. </p>\n<p>The result is obtained from the last one.</p>\n<p>For loops are commonly used to count a certain number of iterations to repeat a statement.</p>\n<h3>Common Pitfalls</h3>\n<h4>Exceeding the bounds of an array</h4>\n<p>When indexing over an array many times it is easy to exceed the bounds of the array (ex. try to reference the 4th element of a 3 element array).</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token comment" spellcheck="true">// This will cause an error.</span>\n<span class="token comment" spellcheck="true">// The bounds of the array will be exceeded.</span>\n<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>This will output:</p>\n<div class="gatsby-highlight">\n      <pre class="language-txt"><code>int(1) int(2) int(3) NULL</code></pre>\n      </div>\n<p>There are to ways to fix this code. </p>\n<p>Set the condition to either <code>$i &#x3C; count($arr)</code> or <code>$i &#x3C;= count($arr) - 1</code>.</p>\n<h4>Performance Issues</h4>\n<p>The above code can became slow, because the array size is fetched in every iteration. </p>\n<p>In order to fix this problem it is possible to put the array size into a variable.</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token comment" spellcheck="true">//create the $size variable with a second expression comma separated</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$size</span><span class="token punctuation">;</span> <span class="token operator">++</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n</code></pre>\n      </div>\n<h3>More Information</h3>\n<ul>\n<li><a href=\'https://secure.php.net/manual/en/control-structures.for.php\' target=\'_blank\' rel=\'nofollow\'>PHP.net - Control Structures</a> </li>\n</ul>',fields:{slug:"/php/loops/for-loop/"},frontmatter:{title:"For Loop"}}},pathContext:{slug:"/php/loops/for-loop/"}}}});
//# sourceMappingURL=path---php-loops-for-loop-27580c8280bbc1cfa4fa.js.map