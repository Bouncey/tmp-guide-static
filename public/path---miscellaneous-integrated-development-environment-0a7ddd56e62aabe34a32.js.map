{"version":3,"sources":["webpack:///path---miscellaneous-integrated-development-environment-0a7ddd56e62aabe34a32.js","webpack:///./.cache/json/miscellaneous-integrated-development-environment.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/miscellaneous-integrated-development-environment.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,0GACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,m1DAAAC,QAAo2DC,KAAA,sDAA4DC,aAAgBC,MAAA,wCAA+CC,aAAgBH,KAAA","file":"path---miscellaneous-integrated-development-environment-0a7ddd56e62aabe34a32.js","sourcesContent":["webpackJsonp([18333013226152495000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/miscellaneous-integrated-development-environment.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><strong>Integrated development environments</strong> are designed to maximize programmer productivity by providing tight-knit components with similar user interfaces. IDEs present a single program in which all development is done. This program typically provides many features for authoring, modifying, compiling, deploying and debugging software. This contrasts with software development using unrelated tools, such as vi, GCC or make.</p>\\n<p>One aim of the IDE is to reduce the configuration necessary to piece together multiple development utilities, instead providing the same set of capabilities as a cohesive unit. Reducing that setup time can increase developer productivity, in cases where learning to use the IDE is faster than manually integrating all of the individual tools. Tighter integration of all development tasks has the potential to improve overall productivity beyond just helping with setup tasks. For example, code can be continuously parsed while it is being edited, providing instant feedback when syntax errors are introduced. That can speed learning a new programming language and its associated libraries.</p>\\n<p>Some IDEs are dedicated to a specific programming language, allowing a feature set that most closely matches the programming paradigms of the language. However, there are many multiple-language IDEs, such as Eclipse, ActiveState Komodo, IntelliJ IDEA, MyEclipse, Oracle JDeveloper, NetBeans, Codenvy and Microsoft Visual Studio. Xcode, Xojo and Delphi are dedicated to a closed language or set of programming languages.</p>\\n<p>While most modern IDEs are graphical, text-based IDEs such as Turbo Pascal were in popular use before the widespread availability of windowing systems like Microsoft Windows and the X Window System (X11). They commonly use function keys or hotkeys to execute frequently used commands or macros.</p>\",\"fields\":{\"slug\":\"/miscellaneous/integrated-development-environment/\"},\"frontmatter\":{\"title\":\"Integrated Development Environment\"}}},\"pathContext\":{\"slug\":\"/miscellaneous/integrated-development-environment/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---miscellaneous-integrated-development-environment-0a7ddd56e62aabe34a32.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><strong>Integrated development environments</strong> are designed to maximize programmer productivity by providing tight-knit components with similar user interfaces. IDEs present a single program in which all development is done. This program typically provides many features for authoring, modifying, compiling, deploying and debugging software. This contrasts with software development using unrelated tools, such as vi, GCC or make.</p>\\n<p>One aim of the IDE is to reduce the configuration necessary to piece together multiple development utilities, instead providing the same set of capabilities as a cohesive unit. Reducing that setup time can increase developer productivity, in cases where learning to use the IDE is faster than manually integrating all of the individual tools. Tighter integration of all development tasks has the potential to improve overall productivity beyond just helping with setup tasks. For example, code can be continuously parsed while it is being edited, providing instant feedback when syntax errors are introduced. That can speed learning a new programming language and its associated libraries.</p>\\n<p>Some IDEs are dedicated to a specific programming language, allowing a feature set that most closely matches the programming paradigms of the language. However, there are many multiple-language IDEs, such as Eclipse, ActiveState Komodo, IntelliJ IDEA, MyEclipse, Oracle JDeveloper, NetBeans, Codenvy and Microsoft Visual Studio. Xcode, Xojo and Delphi are dedicated to a closed language or set of programming languages.</p>\\n<p>While most modern IDEs are graphical, text-based IDEs such as Turbo Pascal were in popular use before the widespread availability of windowing systems like Microsoft Windows and the X Window System (X11). They commonly use function keys or hotkeys to execute frequently used commands or macros.</p>\",\"fields\":{\"slug\":\"/miscellaneous/integrated-development-environment/\"},\"frontmatter\":{\"title\":\"Integrated Development Environment\"}}},\"pathContext\":{\"slug\":\"/miscellaneous/integrated-development-environment/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/miscellaneous-integrated-development-environment.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/miscellaneous-integrated-development-environment.json\n// module chunks = 18333013226152495000"],"sourceRoot":""}