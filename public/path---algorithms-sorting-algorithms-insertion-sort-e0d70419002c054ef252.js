webpackJsonp([0x9e2025e129c3c800],{"./node_modules/json-loader/index.js!./.cache/json/algorithms-sorting-algorithms-insertion-sort.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h2>Insertion Sort</h2>\n<p>Insertion sort is the simplest and efficient sorting algorithm for small number of elements.</p>\n<h3>Example:</h3>\n<p> In Insertion sort, you compare the <code>key</code> element with the previous elements. If the previous elements are greater than the <code>key</code> element, then you move the previous element to the next position.</p>\n<p>Start from index 1 to size of the input array.</p>\n<p>[ 8 3 5 1 4 2 ]</p>\n<p>Step 1 :  </p>\n<p><img src="https://github.com/blulion/freecodecamp-resource/blob/master/insertion_sort/1.png?raw=true" alt="[ 8 3 5 1 4 2 ]"></p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>      key = 3 //starting from 1st index.\n\n      Here `key` will be compared with the previous elements.\n\n      In this case, `key` is compared with 8. since 8 > 3, move the element 8\n      to the next position and insert `key` to the previous position.\n\n      Result: [ 3 8 5 1 4 2 ]</code></pre>\n      </div>\n<p>Step 2 :</p>\n<p><img src="https://github.com/blulion/freecodecamp-resource/blob/master/insertion_sort/2.png?raw=true" alt="[ 3 8 5 1 4 2 ]"></p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>      key = 5 //2nd index\n\n      8 > 5 //move 8 to 2nd index and insert 5 to the 1st index.\n\n      Result: [ 3 5 8 1 4 2 ]</code></pre>\n      </div>\n<p>Step 3 :</p>\n<p><img src="https://github.com/blulion/freecodecamp-resource/blob/master/insertion_sort/3.png?raw=true" alt="[ 3 5 8 1 4 2 ]"></p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>      key = 1 //3rd index\n\n      8 > 1     => [ 3 5 1 8 4 2 ]  \n\n      5 > 1     => [ 3 1 5 8 4 2 ]\n\n      3 > 1     => [ 1 3 5 8 4 2 ]\n\n      Result: [ 1 3 5 8 4 2 ]</code></pre>\n      </div>\n<p>Step 4 :</p>\n<p><img src="https://github.com/blulion/freecodecamp-resource/blob/master/insertion_sort/4.png?raw=true" alt="[ 1 3 5 8 4 2 ]"></p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>      key = 4 //4th index\n\n      8 > 4   => [ 1 3 5 4 8 2 ]\n\n      5 > 4   => [ 1 3 4 5 8 2 ]\n\n      3 > 4   ≠>  stop\n\n      Result: [ 1 3 4 5 8 2 ]</code></pre>\n      </div>\n<p>Step 5 :</p>\n<p><img src="https://github.com/blulion/freecodecamp-resource/blob/master/insertion_sort/5.png?raw=true" alt="[ 1 3 4 5 8 2 ]"></p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>      key = 2 //5th index\n\n      8 > 2   => [ 1 3 4 5 2 8 ]\n\n      5 > 2   => [ 1 3 4 2 5 8 ]\n\n      4 > 2   => [ 1 3 2 4 5 8 ]\n\n      3 > 2   => [ 1 2 3 4 5 8 ]\n\n      1 > 2   ≠> stop\n\n      Result: [1 2 3 4 5 8]</code></pre>\n      </div>\n<p><img src="https://github.com/blulion/freecodecamp-resource/blob/master/insertion_sort/6.png?raw=true" alt="[ 1 2 3 4 5 8 ]"></p>\n<p>The below algorithm is slightly optimized version to avoid swapping <code>key</code> element in every iteration. Here, the <code>key</code> element will be swapped at the end of the iteration (step).</p>\n<div class="gatsby-highlight">\n      <pre class="language-algorithm"><code>    InsertionSort(arr[])\n      for j = 1 to arr.length\n         key = arr[j]\n         i = j - 1\n         while i > 0 and arr[i] > key\n            arr[i+1] = arr[i]\n            i = i - 1\n         arr[i+1] = key</code></pre>\n      </div>\n<p>A quick implementation in Swift is as shown below :</p>\n<div class="gatsby-highlight">\n      <pre class="language-swift"><code>  <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">func</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>array<span class="token punctuation">:</span><span class="token keyword">inout</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">{</span>\n      <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>array<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">{</span>\n          <span class="token keyword">let</span> key <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n          <span class="token keyword">var</span> i <span class="token operator">=</span> j<span class="token operator">-</span><span class="token number">1</span>\n\n          <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>\n              array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n              i <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span>\n          <span class="token punctuation">}</span>\n          array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> array\n  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The Java example is shown below:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>public int[] insertionSort(int[] arr)\n      for (j = 1; j < arr.length; j++) {\n         int key = arr[j]\n         int i = j - 1\n         while (i > 0 and arr[i] > key) {\n            arr[i+1] = arr[i]\n            i -= 1\n         }\n         arr[i+1] = key\n      }\n      return arr;</code></pre>\n      </div>\n<h3>Properties:</h3>\n<ul>\n<li>Space Complexity: O(1)</li>\n<li>Time Complexity: O(n*n)</li>\n<li>Stable: Yes</li>\n</ul>\n<h4>More Information:</h4>\n<ul>\n<li><a href=\'https://en.wikipedia.org/wiki/Insertion_sort\' target=\'_blank\' rel=\'nofollow\'>Wikipedia</a></li>\n</ul>',fields:{slug:"/algorithms/sorting-algorithms/insertion-sort/"},frontmatter:{title:"Insertion Sort"}}},pathContext:{slug:"/algorithms/sorting-algorithms/insertion-sort/"}}}});
//# sourceMappingURL=path---algorithms-sorting-algorithms-insertion-sort-e0d70419002c054ef252.js.map