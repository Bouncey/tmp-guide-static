webpackJsonp([0xc265481d0335b00],{"./node_modules/json-loader/index.js!./.cache/json/java-equality.json":function(a,n){a.exports={data:{markdownRemark:{html:'<h1>Checking for Equality</h1>\n<p>In Java, there are two ways to check if two variables are the “same”: <code>==</code> and <code>.equals()</code>. These two methods do not work the same, however.</p>\n<h2>The <code>==</code> Operator</h2>\n<p>The basic equality operation in Java, <code>==</code> as in <code>var1 == var2</code>, checks whether <code>var1</code> and <code>var2</code> point to the same <em>object reference</em>.\nThat is, if <code>var1</code> is the same <em>instance</em> of a class in memory as <code>var2</code>, then <code>var1 == var2</code> is true.</p>\n<p>However, if <code>var1</code> and <code>var2</code> were created as two separate instances of a class (i.e. with the <code>new</code> keyword), then <code>var1 == var2</code> will be false. Even if both objects happen to contain the exact same properties and values, the <code>==</code> comparison would not pass because they are not pointing to the same object in memory.</p>\n<p>For primitive variable types, such as <code>int</code> and <code>double</code>, the <code>==</code> operator can always be used to check for equality, as their values are stored directly with the variable (rather than as a reference to another slot in memory).</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">int</span> var1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> var2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nSystem<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var1 <span class="token operator">==</span> var2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>\n\nMyObject obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nMyObject obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>\nMyObject obj3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nSystem<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1 <span class="token operator">==</span> obj2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>\nSystem<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1 <span class="token operator">==</span> obj3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>\nSystem<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj2 <span class="token operator">==</span> obj3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>\n</code></pre>\n      </div>\n<h2>The <code>.equals()</code> Method</h2>\n<p>The built-in <code>Object</code> class in Java, which all other classes automatically extand, contains a number of helpful built-in methods. One such method is <code>equals()</code>, which takes another object as its argument and returns whether the two objects should be considered “equal” according to the relevant logic for that class.</p>\n<p>When you create a new class in Java, you will often weant to override the <code>equals()</code> method in order to provide a mroe meaningful way to compare two objects of the same class. How this method is implemented is completely up to the developer’s judgment. </p>\n<p>For example, you may decide that two <code>Person</code>s should be considered “equal” if their <code>name</code> and <code>dateOfBirth</code> are the same. This logic would be implemented in your <code>Person</code> class’s <code>equals()</code> method:</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> Date dateOfBirth<span class="token punctuation">;</span>\n    \n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dateOfBirth<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>dateOfBirth<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Most of the built-in classes in Java, as well as classes provided by popular libraries, will implement the <code>equals()</code> method in a meaningful way.</p>\n<p>For example, the <code>java.util.Set</code> interface specifies that a <code>Set</code>’s <code>equals()</code> method will return true if “the specified object is also a set, the two sets have the same size, and every member of the specified set is contained in this set”.</p>\n<p>However, if a class does not override the default <code>equals()</code> implementation, the default implementation will apply, which simply uses the <code>==</code> operator to compare the two objects.</p>',fields:{slug:"/java/equality/"},frontmatter:{title:"Checking for Equality"}}},pathContext:{slug:"/java/equality/"}}}});
//# sourceMappingURL=path---java-equality-d51047b96a9ebbc8ca8b.js.map