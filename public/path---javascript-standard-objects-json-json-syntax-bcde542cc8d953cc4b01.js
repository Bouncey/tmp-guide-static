webpackJsonp([0xe59034d2fe4a7800],{"./node_modules/json-loader/index.js!./.cache/json/javascript-standard-objects-json-json-syntax.json":function(a,n){a.exports={data:{markdownRemark:{html:'<h2>JSON Syntax</h2>\n<p>The JSON syntax is a subset of the JavaScript syntax.</p>\n<h3>JSON Syntax Rules</h3>\n<ul>\n<li>JSON Object is an unordered set of name/value pairs.</li>\n<li>Object names are followed by a colon (:).</li>\n<li>Curly braces {} are used to hold objects. Object begins with { (left curly brace) and ends with } (right curly brace).</li>\n<li>JSON Object data is represented as a collection of name/value pair.</li>\n<li>Each name/value pairs are separated by comma (,)</li>\n<li>Square braces [] are used to hold Arrays.</li>\n</ul>\n<h3>JSON Data - A Name and a Value</h3>\n<p>JSON data is written as name/value pairs.</p>\n<p>A name/value pair consists of a field name (in double quotes), followed by a colon, followed by a value:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>"handle":"moghya"</code></pre>\n      </div>\n<ul>\n<li>JSON names require double quotes.</li>\n</ul>\n<h3>JSON - Evaluates to JavaScript Objects</h3>\n<p>The JSON format is almost identical to JavaScript objects. </p>\n<p>In JSON, keys must be strings, written with double quotes:</p>\n<ul>\n<li>JSON</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>"handle":"moghya"</code></pre>\n      </div>\n<ul>\n<li>JavaScript</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>handle:"moghya"</code></pre>\n      </div>\n<h3>JSON Values</h3>\n<p>In JSON, values must be one of the following data types:</p>\n<ul>\n<li>a string</li>\n<li>a number</li>\n<li>an object (JSON object)</li>\n<li>an array</li>\n<li>a boolean</li>\n<li>null</li>\n</ul>\n<p>In JavaScript values can be all of the above, plus any other valid JavaScript expression, including:</p>\n<ul>\n<li>a function</li>\n<li>a date</li>\n<li>undefined</li>\n</ul>\n<h3>JSON Uses JavaScript Syntax</h3>\n<p>Because JSON syntax is derived from JavaScript object notation, very little extra software is needed to work with JSON within JavaScript.</p>\n<p>With JavaScript you can create an object and assign data to it, like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>var person = { \n  "name":"Shubham",\n  "age":21, \n  "handle":"moghya", \n  "website":"http://moghya.me/"\n  };\n  </code></pre>\n      </div>\n<p>You can access a JavaScript object like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>//returns moghya\nperson.handle;</code></pre>\n      </div>\n<p>It can also be accessed like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>//returns http://moghya.me/\nperson["website"];</code></pre>\n      </div>\n<h3>Arrays in JSON</h3>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>var team = {\n  "name":"novatoscript",\n  "members" : \n  [\n    {\n      "name":"Shubham Sawant",\n      "age":21, \n      "handle":"moghya", \n      "website":"http://moghya.me",\n    },\n    {\n      "name":"Saurabh Banore",\n      "age":21, \n      "handle":"banoresaurabh", \n      "website":"http://banoresaurabh.me/",\n    }\n  ]\n}</code></pre>\n      </div>\n<h3>Example</h3>\n<p>A very large example of JSON is <a href="http://moghya.me/js/profile.json">here!</a>.</p>',fields:{slug:"/javascript/standard-objects/json/json-syntax/"},frontmatter:{title:"JSON Syntax"}}},pathContext:{slug:"/javascript/standard-objects/json/json-syntax/"}}}});
//# sourceMappingURL=path---javascript-standard-objects-json-json-syntax-bcde542cc8d953cc4b01.js.map