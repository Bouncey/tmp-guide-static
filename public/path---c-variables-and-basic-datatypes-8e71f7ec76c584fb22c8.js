webpackJsonp([0x4259c2fb00b7b800],{"./node_modules/json-loader/index.js!./.cache/json/c-variables-and-basic-datatypes.json":function(n,a){n.exports={data:{markdownRemark:{html:'<h1>Variables and Basic Data Types</h1>\n<h2>What is a variable?</h2>\n<p>Variables store values. Basically you give a name to a stored value, which you want to use later. It is important to note that one variable can store only one value at once. However later on, you can change the stored values \tlater on in the code and you can also assign the value of one variable to another.</p>\n<blockquote>\n<p>When you create a variable, it is called <code>declaring</code>, and when you give it a value to store, it is called <code>assignment</code>. If you give the variable a value at the same time as declaring it, it is called <code>initializing</code>.\nC is very fussy about how you create variables and what you store in them. C is a <code>strongly typed</code> language, which means you have to define the type and name for each variable when you declare it. The name of a variable can be composed of letters, digits, and the underscore character.</p>\n</blockquote>\n<h2>Basic types</h2>\n<p>In Standard C there are four important basic data types: <code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>.</p>\n<h3>Integers</h3>\n<p>For whole number values, the <code>int</code> keyword is used (short for integer).\nLets’s look at a simple program:</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n <span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Declaring a variable which stores integer values and is called \'a\'\t</span>\n <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Initializing an int called \'b\' with the value 5</span>\n a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Assigning the value 6 to the variable \'a\'</span>\n <span class="token keyword">int</span> c<span class="token punctuation">;</span>\n c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Assign the sum of \'a\' and \'b\' to the variable c</span>\n <span class="token keyword">int</span> d <span class="token operator">=</span> a <span class="token operator">+</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//But we could also initialize it right away. </span>\n \n <span class="token comment" spellcheck="true">//Some shiny things</span>\n <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> \n <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d \\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> \n\t\n <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Let’s break down what we did under the <code>Some shingy things</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre>\n      </div>\n<p>To print out the value of the variable <code>c</code>, you can use the <code>printf()</code> function. Note the <code>%d</code> enclosed in the double quotes. This tells the computer to expect a <strong>d</strong>ecimal value, and that it is after the comma.</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d \\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre>\n      </div>\n<p>You can print out several integers in the order given after the comma.</p>\n<p>Note that when you try to store a decimal value in an <code>int</code>, you will only get the whole part of it, because they will be truncated.</p>\n<h3>Floats and doubles</h3>\n<p>To store decimal values, you can use the <code>float</code> and <code>double</code> keywords. The difference between them is the precision, <code>double</code> has about 13 digits while <code>float</code> has about 7, but this differs from CPU to CPU.</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">3.23</span><span class="token punctuation">;</span>\n\t<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The variable a has the value: %f \\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Double values can be printed with %f</span>\n<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>Characters</h3>\n<p>You can store a single character with the <code>char</code> keyword. You will learn about storing multiple characters later, when we introduce <code>arrays</code>. Let’s look at some code:</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token string">\'A\'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Initializing a char with the value \'A\', note the simple quotes!</span>\n <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The character was: %c "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Chars can be printed with %c</span>\n<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>The Boolean type</h2>\n<p>Later in C a new type was added, called <code>bool</code>. Bool stores true/false values, which comes in handy when you have to make decisions in the code. To use it though, you have to inlcude another header next to <code>&#x3C;stdio.h></code> called <code>&#x3C;stdbool.h></code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n bool a <span class="token operator">=</span> true<span class="token punctuation">;</span>\n bool b <span class="token operator">=</span> false<span class="token punctuation">;</span>\n\n <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Comments</h2>\n<p>The type of a variable tells the compiler how much space to create (allocate) for the variable. Now you have seen the basic data types, but there are modifiers for them to modify the amount of space allocated for a variable. Modifiers can increase or decrease the default values. C has 5 modifiers: <code>short</code>, <code>long</code>, <code>signed</code>, <code>unsigned</code>, <code>long long</code>. They are prefixed to the basic types. </p>',fields:{slug:"/c/variables-and-basic-datatypes/"},frontmatter:{title:"Variables and Basic Data Types"}}},pathContext:{slug:"/c/variables-and-basic-datatypes/"}}}});
//# sourceMappingURL=path---c-variables-and-basic-datatypes-8e71f7ec76c584fb22c8.js.map