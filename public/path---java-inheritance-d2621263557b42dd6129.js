webpackJsonp([0x81177184d4cf0800],{"./node_modules/json-loader/index.js!./.cache/json/java-inheritance.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h1>Inheritance</h1>\n<p>Java inheritance refers to the ability of a Java Class to <code>inherit</code> the properties from some other Class. Think of it like a child inheriting properties from its parents, the concept is very similar to that. In Java lingo, it is also called <em>extend</em>-ing a class. Some simple things to remember :</p>\n<ul>\n<li>The Class that extends or inherits is called a <strong>subclass</strong></li>\n<li>The Class that is being extended or inherited is called a <strong>superclass</strong></li>\n</ul>\n<p>Thus, inheritance gives Java the cool capability of <em>re-using</em> code, or sharing code between classes!</p>\n<p>Let’s describe it with the classic example of a <code>Vehicle</code> class and a <code>Car</code> class :</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">// starting the engine</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">// stopping the engine</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> numberOfSeats <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumberOfSeats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> numberOfSeats<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Here, we can see the <code>Car</code> class inheriting the properties of the <code>Vehicle</code> class. So, we don’t have to write the same code for the methods <code>start()</code> and <code>stop()</code> for <code>Car</code> as well, as those properties are available from its parent or superclass. Therefore, objects created from the <code>Car</code> class will <em>also</em> have those properties!</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code>Car tesla <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ntesla<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ntesla<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CJXz/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<p>But, does the parent class have the methods of the child? No, it doesn’t.</p>\n<p>Therefore, whenever you need to share some common piece of code between multiple classes, it is always good to have a parent class, and then extend that class whenever needed! Reduces the number of lines of code, makes code modular, and simplifies testing.</p>\n<h2>What can be inherited ?</h2>\n<ul>\n<li>All <code>protected</code> and <code>public</code> fields and methods from parent</li>\n</ul>\n<h2>What cannot be inherited ?</h2>\n<ul>\n<li><code>private</code> fields and methods</li>\n<li>Constructors. Although, the subclass constructor <em>has</em> to call the superclass constructor if its defined (More on that later!)</li>\n<li>Multiple classes. Java supports only <strong>single inheritance</strong>, that is, you can only inherit one class at a time.</li>\n<li>Fields. Individual fields of a class cannot be overriden by the subclass.</li>\n</ul>\n<h2>Type Casting &#x26; Reference</h2>\n<p>In Java, it is possible to reference a subclass as an <em>instance</em> of its superclass. It is called <em>Polymorphism</em> in Object Oriented Programming (OOP), the ability for an object to take on many forms. For example, the <code>Car</code> class object can be referenced as a <code>Vehicle</code> class instance like this :</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code>Vehicle car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Although, the opposite is not possible :</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code>Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ERROR</span>\n</code></pre>\n      </div>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CJYB/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<p>Since you can reference a Java subclass as a superclass instance, you can easily cast an instance of a subclass object to a superclass instance. It is possible to cast a superclass object into a subclass type, but <em>only if the object is really an instance of the subclass</em>. So keep this in mind :</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code>Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nVehicle vehicle <span class="token operator">=</span> car<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// upcasting</span>\nCar car2 <span class="token operator">=</span> <span class="token punctuation">(</span>Car<span class="token punctuation">)</span>vechile<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//downcasting</span>\n\nBike bike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// say Bike is also a subclass of Vehicle</span>\nVehicle v <span class="token operator">=</span> bike<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// upcasting, no problem here.</span>\nCar car3 <span class="token operator">=</span> <span class="token punctuation">(</span>Car<span class="token punctuation">)</span>bike<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Compilation Error : as bike is NOT a instance of Car</span>\n</code></pre>\n      </div>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CJYM/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<p>Now you know how to share code through a parent-child relationship. But, what if, you do not like the implementation of a particular method in the child class and want to write a new one for it? What do you do then?</p>\n<h2>Override it!</h2>\n<p>Java lets you <em>override</em> or redefine the methods defined in the superclass. For example, your <code>Car</code> class has a different implementation of <code>start()</code> than the parent <code>Vehicle</code>, so you do this :</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Vehicle start code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Car start code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nCar car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncar<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Car start code"</span>\n</code></pre>\n      </div>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CJYZ/1\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<p>So, it’s pretty simple to override methods in the subclass. Although, there is a <em>catch</em>. Only that superclass method with the <em>exact same method signature</em> as the subclass method will be overriden. That means the subclass method definition must have the exact same name, same number and type of parameters, and in the exact same sequence. Thus, <code>public void start(String key)</code> would not override <code>public void start()</code>.</p>\n<p><strong>Notes</strong> :</p>\n<ul>\n<li>You cannot override private methods of the superclass. (Quite obvious, isn’t it?)</li>\n<li>What if the method of superclass which you are overriding in the subclass suddenly gets obliterated or methods changed? It would fail in runtime! So Java provides you a nifty annotation <code>@Override</code> which you can place over the subclass method, which will warn the compiler of those incidents!</li>\n</ul>\n<p>Annotations in Java is a good coding practice, but they are not a necessity. The compiler is smart enough to figure out overriding on its own though. Unlike other OOP languages, Annotations in Java it doesn’t necessarily modify the method or add extra functionality.</p>\n<h2>How to call super class methods?</h2>\n<p>Funny you ask about it! Just use the keyword <code>super</code> :</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Vehicle start code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nCar car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncar<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Vehicle start code"</span>\n</code></pre>\n      </div>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CJY4/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<p><strong>N.B.</strong> : Although you can call the parent method by using a <code>super</code> call, you cannot go up the inheritance hierarchy with chained <code>super</code> calls.</p>\n<h2>How to know the type of a class?</h2>\n<p>Using the <code>instanceof</code> keyword. Having lots of classes and subclasses it would be a little confusing to know which class is a subclass of which one in runtime. So, we can use <code>instanceof</code> to determine whether an object is an instance of a class, an instance of a subclass, or an instance of an interface.</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code>Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">boolean</span> flag <span class="token operator">=</span> car <span class="token keyword">instanceof</span> <span class="token class-name">Vehicle</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true in this case!</span>\n</code></pre>\n      </div>\n<h2>Constructors &#x26; Inheritance</h2>\n<p>As mentioned earlier, constructors cannot be directly inherited by a subclass. Although, a subclass is <em>required</em> to call its parent’s constructor as the <a href=\'http://stackoverflow.com/questions/1168345/why-does-this-and-super-have-to-be-the-first-statement-in-a-constructor\' target=\'_blank\' rel=\'nofollow\'>first operation</a> in its own constructor. How? You guessed it, using <code>super</code> :</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">// constructor</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Vehicle start code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CJY8/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<p>Remember, if the superclass does not have any constructors defined, you don’t have to call it explicitely in the subclass. Java handles that internally for you! Invocation to <code>super</code> constructor is done in the case when the super class is to be called with any other constructor other than the <em>default constructor</em>.</p>\n<p>If no other constructors are defined, then Java invokes the default super class constructor (<em>even if not defined explicitly</em>).</p>\n<p>Congrats, now you know all about Inheritance! Read more about advanced ways to inherit things in Abstract Classes and <a href="//forum.freecodecamp.com/t/java-docs-interfaces">Interfaces</a>!</p>',fields:{slug:"/java/inheritance/"},frontmatter:{title:"Inheritance"}}},pathContext:{slug:"/java/inheritance/"}}}});
//# sourceMappingURL=path---java-inheritance-d2621263557b42dd6129.js.map