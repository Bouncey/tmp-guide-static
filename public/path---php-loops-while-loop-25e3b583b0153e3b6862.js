webpackJsonp([0xf61dc44b98c4a800],{"./node_modules/json-loader/index.js!./.cache/json/php-loops-while-loop.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h2>While Loop</h2>\n<p>The <code>while loop</code> is one of the easiest type of loop in PHP. It executes the block of statements until the expression evaluates to <strong>TRUE</strong>. If the value of the expression changes at the time of execution, then the loop runs until the expression evaluates to <strong>FALSE</strong>.The Basic Form of While Loop is given below:</p>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code>while (expr)\n    statement</code></pre>\n      </div>\n<p>The Statements inside the while loop can be enclosed within the curly braces or can be used based on the following syntax:</p>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code>while (expr):\n    statement\n    ...\nendwhile;</code></pre>\n      </div>\n<p>Illustrating the simple and alternate syntax of while loop using example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n\n<span class="token comment" spellcheck="true">/* using the simple form of while loop */</span>\n\n<span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* initialisation part */</span>\n\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$i</span><span class="token operator">!=</span><span class="token number">5</span> <span class="token punctuation">)</span> \n<span class="token punctuation">{</span>\n    <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">/*using the alternate synatx of while loop*/</span>\n\n<span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token keyword">endwhile</span><span class="token punctuation">;</span>\n\n<span class="token delimiter important">?></span>\n</code></pre>\n      </div>\n<h4>More Information</h4>\n<p><a href="http://php.net/manual/en/control-structures.while.php">While loop - PHP Documentation</a></p>',fields:{slug:"/php/loops/while-loop/"},frontmatter:{title:"While Loop"}}},pathContext:{slug:"/php/loops/while-loop/"}}}});
//# sourceMappingURL=path---php-loops-while-loop-25e3b583b0153e3b6862.js.map