{"version":3,"sources":["webpack:///path---c-structures-ba8178289720f17bdce2.js","webpack:///./.cache/json/c-structures.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/c-structures.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,oBAERC,sEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,stLAA0tLC,QAA2OC,KAAA,kBAAwBC,aAAgBC,MAAA,gBAAuBC,aAAgBH,KAAA","file":"path---c-structures-ba8178289720f17bdce2.js","sourcesContent":["webpackJsonp([1110560087012585700],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/c-structures.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Structures in C</h2>\\n<h3>What are Structures?</h3>\\n<ul>\\n<li>A <strong>structure</strong> is a user-defined type in C. It is based on the idea that certain times, programmer wants to manage not just primitive data-types but also programmer-defined data-types.</li>\\n<li><strong>Structure</strong>, as the name suggests, consists of various primitive data-types, like character, integers, floating point variables, arrays, etc.</li>\\n<li><strong>Structure</strong> can also contain various other user-defined data types. You would learn about nested-structures next.</li>\\n<li>\\n<p><strong>Structures</strong> form the basis of <strong><em>object-oriented-programming</em></strong> as the concept of <em>class</em> originates from structures.</p>\\n<h3>struct keyword</h3>\\n</li>\\n<li>\\n<p><code>struct</code> keyword can help us in defining a user-defined data type.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">struct</span> StudentRecord\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">char</span> Name<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> Class<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">char</span> Address<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">30</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">char</span> Phone<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>In <code>main()</code>, the user-defined data-type <strong>StudentRecord</strong> is defined as:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">struct</span> StudentRecord student1<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>To access the data stored in <strong>student1</strong>, we use dot( <strong>.</strong> ) operator to access the contents of the structure type variable.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">struct</span> StudentRecord student1<span class=\\\"token punctuation\\\">;</span>\\nstudent1<span class=\\\"token punctuation\\\">.</span>Class <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Enter Name of Student\\\\n\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">scanf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"%s\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">&amp;</span>student1<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Enter Address of Student\\\\n\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">scanf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"%s\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">&amp;</span>student1<span class=\\\"token punctuation\\\">.</span>Address<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Enter Phone Number of Student\\\\n\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">scanf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"%s\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">&amp;</span>student1<span class=\\\"token punctuation\\\">.</span>Phone<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Printing the Data</span>\\n<span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Name: %s \\\\n, Class: %d \\\\n, Address: %s \\\\n, Phone: %s \\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span>student1<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">,</span> student1<span class=\\\"token punctuation\\\">.</span>Class<span class=\\\"token punctuation\\\">,</span> student1<span class=\\\"token punctuation\\\">.</span>Address<span class=\\\"token punctuation\\\">,</span> student1<span class=\\\"token punctuation\\\">.</span>Phone<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>More Information</h3>\\n<p><a href=\\\"https://www.tutorialspoint.com/cprogramming/c_structures.htm\\\">https://www.tutorialspoint.com/cprogramming/c_structures.htm</a></p>\\n</li>\\n</ul>\",\"fields\":{\"slug\":\"/c/structures/\"},\"frontmatter\":{\"title\":\"Structures\"}}},\"pathContext\":{\"slug\":\"/c/structures/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---c-structures-ba8178289720f17bdce2.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Structures in C</h2>\\n<h3>What are Structures?</h3>\\n<ul>\\n<li>A <strong>structure</strong> is a user-defined type in C. It is based on the idea that certain times, programmer wants to manage not just primitive data-types but also programmer-defined data-types.</li>\\n<li><strong>Structure</strong>, as the name suggests, consists of various primitive data-types, like character, integers, floating point variables, arrays, etc.</li>\\n<li><strong>Structure</strong> can also contain various other user-defined data types. You would learn about nested-structures next.</li>\\n<li>\\n<p><strong>Structures</strong> form the basis of <strong><em>object-oriented-programming</em></strong> as the concept of <em>class</em> originates from structures.</p>\\n<h3>struct keyword</h3>\\n</li>\\n<li>\\n<p><code>struct</code> keyword can help us in defining a user-defined data type.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">struct</span> StudentRecord\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">char</span> Name<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> Class<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">char</span> Address<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">30</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">char</span> Phone<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>In <code>main()</code>, the user-defined data-type <strong>StudentRecord</strong> is defined as:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">struct</span> StudentRecord student1<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>To access the data stored in <strong>student1</strong>, we use dot( <strong>.</strong> ) operator to access the contents of the structure type variable.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">struct</span> StudentRecord student1<span class=\\\"token punctuation\\\">;</span>\\nstudent1<span class=\\\"token punctuation\\\">.</span>Class <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Enter Name of Student\\\\n\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">scanf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"%s\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">&amp;</span>student1<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Enter Address of Student\\\\n\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">scanf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"%s\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">&amp;</span>student1<span class=\\\"token punctuation\\\">.</span>Address<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Enter Phone Number of Student\\\\n\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">scanf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"%s\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">&amp;</span>student1<span class=\\\"token punctuation\\\">.</span>Phone<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Printing the Data</span>\\n<span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Name: %s \\\\n, Class: %d \\\\n, Address: %s \\\\n, Phone: %s \\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span>student1<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">,</span> student1<span class=\\\"token punctuation\\\">.</span>Class<span class=\\\"token punctuation\\\">,</span> student1<span class=\\\"token punctuation\\\">.</span>Address<span class=\\\"token punctuation\\\">,</span> student1<span class=\\\"token punctuation\\\">.</span>Phone<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>More Information</h3>\\n<p><a href=\\\"https://www.tutorialspoint.com/cprogramming/c_structures.htm\\\">https://www.tutorialspoint.com/cprogramming/c_structures.htm</a></p>\\n</li>\\n</ul>\",\"fields\":{\"slug\":\"/c/structures/\"},\"frontmatter\":{\"title\":\"Structures\"}}},\"pathContext\":{\"slug\":\"/c/structures/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/c-structures.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/c-structures.json\n// module chunks = 1110560087012585700"],"sourceRoot":""}