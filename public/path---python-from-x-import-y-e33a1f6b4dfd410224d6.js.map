{"version":3,"sources":["webpack:///path---python-from-x-import-y-e33a1f6b4dfd410224d6.js","webpack:///./.cache/json/python-from-x-import-y.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/python-from-x-import-y.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,gFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,ojEAAuzCC,QAA0xBC,KAAA,4BAAkCC,aAAgBC,MAAA,4BAAmCC,aAAgBH,KAAA","file":"path---python-from-x-import-y-e33a1f6b4dfd410224d6.js","sourcesContent":["webpackJsonp([10667199912665130000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/python-from-x-import-y.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>If you have read the <a><code>import statements</code></a> wiki then you’d have seen me use this statement in one of the examples. Today, we’ll try to understand what it does</p>\\n<p>So picking up the same example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>>> from math import ceil, sqrt\\n>>> # here it would be\\n>>> sqrt(36)\\n<<< 6</code></pre>\\n      </div>\\n<p><img src=\\\"//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2\\\" title=\\\":rocket:\\\" alt=\\\":rocket:\\\" class=\\\"forum-image\\\"> <a href='https://repl.it/CS5t/1' target='_blank' rel='nofollow'>Run Code</a></p>\\n<p>Or we could use this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>>> import math\\n>>> # here it would be\\n>>> math.sqrt(36)\\n<<< 6</code></pre>\\n      </div>\\n<p><img src=\\\"//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2\\\" title=\\\":rocket:\\\" alt=\\\":rocket:\\\" class=\\\"forum-image\\\"> <a href='https://repl.it/CS5u' target='_blank' rel='nofollow'>Run Code</a></p>\\n<p>Then our code would look like<code>math.sqrt(x)</code> instead of <code>sqrt(x)</code>. This happens because when we use <code>import x</code>, a namespace <code>x</code> is itself created to avoid name conflicts. You have to access every single object of the module as <code>x.&#x3C;name></code>. But when we use <code>from x import y</code> we agree to add <code>y</code> to the main global namespace. So while using this we have to make sure that we don’t have an object with same name in our program.</p>\\n<blockquote>\\n<p><strong>Never use <code>from x import y</code> if an object named <code>y</code> already exists</strong></p>\\n</blockquote>\\n<p>For example, in <code>os</code> module there’s a method <code>open</code>. But we even have a built-in function called <code>open</code>. So, here we should avoid using <code>from os import open</code>.</p>\\n<p>We can even use <code>form x import *</code>, this would import all the methods, classes of that module to the global namespace of the program. This is a bad programming practice. Please avoid it.</p>\",\"fields\":{\"slug\":\"/python/from-x-import-y/\"},\"frontmatter\":{\"title\":\"Python from X Import Y\"}}},\"pathContext\":{\"slug\":\"/python/from-x-import-y/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---python-from-x-import-y-e33a1f6b4dfd410224d6.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>If you have read the <a><code>import statements</code></a> wiki then you’d have seen me use this statement in one of the examples. Today, we’ll try to understand what it does</p>\\n<p>So picking up the same example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>>> from math import ceil, sqrt\\n>>> # here it would be\\n>>> sqrt(36)\\n<<< 6</code></pre>\\n      </div>\\n<p><img src=\\\"//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2\\\" title=\\\":rocket:\\\" alt=\\\":rocket:\\\" class=\\\"forum-image\\\"> <a href='https://repl.it/CS5t/1' target='_blank' rel='nofollow'>Run Code</a></p>\\n<p>Or we could use this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>>> import math\\n>>> # here it would be\\n>>> math.sqrt(36)\\n<<< 6</code></pre>\\n      </div>\\n<p><img src=\\\"//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2\\\" title=\\\":rocket:\\\" alt=\\\":rocket:\\\" class=\\\"forum-image\\\"> <a href='https://repl.it/CS5u' target='_blank' rel='nofollow'>Run Code</a></p>\\n<p>Then our code would look like<code>math.sqrt(x)</code> instead of <code>sqrt(x)</code>. This happens because when we use <code>import x</code>, a namespace <code>x</code> is itself created to avoid name conflicts. You have to access every single object of the module as <code>x.&#x3C;name></code>. But when we use <code>from x import y</code> we agree to add <code>y</code> to the main global namespace. So while using this we have to make sure that we don’t have an object with same name in our program.</p>\\n<blockquote>\\n<p><strong>Never use <code>from x import y</code> if an object named <code>y</code> already exists</strong></p>\\n</blockquote>\\n<p>For example, in <code>os</code> module there’s a method <code>open</code>. But we even have a built-in function called <code>open</code>. So, here we should avoid using <code>from os import open</code>.</p>\\n<p>We can even use <code>form x import *</code>, this would import all the methods, classes of that module to the global namespace of the program. This is a bad programming practice. Please avoid it.</p>\",\"fields\":{\"slug\":\"/python/from-x-import-y/\"},\"frontmatter\":{\"title\":\"Python from X Import Y\"}}},\"pathContext\":{\"slug\":\"/python/from-x-import-y/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/python-from-x-import-y.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/python-from-x-import-y.json\n// module chunks = 10667199912665130000"],"sourceRoot":""}