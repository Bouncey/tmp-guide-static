{"version":3,"sources":["webpack:///path---csharp-null-conditional-operator-1372ec1dd69038bfea40.js","webpack:///./.cache/json/csharp-null-conditional-operator.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/csharp-null-conditional-operator.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,0FACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,y/CAA01CC,QAAgMC,KAAA,sCAA4CC,aAAgBC,MAAA,+BAAsCC,aAAgBH,KAAA","file":"path---csharp-null-conditional-operator-1372ec1dd69038bfea40.js","sourcesContent":["webpackJsonp([14216649040247783000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/csharp-null-conditional-operator.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Null-conditional Operator</h1>\\n<p>Null-conditional operators allow for null checking with a minimal amount of code. For example, if you had\\nan employee variable of type Employee with a property of type Address, you might do null checking as follows:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Address address = null;\\nif (employee != null)\\n{\\n    address = employee.Address;\\n}</code></pre>\\n      </div>\\n<p>You could use a standard conditional operator to make that check more concise:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Address address = employee != null ? employee.Address : null;</code></pre>\\n      </div>\\n<p>However, in C# 6.0 null-conditional operators were introduced, so now the above line can simply\\nbe represented as follows:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Address address = student?.Address;</code></pre>\\n      </div>\\n<p>If employee is null, address will simply be assigned null, and no NullReferenceExeception will occur.\\nThis becomes more useful with deeper object graphs, as you can handle a chain of conditional member access.\\nFor example:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>string city = student?.Address?.City;</code></pre>\\n      </div>\\n<p>Null-conditional operators are short-circuiting, so as soon as one check of conditional member access\\nreturns null, the rest do not take place.</p>\",\"fields\":{\"slug\":\"/csharp/null-conditional-operator/\"},\"frontmatter\":{\"title\":\"Null-conditional Operator\"}}},\"pathContext\":{\"slug\":\"/csharp/null-conditional-operator/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---csharp-null-conditional-operator-1372ec1dd69038bfea40.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Null-conditional Operator</h1>\\n<p>Null-conditional operators allow for null checking with a minimal amount of code. For example, if you had\\nan employee variable of type Employee with a property of type Address, you might do null checking as follows:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Address address = null;\\nif (employee != null)\\n{\\n    address = employee.Address;\\n}</code></pre>\\n      </div>\\n<p>You could use a standard conditional operator to make that check more concise:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Address address = employee != null ? employee.Address : null;</code></pre>\\n      </div>\\n<p>However, in C# 6.0 null-conditional operators were introduced, so now the above line can simply\\nbe represented as follows:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Address address = student?.Address;</code></pre>\\n      </div>\\n<p>If employee is null, address will simply be assigned null, and no NullReferenceExeception will occur.\\nThis becomes more useful with deeper object graphs, as you can handle a chain of conditional member access.\\nFor example:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>string city = student?.Address?.City;</code></pre>\\n      </div>\\n<p>Null-conditional operators are short-circuiting, so as soon as one check of conditional member access\\nreturns null, the rest do not take place.</p>\",\"fields\":{\"slug\":\"/csharp/null-conditional-operator/\"},\"frontmatter\":{\"title\":\"Null-conditional Operator\"}}},\"pathContext\":{\"slug\":\"/csharp/null-conditional-operator/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/csharp-null-conditional-operator.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/csharp-null-conditional-operator.json\n// module chunks = 14216649040247783000"],"sourceRoot":""}