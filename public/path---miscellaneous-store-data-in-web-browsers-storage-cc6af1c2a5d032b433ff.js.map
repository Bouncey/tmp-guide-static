{"version":3,"sources":["webpack:///path---miscellaneous-store-data-in-web-browsers-storage-cc6af1c2a5d032b433ff.js","webpack:///./.cache/json/miscellaneous-store-data-in-web-browsers-storage.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/miscellaneous-store-data-in-web-browsers-storage.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,0GACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,o0JAA03JC,QAAuCC,KAAA,sDAA4DC,aAAgBC,MAAA,wCAA+CC,aAAgBH,KAAA","file":"path---miscellaneous-store-data-in-web-browsers-storage-cc6af1c2a5d032b433ff.js","sourcesContent":["webpackJsonp([15579543961625470000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/miscellaneous-store-data-in-web-browsers-storage.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>In order to manage data handled by your web application, you do not necessarily need a database. The respective Browser Storage features are supported by Chrome (version 4 and higher), Mozilla Firefox (version 3.5 and higher) and Internet Explorer (version 8 and higher), and a range of other browsers including those of iOS and Android.</p>\\n<p>There are two main possibilities for browser storage:</p>\\n<h2>1. localStorage</h2>\\n<p>Any content/data saved to the <code>localStorage</code> object will be available after the browser has been restarted (closed and opened again). In order to <strong><em>save an item</em></strong> to <code>localStorage</code>, you can use the method <code>setItem()</code>. This method must be handed a key and a value.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Example: localStorage.setItem(\\\"mykey\\\",\\\"myvalue\\\");</code></pre>\\n      </div>\\n<p>To <strong><em>retrieve the item from the localStorage</em></strong>, the method <code>getItem</code> must be used. The <code>getItem</code> method must be handed the key of the data you would like to retrieve:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>  Example: localStorage.getItem(\\\"mykey\\\");</code></pre>\\n      </div>\\n<p>You can remove an item from <code>localStorage</code> by using the <code>removeItem()</code> method. This method must be handed the key of the item to be removed:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>  Example: localStorage.removeItem(\\\"mykey\\\");</code></pre>\\n      </div>\\n<p>To clear the entire <code>localStorage</code>, you should use the <code>clear()</code> method on the <code>localStorage</code> object:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>  Example: localStorage.clear();</code></pre>\\n      </div>\\n<h2>2. sessionStorage</h2>\\n<p>Items saved in the <code>sessionStorage</code> object will remain until the browser is closed by the user. Then, the storage will be cleared.</p>\\n<p>You can save an item to <code>sessionStorage</code>, please use the method <code>setItem()</code> on the <code>sessionStorage</code> object:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Example: sessionStorage.setItem(\\\"mykey\\\",\\\"myvalue\\\");</code></pre>\\n      </div>\\n<p>To <strong><em>retrieve the item from the sessionStorage</em></strong>, the method <code>getItem</code> must be used. The <code>getItem</code> method must be handed the key of the data you would like to retrieve:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>  Example: sessionStorage.getItem(\\\"mykey\\\");</code></pre>\\n      </div>\\n<p>You can remove an item from <code>sessionStorage</code> by using the <code>removeItem()</code> method. This method must be handed the key of the item to be removed:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>  Example: sessionStorage.removeItem(\\\"mykey\\\");</code></pre>\\n      </div>\\n<p>To clear the entire <code>sessionStorage</code>, you should use the <code>clear()</code> method on the <code>sessionStorage</code> object:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>  Example: sessionStorage.clear();</code></pre>\\n      </div>\\n<h2>Saving arrays to localStorage and sessionStorage</h2>\\n<p>You cannot just save single values to the <code>localStorage</code> and <code>sessionStorage</code>, but you can also save the content of an array.</p>\\n<p>In this example, we have an array with numbers:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>var ourArray =[1,2,3,4,5];</code></pre>\\n      </div>\\n<p>We can now save it to <code>localStorage</code> or <code>sessionStorage</code> using the <code>setItem()</code> method:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>localStorage.setItem(\\\"ourarraykey\\\",JSON.stringify(ourArray));</code></pre>\\n      </div>\\n<p>or, for <code>sessionStorage</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>sessionStorage.setItem(\\\"ourarraykey\\\",JSON.stringify(ourArray));</code></pre>\\n      </div>\\n<p>In order to be saved, the array must first be converted to a string. In the example shown above, we are using the <code>JSON.stringify</code> method to accomplish this.</p>\\n<p>When retrieving our data from the <code>localStorage</code> or <code>sessionStorage</code>, convert it back to an array:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>var storedArray = localStorage.getItem(\\\"ourarraykey\\\");\\nourArray = JSON.parse(storedArray);</code></pre>\\n      </div>\\n<p>or, for <code>sessionStorage</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>var storedArray = sessionStorage.getItem(\\\"ourarraykey\\\");\\nourArray = JSON.parse(storedArray);</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/miscellaneous/store-data-in-web-browsers-storage/\"},\"frontmatter\":{\"title\":\"Store Data in Web Browsers Storage\"}}},\"pathContext\":{\"slug\":\"/miscellaneous/store-data-in-web-browsers-storage/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---miscellaneous-store-data-in-web-browsers-storage-cc6af1c2a5d032b433ff.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>In order to manage data handled by your web application, you do not necessarily need a database. The respective Browser Storage features are supported by Chrome (version 4 and higher), Mozilla Firefox (version 3.5 and higher) and Internet Explorer (version 8 and higher), and a range of other browsers including those of iOS and Android.</p>\\n<p>There are two main possibilities for browser storage:</p>\\n<h2>1. localStorage</h2>\\n<p>Any content/data saved to the <code>localStorage</code> object will be available after the browser has been restarted (closed and opened again). In order to <strong><em>save an item</em></strong> to <code>localStorage</code>, you can use the method <code>setItem()</code>. This method must be handed a key and a value.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Example: localStorage.setItem(\\\"mykey\\\",\\\"myvalue\\\");</code></pre>\\n      </div>\\n<p>To <strong><em>retrieve the item from the localStorage</em></strong>, the method <code>getItem</code> must be used. The <code>getItem</code> method must be handed the key of the data you would like to retrieve:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>  Example: localStorage.getItem(\\\"mykey\\\");</code></pre>\\n      </div>\\n<p>You can remove an item from <code>localStorage</code> by using the <code>removeItem()</code> method. This method must be handed the key of the item to be removed:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>  Example: localStorage.removeItem(\\\"mykey\\\");</code></pre>\\n      </div>\\n<p>To clear the entire <code>localStorage</code>, you should use the <code>clear()</code> method on the <code>localStorage</code> object:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>  Example: localStorage.clear();</code></pre>\\n      </div>\\n<h2>2. sessionStorage</h2>\\n<p>Items saved in the <code>sessionStorage</code> object will remain until the browser is closed by the user. Then, the storage will be cleared.</p>\\n<p>You can save an item to <code>sessionStorage</code>, please use the method <code>setItem()</code> on the <code>sessionStorage</code> object:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Example: sessionStorage.setItem(\\\"mykey\\\",\\\"myvalue\\\");</code></pre>\\n      </div>\\n<p>To <strong><em>retrieve the item from the sessionStorage</em></strong>, the method <code>getItem</code> must be used. The <code>getItem</code> method must be handed the key of the data you would like to retrieve:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>  Example: sessionStorage.getItem(\\\"mykey\\\");</code></pre>\\n      </div>\\n<p>You can remove an item from <code>sessionStorage</code> by using the <code>removeItem()</code> method. This method must be handed the key of the item to be removed:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>  Example: sessionStorage.removeItem(\\\"mykey\\\");</code></pre>\\n      </div>\\n<p>To clear the entire <code>sessionStorage</code>, you should use the <code>clear()</code> method on the <code>sessionStorage</code> object:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>  Example: sessionStorage.clear();</code></pre>\\n      </div>\\n<h2>Saving arrays to localStorage and sessionStorage</h2>\\n<p>You cannot just save single values to the <code>localStorage</code> and <code>sessionStorage</code>, but you can also save the content of an array.</p>\\n<p>In this example, we have an array with numbers:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>var ourArray =[1,2,3,4,5];</code></pre>\\n      </div>\\n<p>We can now save it to <code>localStorage</code> or <code>sessionStorage</code> using the <code>setItem()</code> method:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>localStorage.setItem(\\\"ourarraykey\\\",JSON.stringify(ourArray));</code></pre>\\n      </div>\\n<p>or, for <code>sessionStorage</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>sessionStorage.setItem(\\\"ourarraykey\\\",JSON.stringify(ourArray));</code></pre>\\n      </div>\\n<p>In order to be saved, the array must first be converted to a string. In the example shown above, we are using the <code>JSON.stringify</code> method to accomplish this.</p>\\n<p>When retrieving our data from the <code>localStorage</code> or <code>sessionStorage</code>, convert it back to an array:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>var storedArray = localStorage.getItem(\\\"ourarraykey\\\");\\nourArray = JSON.parse(storedArray);</code></pre>\\n      </div>\\n<p>or, for <code>sessionStorage</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>var storedArray = sessionStorage.getItem(\\\"ourarraykey\\\");\\nourArray = JSON.parse(storedArray);</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/miscellaneous/store-data-in-web-browsers-storage/\"},\"frontmatter\":{\"title\":\"Store Data in Web Browsers Storage\"}}},\"pathContext\":{\"slug\":\"/miscellaneous/store-data-in-web-browsers-storage/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/miscellaneous-store-data-in-web-browsers-storage.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/miscellaneous-store-data-in-web-browsers-storage.json\n// module chunks = 15579543961625470000"],"sourceRoot":""}