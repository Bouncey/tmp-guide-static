{"version":3,"sources":["webpack:///path---html-block-and-inline-elements-3cee2674e96bfadce1e9.js","webpack:///./.cache/json/html-block-and-inline-elements.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/html-block-and-inline-elements.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,wFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,o8DAA87CC,QAAyhBC,KAAA,oCAA0CC,aAAgBC,MAAA,+BAAsCC,aAAgBH,KAAA","file":"path---html-block-and-inline-elements-3cee2674e96bfadce1e9.js","sourcesContent":["webpackJsonp([16452557637181495000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/html-block-and-inline-elements.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Block and Inline Elements</h2>\\n<p>Let us understand them using below examples :</p>\\n<h4>Code Sample with Output :</h4>\\n<p><img src=\\\"https://user-images.githubusercontent.com/16048167/31070017-6f2cf0a2-a77c-11e7-9de6-110b9d0b488d.PNG\\\" alt=\\\"Block Output\\\"></p>\\n<h4>Block-Level Element :</h4>\\n<p>A Block-level element occupies the entire space of the parent(container) such as <code>&#x3C;div></code> and <code>&#x3C;p></code> in the example .</p>\\n<p>You would have also noticed that both <code>&#x3C;div></code> and <code>&#x3C;p></code> start from a new line each time, forming a <strong>block-like</strong> structure. </p>\\n<p>Yes, you got it right.All the block-level elements behave the same.</p>\\n<p>Some of the <strong>block-level elements</strong> are <code>&#x3C;div></code>,<code>&#x3C;p></code>,<code>&#x3C;article></code>,<code>&#x3C;section></code>,<code>&#x3C;figure></code>,<code>&#x3C;footer></code> etc.</p>\\n<h4>Inline Element :</h4>\\n<p>Inline as the name says “included as a part of the main text and not as a separate section”. Inline elements occupy the space as needed within the space defined by the main element.</p>\\n<p>Yes, you are right again. They don’t start from a new line as seen in the example below.</p>\\n<p>Some of the <strong>inline elements</strong> are <code>&#x3C;a></code>,<code>&#x3C;span></code>,<code>&#x3C;img></code>,<code>&#x3C;code></code>,<code>&#x3C;cite></code>,<code>&#x3C;button></code>,<code>&#x3C;input></code> etc.</p>\\n<h4>Code Sample with Output :</h4>\\n<p><img src=\\\"https://user-images.githubusercontent.com/16048167/31069389-e1e3fc10-a779-11e7-86d2-6685e0061f52.png\\\" alt=\\\"Inline Output\\\"></p>\\n<p><strong><em>Note</em></strong> : Block-level elements can only contain inline elements, not the other way round.</p>\\n<h4>More Information:</h4>\\n<p>Please refer <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements#Block-level_vs._inline' target='_blank' rel='nofollow'>Mozilla Docs</a></p>\",\"fields\":{\"slug\":\"/html/block-and-inline-elements/\"},\"frontmatter\":{\"title\":\"Block and Inline Elements\"}}},\"pathContext\":{\"slug\":\"/html/block-and-inline-elements/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---html-block-and-inline-elements-3cee2674e96bfadce1e9.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Block and Inline Elements</h2>\\n<p>Let us understand them using below examples :</p>\\n<h4>Code Sample with Output :</h4>\\n<p><img src=\\\"https://user-images.githubusercontent.com/16048167/31070017-6f2cf0a2-a77c-11e7-9de6-110b9d0b488d.PNG\\\" alt=\\\"Block Output\\\"></p>\\n<h4>Block-Level Element :</h4>\\n<p>A Block-level element occupies the entire space of the parent(container) such as <code>&#x3C;div></code> and <code>&#x3C;p></code> in the example .</p>\\n<p>You would have also noticed that both <code>&#x3C;div></code> and <code>&#x3C;p></code> start from a new line each time, forming a <strong>block-like</strong> structure. </p>\\n<p>Yes, you got it right.All the block-level elements behave the same.</p>\\n<p>Some of the <strong>block-level elements</strong> are <code>&#x3C;div></code>,<code>&#x3C;p></code>,<code>&#x3C;article></code>,<code>&#x3C;section></code>,<code>&#x3C;figure></code>,<code>&#x3C;footer></code> etc.</p>\\n<h4>Inline Element :</h4>\\n<p>Inline as the name says “included as a part of the main text and not as a separate section”. Inline elements occupy the space as needed within the space defined by the main element.</p>\\n<p>Yes, you are right again. They don’t start from a new line as seen in the example below.</p>\\n<p>Some of the <strong>inline elements</strong> are <code>&#x3C;a></code>,<code>&#x3C;span></code>,<code>&#x3C;img></code>,<code>&#x3C;code></code>,<code>&#x3C;cite></code>,<code>&#x3C;button></code>,<code>&#x3C;input></code> etc.</p>\\n<h4>Code Sample with Output :</h4>\\n<p><img src=\\\"https://user-images.githubusercontent.com/16048167/31069389-e1e3fc10-a779-11e7-86d2-6685e0061f52.png\\\" alt=\\\"Inline Output\\\"></p>\\n<p><strong><em>Note</em></strong> : Block-level elements can only contain inline elements, not the other way round.</p>\\n<h4>More Information:</h4>\\n<p>Please refer <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements#Block-level_vs._inline' target='_blank' rel='nofollow'>Mozilla Docs</a></p>\",\"fields\":{\"slug\":\"/html/block-and-inline-elements/\"},\"frontmatter\":{\"title\":\"Block and Inline Elements\"}}},\"pathContext\":{\"slug\":\"/html/block-and-inline-elements/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/html-block-and-inline-elements.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/html-block-and-inline-elements.json\n// module chunks = 16452557637181495000"],"sourceRoot":""}