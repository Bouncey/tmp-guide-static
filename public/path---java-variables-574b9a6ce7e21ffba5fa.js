webpackJsonp([0xd1ad7619f7c42000],{"./node_modules/json-loader/index.js!./.cache/json/java-variables.json":function(e,a){e.exports={data:{markdownRemark:{html:'<h1>Variables</h1>\n<p>Variables store values. They are the most basic entity used to store data such as text, numbers, etc. in a program. </p>\n<p>In <a href=\'https://github.com/FreeCodeCamp/FreeCodeCamp/wiki/Java\' target=\'_blank\' rel=\'nofollow\'>Java</a>, variables are <a href=\'https://en.wikipedia.org/wiki/Strong_and_weak_typing#Definitions_of_.22strong.22_or_.22weak.22\' target=\'_blank\' rel=\'nofollow\'><em>strongly typed</em></a>, which means you have to define the type for each variable whenever you declare it. Otherwise, the compiler will throw an error at <a href=\'https://en.wikipedia.org/wiki/Compile_time\' target=\'_blank\' rel=\'nofollow\'>compile time</a>. Therefore, each variable has an associated ’<a href=\'https://guide.freecodecamp.org/java/data-types\' target=\'_blank\' rel=\'nofollow\'>data-type</a>’ of one of the following:</p>\n<ul>\n<li>Primitive Type: <code>int</code>, <code>short</code>, <code>char</code>, <code>long</code>, <code>boolean</code>, <code>byte</code>, <code>float</code>, <code>double</code></li>\n<li>Wrapper Type: <code>Integer</code>, <code>Short</code>, <code>Char</code>, <code>Long</code>, <code>Boolean</code>, <code>Byte</code>, <code>Float</code>, <code>Double</code></li>\n<li>Reference Type: <code>String</code>, <code>StringBuilder</code>, <code>Calendar</code>, <code>ArrayList</code>, etc.</li>\n</ul>\n<p>You may have noticed that the <strong>Wrapper Type</strong> consists of types spelled exactly like the <strong>Primitive Type</strong>, except for the capitalised alphabet in the begining (like the <strong>Reference Type</strong>). This is because the Wrapper Types are actually a part of the more general Reference Types, but <i>closely linked</i> with their primitive counterparts via <a href=\'https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html\' target=\'_blank\' rel=\'nofollow\'>autoboxing and unboxing</a>. For now, you just need to know that such a ‘Wrapper Type’ exists.</p>\n<p>Typically, you can <i>declare</i> (i.e., create) variables as per the following syntax: &#x3C;<i>data-type</i>> &#x3C;<i>variableName</i>>;</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token comment" spellcheck="true">// Primitive Data Type</span>\n<span class="token keyword">int</span> i<span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// Reference Data Type</span>\nFloat myFloat<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>You can <i>assign</i> a value to the variable either simultaneously when you are declaring it (which is called <i>initialisation</i>), or anywhere in the code after you have declared it. The symbol <strong>=</strong> is used for the same.</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token comment" spellcheck="true">// Initialise the variable of Primitive Data Type \'int\' to store the value 10</span>\n<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">//Variables can also be declared in one statement, and assigned values later.</span>\n<span class="token keyword">int</span> j<span class="token punctuation">;</span>\nj <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n\n<span class="token comment" spellcheck="true">// Initialise the variable of Reference Data Type \'Float\' to refer to a \'Float\' object containing value 10.0</span>\nFloat myFloat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>As evident from the above example, variables of Primitive type behave slightly differently from variables of Reference (&#x26; Wrapper) type - while Primitive variables <i>store</i> the actual value, Reference variables <i>refer to</i> an ‘object’ containing the actual value.\nYou can find out more in the sections linked below.</p>\n<h1>Other Resources</h1>\n<ul>\n<li><a href=\'https://guide.freecodecamp.org/java/data-types\' target=\'_blank\' rel=\'nofollow\'>Data Types</a></li>\n<li><a href=\'https://guide.freecodecamp.org/java/classes-and-objects\' target=\'_blank\' rel=\'nofollow\'>Classes and Objects</a></li>\n</ul>',fields:{slug:"/java/variables/"},frontmatter:{title:"Variables"}}},pathContext:{slug:"/java/variables/"}}}});
//# sourceMappingURL=path---java-variables-574b9a6ce7e21ffba5fa.js.map