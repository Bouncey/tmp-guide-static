{"version":3,"sources":["webpack:///path---miscellaneous-restrict-access-to-authenticated-users-only-3fc49b38dd71c6d7d457.js","webpack:///./.cache/json/miscellaneous-restrict-access-to-authenticated-users-only.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/miscellaneous-restrict-access-to-authenticated-users-only.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,mHACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,84BAA0qBC,QAAqPC,KAAA,+DAAqEC,aAAgBC,MAAA,iDAAwDC,aAAgBH,KAAA","file":"path---miscellaneous-restrict-access-to-authenticated-users-only-3fc49b38dd71c6d7d457.js","sourcesContent":["webpackJsonp([15701461090807806000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/miscellaneous-restrict-access-to-authenticated-users-only.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Let’s say you have a route that you want to restrict to logged-in users; maybe you have a <code>/profile</code> page that lets your users fill in some information about themselves, but it wouldn’t work if they weren’t logged in. Open <strong>/client/app/profile/profile.js</strong>, and add <code>authenticate: true</code> to the options passed to <em>$routeProvider.when</em> like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>    $routeProvider\\n      .when('/profile', {\\n        templateUrl: 'app/profile/profile.html',\\n        controller: 'ProfileCtrl',\\n        authenticate: true // restrict to authenticated users\\n      });</code></pre>\\n      </div>\\n<p>This way, if the user isn’t authenticated when they try to access the <code>/profile</code> page, they’ll be redirected to your login screen to authenticate before continuing to their profile page.</p>\",\"fields\":{\"slug\":\"/miscellaneous/restrict-access-to-authenticated-users-only/\"},\"frontmatter\":{\"title\":\"Restrict Access to Authenticated Users Only\"}}},\"pathContext\":{\"slug\":\"/miscellaneous/restrict-access-to-authenticated-users-only/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---miscellaneous-restrict-access-to-authenticated-users-only-3fc49b38dd71c6d7d457.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Let’s say you have a route that you want to restrict to logged-in users; maybe you have a <code>/profile</code> page that lets your users fill in some information about themselves, but it wouldn’t work if they weren’t logged in. Open <strong>/client/app/profile/profile.js</strong>, and add <code>authenticate: true</code> to the options passed to <em>$routeProvider.when</em> like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>    $routeProvider\\n      .when('/profile', {\\n        templateUrl: 'app/profile/profile.html',\\n        controller: 'ProfileCtrl',\\n        authenticate: true // restrict to authenticated users\\n      });</code></pre>\\n      </div>\\n<p>This way, if the user isn’t authenticated when they try to access the <code>/profile</code> page, they’ll be redirected to your login screen to authenticate before continuing to their profile page.</p>\",\"fields\":{\"slug\":\"/miscellaneous/restrict-access-to-authenticated-users-only/\"},\"frontmatter\":{\"title\":\"Restrict Access to Authenticated Users Only\"}}},\"pathContext\":{\"slug\":\"/miscellaneous/restrict-access-to-authenticated-users-only/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/miscellaneous-restrict-access-to-authenticated-users-only.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/miscellaneous-restrict-access-to-authenticated-users-only.json\n// module chunks = 15701461090807806000"],"sourceRoot":""}