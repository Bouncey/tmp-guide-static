webpackJsonp([0xe21a76380343c000],{"./node_modules/json-loader/index.js!./.cache/json/javascript-loops-labeled-statement.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h2>Labeled Statement</h2>\n<p>The <strong>Labeled Statement</strong> is used with the <code>break</code> and <code>continue</code> statements and serves to identify the statement to which the <code>break</code> and <code>continue</code> statements apply.</p>\n<h3>Syntax</h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>labelname<span class="token punctuation">:</span>\n  statements\n</code></pre>\n      </div>\n<h3>Usage</h3>\n<p>Without the use of a <code>labeled</code> statement the <code>break</code> statement can only break out of a loop or a <code>switch</code> statement. Using a <code>labeled</code> statement allows <code>break</code> to jump out of any code block.</p>\n<h4>Example</h4>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>foo<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"This prints:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">break</span> foo<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"This will never print."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Because execution jumps to here!"</span><span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true">/* output\nThis prints:\nBecause execution jumps to here! */</span>\n</code></pre>\n      </div>\n<p>When used with a <code>continue</code> statement the <code>labeled</code> statement allows you to skip a loop iteration, the advantage comes from being able to jump out from an inner loop to an outer one when you have nested loop statements. Without the use of a <code>labeled</code> statement you could only jump out of the existing loop iteration to the <code>next iteration of the same loop.</code></p>\n<h4>Example</h4>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment" spellcheck="true">// without labeled statement, when j==i inner loop jumps to next iteration</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">===</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">continue</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"j="</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">/* output\ni=0 (note j=0 is missing)\nj=1\nj=2\ni=1\nj=0 (note j=1 is missing)\nj=2\ni=2\nj=0\nj=1 (note j=2 is missing)\n*/</span>\n\n<span class="token comment" spellcheck="true">// using a labeled statement we can jump to the outer (i) loop instead</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  outer<span class="token punctuation">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">===</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">continue</span> outer<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"j="</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">/*\ni=0 (j only logged when less than i)\ni=1\nj=0\ni=2\nj=0\nj=1\n*/</span>\n</code></pre>\n      </div>\n<h3>More Information:</h3>\n<p><a href=\'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\' target=\'_blank\' rel=\'nofollow\'>MDN</a></p>',fields:{slug:"/javascript/loops/labeled-statement/"},frontmatter:{title:"Labeled Statement"}}},pathContext:{slug:"/javascript/loops/labeled-statement/"}}}});
//# sourceMappingURL=path---javascript-loops-labeled-statement-719eb6a2c7d19eac356c.js.map