webpackJsonp([0xcb42c64d9aff9000],{"./node_modules/json-loader/index.js!./.cache/json/c-passing-pointers-to-function.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h1>Passing pointers to funtions</h1>\n<p>C allows passing a pointer to a function. To achieve this, simply declare the parameters as pointer type.\nThis way of passing references to functions is useful when you want to modify variables that are out of the scope of that function.</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token comment" spellcheck="true">// incorrect implementation of swap</span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> c<span class="token punctuation">;</span>\n    c <span class="token operator">=</span> a<span class="token punctuation">;</span>\n    a <span class="token operator">=</span> b<span class="token punctuation">;</span>\n    b <span class="token operator">=</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> var1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> var2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    <span class="token function">swap</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value of var1: %d \\n"</span><span class="token punctuation">,</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints 10</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value of var2: %d \\n"</span><span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints 20</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>In this code example the swap function does not work as intended since it swaps two variables that exist only inside the scope of that function. To fix this we make a modification as shown below.</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token comment" spellcheck="true">// correct implementation of swap</span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>\n    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>\n    <span class="token operator">*</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> var1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> var2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>var1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value of var1: %d \\n"</span><span class="token punctuation">,</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints 20</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value of var2: %d \\n"</span><span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints 10</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>In the second code example you were able to change the values of the variables only because you were constantly de-referencing a pointer within the function instead of trying to change the values directly</p>',fields:{slug:"/c/passing-pointers-to-function/"},frontmatter:{title:"Passing pointers to funtions"}}},pathContext:{slug:"/c/passing-pointers-to-function/"}}}});
//# sourceMappingURL=path---c-passing-pointers-to-function-7d70eb96b4e86f10876b.js.map