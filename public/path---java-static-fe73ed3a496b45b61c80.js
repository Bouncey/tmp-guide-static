webpackJsonp([20504873564355e4],{"./node_modules/json-loader/index.js!./.cache/json/java-static.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h1>Static</h1>\n<p>When you declare a variable or a method as static, it belongs to the class, rather than a specific instance.  This means that only one instance of a static member exists, even if you create multiple objects of the class, or if you donâ€™t create any. It will be shared by all objects.</p>\n<p><strong><em>Example:</em></strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> COUNT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    COUNT<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The <code>COUNT</code> variable will be shared by all objects of that class. When we create objects of our Counter class in main, and access the static variable.</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Counter c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Counter c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Counter<span class="token punctuation">.</span>COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment" spellcheck="true">// Outputs "2"</span>\n</code></pre>\n      </div>\n<p>The outout is 2, because the <code>COUNT</code> variable is static and gets incremented by one each time a new object of the Counter class is created.  You can also access the static variable using any object of that class, such as <code>c1.COUNT</code>.</p>',fields:{slug:"/java/static/"},frontmatter:{title:"Static"}}},pathContext:{slug:"/java/static/"}}}});
//# sourceMappingURL=path---java-static-fe73ed3a496b45b61c80.js.map