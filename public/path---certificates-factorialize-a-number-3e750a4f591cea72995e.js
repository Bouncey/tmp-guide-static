webpackJsonp([0xcee12d05c7da7800],{"./node_modules/json-loader/index.js!./.cache/json/certificates-factorialize-a-number.json":function(e,t){e.exports={data:{markdownRemark:{html:'<p><img src="//discourse-user-assets.s3.amazonaws.com/original/2X/d/dcf927a2e8c3beb7a9c28770153821982398bd99.jpg" alt="Recursion"></p>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/triangular_flag_on_post.png?v=3" title=":triangular_flag_on_post:" alt=":triangular_flag_on_post:" class="forum-image"> Remember to use <a><strong><code>Read-Search-Ask</code></strong></a> if you get stuck. Try to pair program <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/busts_in_silhouette.png?v=3" title=":busts_in_silhouette:" alt=":busts_in_silhouette:" class="forum-image"> and write your own code <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/pencil.png?v=3" title=":pencil:" alt=":pencil:" class="forum-image"></p>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/checkered_flag.png?v=3" title=":checkered_flag:" alt=":checkered_flag:" class="forum-image"> Problem Explanation:</h2>\n<p>Return the factorial of the provided integer. If the integer is represented with the letter n, a factorial is the product of all positive integers less than or equal to n.</p>\n<p>Factorials are often represented with the shorthand notation n!</p>\n<p>For example: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code></p>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" title=":speech_balloon:" alt=":speech_balloon:" class="forum-image"> Hint: 1</h2>\n<p>This one starts easily since <code>0! = 1</code>, so you can go ahead and simply <code>return 1</code> there.</p>\n<p>We can use that as an <code>if</code> in order to break the loop we’re going to create using a <strong>recursive function</strong>. It will check if the number you gave the function is 0 (which would be the end of your factorial chain). Functions “end” when they return anything. In fact, <strong>all</strong> functions without an explicit <code>return</code> statement will return <code>undefined</code>.</p>\n<p>This is also why <strong>instead</strong> of having <em>“finished”</em>, a function is always said to <em>“have returned”</em>. And now this…</p>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" title=":speech_balloon:" alt=":speech_balloon:" class="forum-image"> Hint: 2</h2>\n<p><strong>Understanding recursion</strong></p>\n<p>Recursion refers to a function repeating (calling) itself. In this case we are basically returning the given number (i.e. 5), multiplied by the function itself but this time the value passed to the <em>num</em> parameter is <code>num-1</code> (which initially translates to 4). The very function is going to <strong>run inside itself</strong> interesting, eh?</p>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" title=":speech_balloon:" alt=":speech_balloon:" class="forum-image"> Hint: 3</h2>\n<p><strong>Understanding the flow</strong></p>\n<p>The first <strong>returned</strong> value can be visualized better if you think about those parenthesis operations you did in secondary school where you do the math inside every parenthesis from inside out, bracket and square bracket until you get a final result (a total). This time it’s the same thing, look at the program flow:</p>\n<h3>During the first execution of the function:</h3>\n<p><a href=\'https://forum.freecodecamp.com/images/emoji/emoji_one/wink.png?v=3 ":wink:"\' target=\'_blank\' rel=\'nofollow\'><strong>num</strong> = 5]</p>\n<p>Is 5 <em>equal</em> to 1 or 0? <strong>No</strong> ---> Oki doki, let’s continue…</p>\n<p><strong>Returns:</strong></p>\n<p>(<strong>5</strong> <em>(</em>second execution<em>: <strong>4</strong> _(</em>third execution<em>: <strong>3</strong> _(</em>fourth execution_: <strong>2</strong> _<em>fifth execution</em>: <strong>1</strong>))))</p>\n<p>What it returns can be viewed as <code>(5*(4*(3*(2*1))))</code> or just <code>5 * 4 * 3 * 2 * 1</code>, and the function will return the result of that operation: <code>120</code>. Now, let’s check what the rest of the executions do:</p>\n<h3>During the rest of the executions:</h3>\n<p><strong>Second Execution</strong>: <em>num</em> = 5-1 = <strong>4</strong> -> is <em>num</em> 0 or 1? No  </p>\n<p>—> return the multiplication between 4 and the next result when <em>num</em> is now 4-1.</p>\n<p><strong>Third Execution</strong>: <em>num</em> = 4 - 1 = <strong>3</strong> -> is <em>num</em> 0 or 1? No  </p>\n<p>—> return the multiplication between 3 and the next result when <em>num</em> is now 3-1.</p>\n<p><strong>Fourth Execution</strong>: <em>num</em> = 3-1 = <strong>2</strong> -> is <em>num</em> 0 or 1? No  </p>\n<p>—> return the multiplication between 2 and the next result when <em>num</em> is now 2-1.</p>\n<p><strong>Fifth Execution</strong>: <em>num</em> = 2-1 = <strong>1</strong> -> is <em>num</em> 0 or 1? Yep  </p>\n<p>—> return <strong>1</strong>. And this is where the recursion stops because there are no more executions.</p>\n<p>Got it? ![:wink:</a></p>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h4>Relevant Links</h4>\n<ul>\n<li><a>JS Functions</a></li>\n<li><a href=\'https://www.youtube.com/watch?v=k7-N8R0-KY4\' target=\'_blank\' rel=\'nofollow\'>Recursion in JS</a></li>\n</ul>\n<h2>Spoiler Alert!</h2>\n<p><img src="//discourse-user-assets.s3.amazonaws.com/original/2X/2/2d6c412a50797771301e7ceabd554cef4edcd74d.gif" alt="warning sign"></p>\n<p><strong>Solution ahead!</strong></p>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/beginner.png?v=3" title=":beginner:" alt=":beginner:" class="forum-image"> Code Solution:</h2>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>function factorialize(num) {\n  if (num === 0) { return 1; }\n  return num * factorialize(num-1);\n}\n\nfactorialize(5);</code></pre>\n      </div>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CLjU/1\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<h2>Code Explanation:</h2>\n<p>Notice at the first line we have the terminal condition, i.e a condition to check the end of the recursion. If <code>num == 0</code>, then we return 1, i.e. effectively ending the recursion and informing the stack to propagate this value to the upper levels. If we do not have this condition, the recursion would go on until the stack space gets consumed, thereby resulting in a <a href=\'https://en.wikipedia.org/wiki/Stack_overflow\' target=\'_blank\' rel=\'nofollow\'>Stack Overflow</a>.</p>\n<h3>Relevant Links</h3>\n<ul>\n<li><a href=\'https://www.codecademy.com/en/courses/javascript-lesson-205/0/1\' target=\'_blank\' rel=\'nofollow\'>Recursion</a></li>\n<li><a href=\'https://en.wikipedia.org/wiki/Factorial\' target=\'_blank\' rel=\'nofollow\'>Factorialization</a></li>\n<li><a href=\'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators\' target=\'_blank\' rel=\'nofollow\'>Arithmetic Operators</a></li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/clipboard.png?v=3" title=":clipboard:" alt=":clipboard:" class="forum-image"> NOTES FOR CONTRIBUTIONS:</h2>\n<ul>\n<li><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3" title=":warning:" alt=":warning:" class="forum-image"> <strong>DO NOT</strong> add solutions that are similar to any existing solutions. If you think it is <strong><em>similar but better</em></strong>, then try to merge (or replace) the existing similar solution.</li>\n<li>Add an explanation of your solution.</li>\n<li>Categorize the solution in one of the following categories — <strong>Basic</strong>, <strong>Intermediate</strong> and <strong>Advanced</strong>. <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/traffic_light.png?v=3" title=":traffic_light:" alt=":traffic_light:" class="forum-image"></li>\n<li>Please add your username only if you have added any <strong>relevant main contents</strong>. (<img src="https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3" title=":warning:" alt=":warning:" class="forum-image"> <strong><em>DO NOT</em></strong> <em>remove any existing usernames</em>)</li>\n</ul>\n<blockquote>\n<p>See <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/point_right.png?v=3" title=":point_right:" alt=":point_right:" class="forum-image"> <a href=\'http://forum.freecodecamp.com/t/algorithm-article-template/14272\' target=\'_blank\' rel=\'nofollow\'><strong><code>Wiki Challenge Solution Template</code></strong></a> for reference.</p>\n</blockquote>',fields:{slug:"/certificates/factorialize-a-number/"},frontmatter:{title:"Factorialize a Number"}}},pathContext:{slug:"/certificates/factorialize-a-number/"}}}});
//# sourceMappingURL=path---certificates-factorialize-a-number-3e750a4f591cea72995e.js.map