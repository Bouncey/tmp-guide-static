{"version":3,"sources":["webpack:///path---miscellaneous-make-useful-apis-in-angularjs-b0efb5f29197dacd7f7e.js","webpack:///./.cache/json/miscellaneous-make-useful-apis-in-angularjs.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/miscellaneous-make-useful-apis-in-angularjs.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,qGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,m0DAAqrCC,QAAqqBC,KAAA,iDAAuDC,aAAgBC,MAAA,mCAA0CC,aAAgBH,KAAA","file":"path---miscellaneous-make-useful-apis-in-angularjs-b0efb5f29197dacd7f7e.js","sourcesContent":["webpackJsonp([13443213426998102000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/miscellaneous-make-useful-apis-in-angularjs.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>There are two more things you have to do before this to be useful to you, however. Say you want to show all the <em>things</em> associated with the username requested with that page: you must first</p>\\n<ol>\\n<li>\\n<p>Have a “username” or “owner” field in your <em>thing</em> schema at <code>/server/api/thing/thing.model.js</code></p>\\n</li>\\n<li>\\n<p>Write a custom route in <code>/server/api/thing/index.js</code> to catch a request for a specific username. The request from your frontend might look something like:</p>\\n<p>$http.get(‘/api/things/’ + username).success( … )</p>\\n</li>\\n</ol>\\n<p>so you’ll add a line into your <code>index.js</code> like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>router.get('/:user', controller.indexUser);</code></pre>\\n      </div>\\n<p>and then in <code>thing.controller.js</code> you’ll write an <em>exports.indexUser</em> function like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>exports.indexUser = function(req, res) {\\n    Thing.find({owner:req.params.user}, function (err, things) {\\n        if(err) return res.send(500, err);\\n        res.json(200, things);\\n    });\\n};</code></pre>\\n      </div>\\n<p>Warning!!! this method only works right if usernames are absolutely unique between users. The default authentication system that comes with the angular-fullstack generator does not have unique usernames, so you’re probably better off using the <em>user.</em>id_ field to determine unique users in your database for now, unless you want to implement unique user names yourself by altering your <code>/api/user/user.model.js</code>, <code>/api/user/user.controller.js</code>, and your <code>/app/client/account/signup/signup.controller.js</code>. Thankfully, you should know how to go about doing all that after reading this guide!</p>\",\"fields\":{\"slug\":\"/miscellaneous/make-useful-apis-in-angularjs/\"},\"frontmatter\":{\"title\":\"Make Useful Apis in Angularjs\"}}},\"pathContext\":{\"slug\":\"/miscellaneous/make-useful-apis-in-angularjs/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---miscellaneous-make-useful-apis-in-angularjs-b0efb5f29197dacd7f7e.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>There are two more things you have to do before this to be useful to you, however. Say you want to show all the <em>things</em> associated with the username requested with that page: you must first</p>\\n<ol>\\n<li>\\n<p>Have a “username” or “owner” field in your <em>thing</em> schema at <code>/server/api/thing/thing.model.js</code></p>\\n</li>\\n<li>\\n<p>Write a custom route in <code>/server/api/thing/index.js</code> to catch a request for a specific username. The request from your frontend might look something like:</p>\\n<p>$http.get(‘/api/things/’ + username).success( … )</p>\\n</li>\\n</ol>\\n<p>so you’ll add a line into your <code>index.js</code> like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>router.get('/:user', controller.indexUser);</code></pre>\\n      </div>\\n<p>and then in <code>thing.controller.js</code> you’ll write an <em>exports.indexUser</em> function like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>exports.indexUser = function(req, res) {\\n    Thing.find({owner:req.params.user}, function (err, things) {\\n        if(err) return res.send(500, err);\\n        res.json(200, things);\\n    });\\n};</code></pre>\\n      </div>\\n<p>Warning!!! this method only works right if usernames are absolutely unique between users. The default authentication system that comes with the angular-fullstack generator does not have unique usernames, so you’re probably better off using the <em>user.</em>id_ field to determine unique users in your database for now, unless you want to implement unique user names yourself by altering your <code>/api/user/user.model.js</code>, <code>/api/user/user.controller.js</code>, and your <code>/app/client/account/signup/signup.controller.js</code>. Thankfully, you should know how to go about doing all that after reading this guide!</p>\",\"fields\":{\"slug\":\"/miscellaneous/make-useful-apis-in-angularjs/\"},\"frontmatter\":{\"title\":\"Make Useful Apis in Angularjs\"}}},\"pathContext\":{\"slug\":\"/miscellaneous/make-useful-apis-in-angularjs/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/miscellaneous-make-useful-apis-in-angularjs.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/miscellaneous-make-useful-apis-in-angularjs.json\n// module chunks = 13443213426998102000"],"sourceRoot":""}