webpackJsonp([0xffabf06a3ef4d800],{"./node_modules/json-loader/index.js!./.cache/json/python-basic-operators.json":function(t,e){t.exports={data:{markdownRemark:{html:'<h2>Basic Operators</h2>\n<p>Operators are symbols which tells the interpreter to do a specific operation (viz arithmetic, comparison, logical, etc.)</p>\n<p>The different types of operators in Python are listed below:</p>\n<ol>\n<li>Arithmetic Operators</li>\n<li>Relational Operators</li>\n<li>Bitwise Operators</li>\n<li>Assignment Operators</li>\n<li>Logical Operators</li>\n<li>Membership Operators</li>\n<li>Identity Operators</li>\n</ol>\n<h4>Arithmetic Operators</h4>\n<p>An arithmetic operator takes two operands as input, performs a calculation and returns the result. </p>\n<p>Consider the expression, <b>“a = 2 + 3”</b>. Here, <code>2</code> and <code>3</code> are the <i>operands</i> and <code>+</code> is the <i>arithmetic operator</i>. The result of the operation is stored in the variable a.</p>\n<table style="width:100%">\n  <tr>\n    <th>Operator</th>\n    <th>Description</th> \n    <th>Usage</th>\n  </tr>\n  <tr>\n    <td align="center">+</td>\n    <td>Performs Addition on the operands</td> \n    <td>12 + 3 = 15</td>\n  </tr>\n  <tr>\n    <td align="center">-</td>\n    <td>Performs Subtraction on the operands. <br>Subtracts the right operand from the left operand</td> \n    <td>12 - 3 = 9</td>\n  </tr>\n  <tr>\n    <td align="center">*</td>\n    <td>Performs Multiplication on the operands</td> \n    <td>12 * 3 = 36</td>\n  </tr>\n  <tr>\n    <td align="center">/</td>\n    <td>Performs Division on the operands. <br>Divides the left operand by the right operand</td> \n    <td>12 / 3 = 4</td>\n  </tr>\n  <tr>\n    <td align="center">%</td>\n    <td>Performs a Modulus on the operands. <br>Returns the remainder obtained while dividing the left operand by the right operand</td> \n    <td>16 % 3 = 1</td>\n  </tr>\n  <tr>\n    <td align="center">**</td>\n    <td>Performs an Exponentiation operation. <br>The left operand is raised to the power of right operand</td> \n    <td>12 ** 3 = 1728</td>\n  </tr>\n  <tr>\n    <td align="center">//</td>\n    <td>Performs a Floor Division operation. <br>Returns the integral part of the quotient obtained after diving the left operand by the right operand</td> \n    <td>18 // 5 = 3</td>\n  </tr>\n</table>\n<p>Note: To get the result in floating type, one of the operands must also be of float type.</p>\n<h4>Relational Operators</h4>\n<p>A relational operator is used to compare two operands to decide a relation between them. It returns a boolean value based on the condition.</p>\n<table style="width:100%">\n  <tr>\n    <th>Operator</th>\n    <th>Description</th> \n    <th>Usage</th>\n  </tr>\n  <tr>\n    <td align="center">></td>\n    <td>Returns True if the left operand is greater than the right operand<br>Returns False otherwise</td> \n    <td>12 > 3 returns True</td>\n  </tr>\n  <tr>\n    <td align="center"><</td>\n    <td>Returns True if the right operand is greater than the left operand<br>Returns False otherwise</td> \n    <td>12 < 3 returns False</td>\n  </tr>\n  <tr>\n    <td align="center">==</td>\n    <td>Returns True if both the operands are equal<br>Returns False otherwise</td> \n    <td>12 == 3 returns False</td>\n  </tr>\n  <tr>\n    <td align="center">>=</td>\n    <td>Returns True if the left operand is greater than or equal to the right operand<br>Returns False otherwise</td> \n    <td>12 >= 3 returns True</td>\n  </tr>\n  <tr>\n    <td align="center"><=</td>\n    <td>Returns True if the right operand is greater than or equal to the left operand<br>Returns False otherwise</td> \n    <td>12 <= 3 returns False</td>\n  </tr>\n  <tr>\n    <td align="center">!=</td>\n    <td>Returns True if both the operands are not equal<br>Returns False otherwise</td> \n    <td>12 != 3 returns True</td>\n  </tr>\n</table>\n<h4>Bitwise Operators</h4>\n<p>A bitwise operator performs operations on the operands bit by bit</p>\n<p>Consider a = 2 (in binary notation, 10) and b = 3 (in binary notation, 11) for the below usages</p>\n<table style="width:100%">\n  <tr>\n    <th>Operator</th>\n    <th>Description</th> \n    <th>Usage</th>\n  </tr>\n  <tr>\n    <td align="center">&</td>\n    <td>Performs bitwise AND operation on the operands</td> \n    <td>a & b = 2<br>Binary: 10 & 11 = 10</td>\n  </tr>\n  <tr>\n    <td align="center">|</td>\n    <td>Performs bitwise OR operation on the operands</td> \n    <td>a | b = 3<br>Binary: 10 | 11 = 11</td>\n  </tr>\n  <tr>\n    <td align="center">^</td>\n    <td>Performs bitwise XOR operation on the operands</td> \n    <td>a ^ b = 1<br>Binary: 10 ^ 11 = 01</td>\n  </tr>\n  <tr>\n    <td align="center">~</td>\n    <td>Performs bitwise NOT operation on the operand<br>Flips every bit in the operand</td> \n    <td>~a = -3<br>Binary: ~(00000010) = (11111101)</td>\n  </tr>\n  <tr>\n    <td align="center">>></td>\n    <td>Performs a bitwise right shift. Shifts the bits of left operand, right by the number of bits specified as the right operand </td> \n    <td>a >> b = 0<br>Binary: 00000010 >> 00000011 = 0</td>\n  </tr>\n  <tr>\n    <td align="center"><<</td>\n    <td>Performs a bitwise left shift. Shifts the bits of left operand, left by the number of bits specified as the right operand </td> \n    <td>a << b = 16<br>Binary: 00000010 << 00000011 = 00001000</td>\n  </tr>\n</table>\n<h4>Assignment Operators</h4>\n<p>An assignment operator is used to assign values to a variable. This is usually combined with other operators (like arithmetic, bitwise) where the operation is performed on the operands and the result is assigned to the left operand.</p>\n<p>Consider the following examples,\n<br>\n<b>a = 18</b>. Here <code>=</code> is an assignment operator, and the result is stored in variable a.\n<br>\n<b>a += 10</b>. Here <code>+=</code> is an assignment operator, and the result is stored in variable a. This is same as a = a + 10.</p>\n<table style="width:100%">\n  <tr>\n    <th>Operator</th>\n    <th>Usage</th>\n  </tr>\n  <tr>\n    <td align="center">=</td>\n    <td>a = 5. The value 5 is assigned to the variable a</td>\n  </tr>\n  <tr>\n    <td align="center">+=</td>\n    <td>a += 5 is equivalent to a = a + 5</td>\n  </tr>\n  <tr>\n    <td align="center">-=</td>\n    <td>a -= 5 is equivalent to a = a - 5</td>\n  </tr>\n  <tr>\n    <td align="center">*=</td>\n    <td>a *= 3 is equivalent to a = a * 3</td>\n  </tr>\n  <tr>\n    <td align="center">/=</td>\n    <td>a /= 3 is equivalent to a = a / 3</td>\n  </tr>\n  <tr>\n    <td align="center">%=</td>\n    <td>a %= 3 is equivalent to a = a % 3</td>\n  </tr>\n  <tr>\n    <td align="center">**=</td>\n    <td>a **= 3 is equivalent to a = a ** 3</td>\n  </tr>\n  <tr>\n    <td align="center">//=</td>\n    <td>a //= 3 is equivalent to a = a // 3</td>\n  </tr>\n  <tr>\n    <td align="center">&=</td>\n    <td>a &= 3 is equivalent to a = a & 3</td>\n  </tr>\n  <tr>\n    <td align="center">|=</td>\n    <td>a |= 3 is equivalent to a = a | 3</td>\n  </tr>\n  <tr>\n    <td align="center">^=</td>\n    <td>a ^= 3 is equivalent to a = a ^ 3</td>\n  </tr>\n  <tr>\n    <td align="center">>>=</td>\n    <td>a >>= 3 is equivalent to a = a >> 3</td>\n  </tr>\n  <tr>\n    <td align="center"><<=</td>\n    <td>a <<= 3 is equivalent to a = a << 3</td>\n  </tr>\n</table>\n<h4>Logical Operators</h4>\n<p>A logical operator is used to make a decision based on multiple conditions. The logical operators used in Python are\n<code>and</code>, <code>or</code> and <code>not</code></p>\n<table style="width:100%">\n  <tr>\n    <th>Operator</th>\n    <th>Description</th>\n    <th>Usage</th>\n  </tr>\n  <tr>\n    <td align="center">and</td>\n    <td>Returns True if both the operands are True<br>Returns False otherwise</td>\n    <td>a and b</td>\n  </tr>\n  <tr>\n    <td align="center">or</td>\n    <td>Returns True if any one of the operands are True<br>Returns False otherwise</td>\n    <td>a or b</td>\n  </tr>\n  <tr>\n    <td align="center">not</td>\n    <td>Returns True if the operand is False<br>Returns False otherwise</td>\n    <td>not a</td>\n  </tr>\n  <tr>\n</table>\n<h4>Membership Operators</h4>\n<p>A membership operator is used to identify membership in any sequence (lists, strings, tuples).\n<br><code>in</code> and <code>not in</code> are membership operators</p>\n<p><br><code>in</code> returns True if the specified value is found in the sequence. Returns False otherwise.\n<br><code>not in</code> returns True if the specified value is not found in the sequence. Returns False otherwise.</p>\n<h6>Example Usage</h6>\n<div class="gatsby-highlight">\n      <pre class="language-py"><code>a = [1,2,3,4,5]\n  \n#Is 3 in the list a?\nprint 3 in a # prints True \n  \n#Is 12 not in list a?\nprint 12 not in a # prints True\n  \nstr = "Hello World"\n  \n#Does the string str contain World?\nprint "World" in str # prints True\n  \n#Does the string str contain world? (note: case sensitive)\nprint "world" in str # prints False  \n\nprint "code" not in str # prints True</code></pre>\n      </div>\n<h4>Identity Operators</h4>\n<p>An identity operator is used to check if two variables share the same memory location.\n<br><code>is</code> and <code>is not</code> are identity operators</p>\n<p><br><code>is</code> returns True if the operands refer to the same object. Returns False otherwise.\n<br><code>is not</code> returns True if the operands do not refer to the same object. Returns False otherwise.</p>\n<p>Please note that two values when equal, need not imply they are identical.</p>\n<h6>Example Usage</h6>\n<div class="gatsby-highlight">\n      <pre class="language-py"><code>a = 3\nb = 3  \nc = 4\nprint a is b # prints True\nprint a is not b # prints False\nprint a is not c # prints True\n\nstr1 = "FreeCodeCamp"\nstr2 = "FreeCodeCamp"\n\nprint str1 is str2 # prints True\nprint "Code" is str2 # prints False\n\na = [10,20,30]\nb = [10,20,30]\n\nprint a is b # prints False (since lists are mutable in Python)  </code></pre>\n      </div>',fields:{slug:"/python/basic-operators/"},frontmatter:{title:"Basic Operators"}}},pathContext:{slug:"/python/basic-operators/"}}}});
//# sourceMappingURL=path---python-basic-operators-bce2cc4eed7420d9b194.js.map