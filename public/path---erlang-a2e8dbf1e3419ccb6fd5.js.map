{"version":3,"sources":["webpack:///path---erlang-a2e8dbf1e3419ccb6fd5.js","webpack:///./.cache/json/erlang.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/erlang.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,gEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,k5OAA4zLC,QAA63DC,KAAA,YAAkBC,aAAgBC,MAAA,YAAmBC,aAAgBH,KAAA","file":"path---erlang-a2e8dbf1e3419ccb6fd5.js","sourcesContent":["webpackJsonp([2265178670458533400],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/erlang.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Erlang</h2>\\n<p>Erlang is a functional programming language, developed by Ericsson for use in telecom applications. Because they felt that it’s unacceptable for a telecom system to have any significant downtime, Erlang was built to be (among other things):</p>\\n<ul>\\n<li>distributed and fault-tolerant <em>(a piece of failing software or hardware should not bring the system down)</em></li>\\n<li>concurrent <em>(it can spawn many processes, each executing a small and well-defined piece of work, and isolated from one another but able to communicate via messaging)</em></li>\\n<li>hot-swappable <em>(code can be swapped into the system while it’s running, leading to high availability and minimal system downtime)</em></li>\\n</ul>\\n<h3>Syntax</h3>\\n<p>Erlang makes heavy use of <strong>recursion</strong>. Since data is immutable in Erlang, the use of <code>while</code> and <code>for</code> loops (where a variable needs to keep changing its value) is not allowed.</p>\\n<p>Here’s an example of recursion, showing how a function repeatedly strips the first letter from the front of a name and prints it, only stopping when the last letter has been encountered.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-erlang\\\"><code><span class=\\\"token operator\\\">-</span><span class=\\\"token function\\\">module</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token atom\\\">name</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token operator\\\">-</span><span class=\\\"token function\\\">export</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token atom\\\">print_name</span><span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token function\\\">print_name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">RemainingLetter</span> <span class=\\\"token punctuation\\\">|</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token atom\\\">io</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">format</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"~c~n\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">RemainingLetter</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">print_name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">FirstLetter</span> <span class=\\\"token punctuation\\\">|</span> <span class=\\\"token variable\\\">RestOfName</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token atom\\\">io</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">format</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"~c~n\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">FirstLetter</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">print_name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">RestOfName</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>> name:print_name(\\\"Mike\\\").\\nM\\ni\\nk\\ne\\nok</code></pre>\\n      </div>\\n<p>There is also a heavy emphasis on <strong>pattern-matching</strong>, which frequently eliminates the need for an <code>if</code> structure or <code>case</code> statement. In the following example, there are two matches for specific names, followed by a catch-all for any other names.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-erlang\\\"><code><span class=\\\"token operator\\\">-</span><span class=\\\"token function\\\">module</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token atom\\\">greeting</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token operator\\\">-</span><span class=\\\"token function\\\">export</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token atom\\\">say_hello</span><span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token function\\\">say_hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Mary\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token string\\\">\\\"Welcome back Mary!\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">say_hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Tom\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token string\\\">\\\"Howdy Tom.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">say_hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">Name</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token string\\\">\\\"Hello \\\"</span> <span class=\\\"token operator\\\">++</span> <span class=\\\"token variable\\\">Name</span> <span class=\\\"token operator\\\">++</span> <span class=\\\"token string\\\">\\\".\\\"</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>> greeting:say_hello(\\\"Mary\\\").\\n\\\"Welcome back Mary!\\\"\\n> greeting:say_hello(\\\"Tom\\\").\\n\\\"Howdy Tom.\\\"\\n> greeting:say_hello(\\\"Beth\\\").\\n\\\"Hello Beth.\\\"</code></pre>\\n      </div>\\n<h3>Try it out</h3>\\n<p>There are websites where you can try running Erlang commands without having to install anything locally, like these:</p>\\n<ul>\\n<li><a href=\\\"http://www.tryerlang.org/\\\">Give it a try! (a hands-on tutorial)</a></li>\\n<li><a href=\\\"https://www.tutorialspoint.com/compile_erlang_online.php\\\">TutorialsPoint CodingGround</a></li>\\n</ul>\\n<p>If you’d like to install it on your (or a virtual) machine, you can find installation files at <a href=\\\"https://www.erlang.org/downloads\\\">Erlang.org</a> or on <a href=\\\"https://www.erlang-solutions.com/resources/download.html\\\">Erlang Solutions</a>.</p>\\n<h4>More Information:</h4>\\n<ul>\\n<li><a href=\\\"https://www.erlang.org/about\\\">About Erlang</a></li>\\n<li><a href=\\\"http://learnyousomeerlang.com/\\\">Learn You Some Erlang for Great Good!</a></li>\\n<li><a href=\\\"http://spawnedshelter.com/\\\">Spawned Shelter!</a> <em>(a collection of articles, videos and books for learning Erlang)</em></li>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/Erlang_(programming_language)\\\">Erlang (programming language)</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/erlang/\"},\"frontmatter\":{\"title\":\"Erlang\"}}},\"pathContext\":{\"slug\":\"/erlang/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---erlang-a2e8dbf1e3419ccb6fd5.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Erlang</h2>\\n<p>Erlang is a functional programming language, developed by Ericsson for use in telecom applications. Because they felt that it’s unacceptable for a telecom system to have any significant downtime, Erlang was built to be (among other things):</p>\\n<ul>\\n<li>distributed and fault-tolerant <em>(a piece of failing software or hardware should not bring the system down)</em></li>\\n<li>concurrent <em>(it can spawn many processes, each executing a small and well-defined piece of work, and isolated from one another but able to communicate via messaging)</em></li>\\n<li>hot-swappable <em>(code can be swapped into the system while it’s running, leading to high availability and minimal system downtime)</em></li>\\n</ul>\\n<h3>Syntax</h3>\\n<p>Erlang makes heavy use of <strong>recursion</strong>. Since data is immutable in Erlang, the use of <code>while</code> and <code>for</code> loops (where a variable needs to keep changing its value) is not allowed.</p>\\n<p>Here’s an example of recursion, showing how a function repeatedly strips the first letter from the front of a name and prints it, only stopping when the last letter has been encountered.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-erlang\\\"><code><span class=\\\"token operator\\\">-</span><span class=\\\"token function\\\">module</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token atom\\\">name</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token operator\\\">-</span><span class=\\\"token function\\\">export</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token atom\\\">print_name</span><span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token function\\\">print_name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">RemainingLetter</span> <span class=\\\"token punctuation\\\">|</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token atom\\\">io</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">format</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"~c~n\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">RemainingLetter</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">print_name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">FirstLetter</span> <span class=\\\"token punctuation\\\">|</span> <span class=\\\"token variable\\\">RestOfName</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token atom\\\">io</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">format</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"~c~n\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">FirstLetter</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">print_name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">RestOfName</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>> name:print_name(\\\"Mike\\\").\\nM\\ni\\nk\\ne\\nok</code></pre>\\n      </div>\\n<p>There is also a heavy emphasis on <strong>pattern-matching</strong>, which frequently eliminates the need for an <code>if</code> structure or <code>case</code> statement. In the following example, there are two matches for specific names, followed by a catch-all for any other names.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-erlang\\\"><code><span class=\\\"token operator\\\">-</span><span class=\\\"token function\\\">module</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token atom\\\">greeting</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token operator\\\">-</span><span class=\\\"token function\\\">export</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token atom\\\">say_hello</span><span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token function\\\">say_hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Mary\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token string\\\">\\\"Welcome back Mary!\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">say_hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Tom\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token string\\\">\\\"Howdy Tom.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">say_hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">Name</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token string\\\">\\\"Hello \\\"</span> <span class=\\\"token operator\\\">++</span> <span class=\\\"token variable\\\">Name</span> <span class=\\\"token operator\\\">++</span> <span class=\\\"token string\\\">\\\".\\\"</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>> greeting:say_hello(\\\"Mary\\\").\\n\\\"Welcome back Mary!\\\"\\n> greeting:say_hello(\\\"Tom\\\").\\n\\\"Howdy Tom.\\\"\\n> greeting:say_hello(\\\"Beth\\\").\\n\\\"Hello Beth.\\\"</code></pre>\\n      </div>\\n<h3>Try it out</h3>\\n<p>There are websites where you can try running Erlang commands without having to install anything locally, like these:</p>\\n<ul>\\n<li><a href=\\\"http://www.tryerlang.org/\\\">Give it a try! (a hands-on tutorial)</a></li>\\n<li><a href=\\\"https://www.tutorialspoint.com/compile_erlang_online.php\\\">TutorialsPoint CodingGround</a></li>\\n</ul>\\n<p>If you’d like to install it on your (or a virtual) machine, you can find installation files at <a href=\\\"https://www.erlang.org/downloads\\\">Erlang.org</a> or on <a href=\\\"https://www.erlang-solutions.com/resources/download.html\\\">Erlang Solutions</a>.</p>\\n<h4>More Information:</h4>\\n<ul>\\n<li><a href=\\\"https://www.erlang.org/about\\\">About Erlang</a></li>\\n<li><a href=\\\"http://learnyousomeerlang.com/\\\">Learn You Some Erlang for Great Good!</a></li>\\n<li><a href=\\\"http://spawnedshelter.com/\\\">Spawned Shelter!</a> <em>(a collection of articles, videos and books for learning Erlang)</em></li>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/Erlang_(programming_language)\\\">Erlang (programming language)</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/erlang/\"},\"frontmatter\":{\"title\":\"Erlang\"}}},\"pathContext\":{\"slug\":\"/erlang/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/erlang.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/erlang.json\n// module chunks = 2265178670458533400"],"sourceRoot":""}