webpackJsonp([0xf6e1f4a199aec000],{"./node_modules/json-loader/index.js!./.cache/json/c-ternary-operator.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h2>Ternary Operator</h2>\n<p>Programmers use ternary operators in C for decision making inplace of conditional statements <strong>if</strong> and <strong>else</strong>.\nThe ternary operator is an operator that takes three arguments. The first argument is a comparison argument, the second is the result upon a true comparison, and the third is the result upon a false comparison. If it helps you can think of the operator as shortened way of writing an if-else statement.</p>\n<p>Here’s a simple decision-making example using <strong>if</strong> and <strong>else</strong>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    c <span class="token operator">=</span> a<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">else</span> <span class="token punctuation">{</span>\n    c <span class="token operator">=</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>This example takes more than 10 lines, but that isn’t necessary. You can write the above program in just 3 lines of code using the <strong>ternary operator</strong>.</p>\n<h3>Syntax</h3>\n<p><code>condition ? value_if_true : value_if_false</code></p>\n<p>The statement evalutes to statement_1 if the condition is true, and statement_2 otherwise.</p>\n<p>Here’s the above example re-written to use the ternary operator:</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span>\n\nc <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token punctuation">:</span> b<span class="token punctuation">;</span>\n\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Output of the example should be:</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token number">10</span>\n</code></pre>\n      </div>\n<p><code>c</code> is set equal to <code>a</code>, because the condition <code>a&#x3C;b</code> was true.</p>\n<p>This looks pretty simple, right? Do note that <code>value_if_true</code> and <code>value_if_false</code> must have the same type, and they cannot be full statements but simply expressions.</p>',fields:{slug:"/c/ternary-operator/"},frontmatter:{title:"Ternary Operator"}}},pathContext:{slug:"/c/ternary-operator/"}}}});
//# sourceMappingURL=path---c-ternary-operator-050cb01453c47117c0a8.js.map