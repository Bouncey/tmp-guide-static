{"version":3,"sources":["webpack:///path---elixir-erlang-term-storage-a5a7c89ed460a9181ae7.js","webpack:///./.cache/json/elixir-erlang-term-storage.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/elixir-erlang-term-storage.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,oFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,knKAA49HC,QAAy2CC,KAAA,gCAAsCC,aAAgBC,MAAA,yBAAgCC,aAAgBH,KAAA","file":"path---elixir-erlang-term-storage-a5a7c89ed460a9181ae7.js","sourcesContent":["webpackJsonp([17570052882175138000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/elixir-erlang-term-storage.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Erlang Term Storage</h2>\\n<p>Erlang Term Storage, normally abreviated as ETS, is an in-memory database built into OTP, it’s accessible within Elixir, and is a powerful alternative to solutions like Redis when your application runs on a single node.</p>\\n<h2>Quick Start</h2>\\n<p>To create an ETS table you first need to initalize a table <code>tableName = :ets.new(:table_otp_name, [])</code>, once you have initalized a table you can: insert data, lookup values, delete data, and more.</p>\\n<h3>ETS Demo in IEX</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-elixir\\\"><code>iex<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span> myETSTable <span class=\\\"token operator\\\">=</span> <span class=\\\"token atom symbol\\\">:ets</span><span class=\\\"token punctuation\\\">.</span>new<span class=\\\"token punctuation\\\">(</span><span class=\\\"token atom symbol\\\">:my_ets_table</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">#Reference&lt;0.1520230345.550371329.65846></span>\\niex<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span> <span class=\\\"token atom symbol\\\">:ets</span><span class=\\\"token punctuation\\\">.</span>insert<span class=\\\"token punctuation\\\">(</span>myETSTable<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"favoriteWebSite\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"freeCodeCamp\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token boolean\\\">true</span>\\niex<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span> <span class=\\\"token atom symbol\\\">:ets</span><span class=\\\"token punctuation\\\">.</span>insert<span class=\\\"token punctuation\\\">(</span>myETSTable<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"favoriteProgrammingLanguage\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Elixir\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token boolean\\\">true</span>\\niex<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span> <span class=\\\"token atom symbol\\\">:ets</span><span class=\\\"token punctuation\\\">.</span>i<span class=\\\"token punctuation\\\">(</span>myETSTable<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">1</span>   <span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"favoriteProgrammingLanguage\\\"</span><span class=\\\"token punctuation\\\">>></span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"Elixir\\\"</span><span class=\\\"token punctuation\\\">>></span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">2</span>   <span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"favoriteWebSite\\\"</span><span class=\\\"token punctuation\\\">>></span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"freeCodeCamp\\\"</span><span class=\\\"token punctuation\\\">>></span><span class=\\\"token punctuation\\\">}</span>\\nEOT  <span class=\\\"token punctuation\\\">(</span>q<span class=\\\"token punctuation\\\">)</span>uit <span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">)</span>Digits <span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">)</span>ill <span class=\\\"token operator\\\">/</span>Regexp <span class=\\\"token operator\\\">--</span>>\\n</code></pre>\\n      </div>\\n<h2>Persistence</h2>\\n<p>ETS Tables are not persistent and are destroyed once the process which owns it terminates. If you would like to store data persistently a traditional database and/or file-based storage is recommended.</p>\\n<h2>Use cases</h2>\\n<p>ETS Tables are commonly used for caching data in the application, for example account data fetched from a database may be stored in an ETS Table to reduce the amount of queries to the database. Another use case is for rate limiting use of features in a web application - ETS’s fast read and write speed make it great for this. ETS Tables are a powerful tool for developing highly concurrant web applications at the lowest possible hardware cost.</p>\\n<h4>More Information:</h4>\\n<ul>\\n<li><a href=\\\"https://elixir-lang.org/getting-started/erlang-libraries.html#erlang-term-storage\\\">elixir-lang.org | Erlang Libraries (ETS)</a></li>\\n<li><a href=\\\"http://erlang.org/doc/man/ets.html\\\">erlang.org | ETS</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/elixir/erlang-term-storage/\"},\"frontmatter\":{\"title\":\"Erlang Term Storage\"}}},\"pathContext\":{\"slug\":\"/elixir/erlang-term-storage/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---elixir-erlang-term-storage-a5a7c89ed460a9181ae7.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Erlang Term Storage</h2>\\n<p>Erlang Term Storage, normally abreviated as ETS, is an in-memory database built into OTP, it’s accessible within Elixir, and is a powerful alternative to solutions like Redis when your application runs on a single node.</p>\\n<h2>Quick Start</h2>\\n<p>To create an ETS table you first need to initalize a table <code>tableName = :ets.new(:table_otp_name, [])</code>, once you have initalized a table you can: insert data, lookup values, delete data, and more.</p>\\n<h3>ETS Demo in IEX</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-elixir\\\"><code>iex<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span> myETSTable <span class=\\\"token operator\\\">=</span> <span class=\\\"token atom symbol\\\">:ets</span><span class=\\\"token punctuation\\\">.</span>new<span class=\\\"token punctuation\\\">(</span><span class=\\\"token atom symbol\\\">:my_ets_table</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">#Reference&lt;0.1520230345.550371329.65846></span>\\niex<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span> <span class=\\\"token atom symbol\\\">:ets</span><span class=\\\"token punctuation\\\">.</span>insert<span class=\\\"token punctuation\\\">(</span>myETSTable<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"favoriteWebSite\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"freeCodeCamp\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token boolean\\\">true</span>\\niex<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span> <span class=\\\"token atom symbol\\\">:ets</span><span class=\\\"token punctuation\\\">.</span>insert<span class=\\\"token punctuation\\\">(</span>myETSTable<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"favoriteProgrammingLanguage\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Elixir\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token boolean\\\">true</span>\\niex<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span> <span class=\\\"token atom symbol\\\">:ets</span><span class=\\\"token punctuation\\\">.</span>i<span class=\\\"token punctuation\\\">(</span>myETSTable<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">1</span>   <span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"favoriteProgrammingLanguage\\\"</span><span class=\\\"token punctuation\\\">>></span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"Elixir\\\"</span><span class=\\\"token punctuation\\\">>></span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">2</span>   <span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"favoriteWebSite\\\"</span><span class=\\\"token punctuation\\\">>></span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">&lt;&lt;</span><span class=\\\"token string\\\">\\\"freeCodeCamp\\\"</span><span class=\\\"token punctuation\\\">>></span><span class=\\\"token punctuation\\\">}</span>\\nEOT  <span class=\\\"token punctuation\\\">(</span>q<span class=\\\"token punctuation\\\">)</span>uit <span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">)</span>Digits <span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">)</span>ill <span class=\\\"token operator\\\">/</span>Regexp <span class=\\\"token operator\\\">--</span>>\\n</code></pre>\\n      </div>\\n<h2>Persistence</h2>\\n<p>ETS Tables are not persistent and are destroyed once the process which owns it terminates. If you would like to store data persistently a traditional database and/or file-based storage is recommended.</p>\\n<h2>Use cases</h2>\\n<p>ETS Tables are commonly used for caching data in the application, for example account data fetched from a database may be stored in an ETS Table to reduce the amount of queries to the database. Another use case is for rate limiting use of features in a web application - ETS’s fast read and write speed make it great for this. ETS Tables are a powerful tool for developing highly concurrant web applications at the lowest possible hardware cost.</p>\\n<h4>More Information:</h4>\\n<ul>\\n<li><a href=\\\"https://elixir-lang.org/getting-started/erlang-libraries.html#erlang-term-storage\\\">elixir-lang.org | Erlang Libraries (ETS)</a></li>\\n<li><a href=\\\"http://erlang.org/doc/man/ets.html\\\">erlang.org | ETS</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/elixir/erlang-term-storage/\"},\"frontmatter\":{\"title\":\"Erlang Term Storage\"}}},\"pathContext\":{\"slug\":\"/elixir/erlang-term-storage/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/elixir-erlang-term-storage.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/elixir-erlang-term-storage.json\n// module chunks = 17570052882175138000"],"sourceRoot":""}