webpackJsonp([0x933d627b7969600],{"./node_modules/json-loader/index.js!./.cache/json/java-loops-break-control-statement.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h1>Break Control Statement</h1>\n<p>Terminates the loop and starts the execution of the code that immediately follows the loop. If you have nested loops, the <code>break</code> statement will only end the loop in which it is placed.</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token comment" spellcheck="true">// Loop 1</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>     \n    <span class="token comment" spellcheck="true">// Loop 2</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Will terminate Loop 2, but Loop 1 will keep going</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>But if you do want to break out of the outer loop too, you can use a label to exit:</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code>loop1<span class="token operator">:</span> <span class="token comment" spellcheck="true">// This is a label</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>    \n    <span class="token comment" spellcheck="true">// Loop 2</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>         \n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">break</span> loop1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Will break out of Loop 1, instead of Loop 2</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CJZA/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<p><code>break</code> statements can be particulary useful while searching for an element in an array. Using <code>break</code> in the following code improves efficiency as the loop stops as soon as the element we are looking for (<code>searchFor</code>) is found, instead of going on till the end of <code>arrayInts</code> is reached.</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfInts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> searchFor <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arrayOfInts<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayOfInts<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> searchFor<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    j<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nSystem<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"j = "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CJZC/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>',fields:{slug:"/java/loops/break-control-statement/"},frontmatter:{title:"Break Control Statement"}}},pathContext:{slug:"/java/loops/break-control-statement/"}}}});
//# sourceMappingURL=path---java-loops-break-control-statement-8357cb339f2865897353.js.map