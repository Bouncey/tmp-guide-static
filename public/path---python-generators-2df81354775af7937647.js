webpackJsonp([0x11b4e4a9f48de000],{"./node_modules/json-loader/index.js!./.cache/json/python-generators.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h2>Generators</h2>\n<p>Generators are a special type of function that allows you to return values without ending a function. It does this by using the <code>yield</code> keyword. Similar to <code>return</code>, the <code>yield</code> expression will return a value to the caller. The key difference between the two is that <code>yield</code> will suspend the function, allowing for more values to be returned in the future.</p>\n<p>Generators are iterable so they can be used cleanly with for loops or anything else that iterates.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">yield</span> <span class="token string">\'hello\'</span>\n    <span class="token keyword">yield</span> <span class="token string">\'world\'</span>\n    <span class="token keyword">yield</span> <span class="token string">\'!\'</span>\n\n<span class="token keyword">for</span> item <span class="token keyword">in</span> my_generator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n\n<span class="token comment" spellcheck="true"># output:</span>\n<span class="token comment" spellcheck="true"># hello</span>\n<span class="token comment" spellcheck="true"># world</span>\n<span class="token comment" spellcheck="true"># !</span>\n</code></pre>\n      </div>\n<p>Like other iterators, generators can be passed to the <code>next</code> function to retrieve the next item. When a generator has no more values to yield, a <code>StopIteration</code> error is raised.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>g <span class="token operator">=</span> my_generator<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true"># \'hello\'</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true"># \'world\'</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true"># \'!\'</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true"># Traceback (most recent call last):</span>\n<span class="token comment" spellcheck="true">#   File "&lt;stdin>", line 1, in &lt;module></span>\n<span class="token comment" spellcheck="true"># StopIteration</span>\n</code></pre>\n      </div>\n<p>Generators are particularly useful when you need to create a large set of values but do not need to keep them all in memory at the same time. For example, if you need to print the first million fibonacci numbers, you would typically return a list of a million values and iterate over the list to print each value. However with a generator, you can return each value one at a time:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    a <span class="token operator">=</span> <span class="token number">1</span>\n    b <span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">yield</span> a\n        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b\n\n<span class="token keyword">for</span> x <span class="token keyword">in</span> fib<span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h3>More Information</h3>\n<ul>\n<li><a href="https://www.python.org/dev/peps/pep-0255/">PEP 255</a></li>\n<li><a href="https://wiki.python.org/moin/Generators">Python Wiki</a></li>\n<li><a href="https://docs.python.org/2/reference/simple_stmts.html#yield">Yield Statement Documentation</a></li>\n</ul>',fields:{slug:"/python/generators/"},frontmatter:{title:"Generators"}}},pathContext:{slug:"/python/generators/"}}}});
//# sourceMappingURL=path---python-generators-2df81354775af7937647.js.map