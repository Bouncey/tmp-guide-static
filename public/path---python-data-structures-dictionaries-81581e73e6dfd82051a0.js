webpackJsonp([0xd7cdc0eadf006800],{"./node_modules/json-loader/index.js!./.cache/json/python-data-structures-dictionaries.json":function(n,s){n.exports={data:{markdownRemark:{html:'<p>A Dictionary (a.k.a “dict”) in python is a built-in datatype that can be used to store <strong><code>key-value</code></strong> pairs. This allows you to treat a <strong><code>dict</code></strong> like it’s a <em>database</em> to store and organize data.  </p>\n<p>Dictionaries can use almost any arbitrary datatypes like strings, integers etc. However, values that are not hashable, that is, values containing lists, dictionaries or other mutable types (that are compared by value rather than by object identity) may not be used as keys. Numeric types used for keys obey the normal rules for numeric comparison: if two numbers compare equal (such as <code>1</code> and <code>1.0</code>) then they can be used interchangeably to index the same dictionary entry. (Note however, that since computers store floating-point numbers as approximations it is usually unwise to use them as dictionary keys.)  </p>\n<p>One most important requirement of a dictionary is that the keys <strong>must</strong> be unique.<br>\nTo create an empty dictionary just use a pair of braces:  </p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>    <span class="token operator">>></span><span class="token operator">></span> teams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>teams<span class="token punctuation">)</span>\n    <span class="token operator">>></span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">\'dict\'</span><span class="token operator">></span>\n</code></pre>\n      </div>\n<p>To create a non-empty dictionary with some initial values, place a comma-seperated list of key-value pairs:  </p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>    <span class="token operator">>></span><span class="token operator">></span> teams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'barcelona\'</span><span class="token punctuation">:</span> <span class="token number">1875</span><span class="token punctuation">,</span> <span class="token string">\'chelsea\'</span><span class="token punctuation">:</span> <span class="token number">1910</span><span class="token punctuation">}</span>\n    <span class="token operator">>></span><span class="token operator">></span> teams\n    <span class="token punctuation">{</span><span class="token string">\'barcelona\'</span><span class="token punctuation">:</span> <span class="token number">1875</span><span class="token punctuation">,</span> <span class="token string">\'chelsea\'</span><span class="token punctuation">:</span> <span class="token number">1910</span><span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>It’s easy to add key-value pairs to an existing dictionary:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>    <span class="token operator">>></span><span class="token operator">></span> teams<span class="token punctuation">[</span><span class="token string">\'santos\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1787</span>\n    <span class="token operator">>></span><span class="token operator">></span> teams\n    <span class="token punctuation">{</span><span class="token string">\'chelsea\'</span><span class="token punctuation">:</span> <span class="token number">1910</span><span class="token punctuation">,</span> <span class="token string">\'barcelona\'</span><span class="token punctuation">:</span> <span class="token number">1875</span><span class="token punctuation">,</span> <span class="token string">\'santos\'</span><span class="token punctuation">:</span> <span class="token number">1787</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># Notice the order - Dictionaries are unordered !</span>\n    <span class="token operator">>></span><span class="token operator">></span> <span class="token comment" spellcheck="true"># extracting value - Just provide the key</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token operator">>></span><span class="token operator">></span> teams<span class="token punctuation">[</span><span class="token string">\'barcelona\'</span><span class="token punctuation">]</span>\n    <span class="token number">1875</span>\n</code></pre>\n      </div>\n<p><strong><code>del</code></strong> operator is used to delete a key-value pair from the dict. In scenarios where a key that’s already in use is again used to store values, the old value associated with that key is completely lost. Also, keep in mind that it’s an error to extract the value using an non-existent key.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>    <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> teams<span class="token punctuation">[</span><span class="token string">\'santos\'</span><span class="token punctuation">]</span>\n    <span class="token operator">>></span><span class="token operator">></span> teams\n    <span class="token punctuation">{</span><span class="token string">\'chelsea\'</span><span class="token punctuation">:</span> <span class="token number">1910</span><span class="token punctuation">,</span> <span class="token string">\'barcelona\'</span><span class="token punctuation">:</span> <span class="token number">1875</span><span class="token punctuation">}</span>\n    <span class="token operator">>></span><span class="token operator">></span> teams<span class="token punctuation">[</span><span class="token string">\'chelsea\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2017</span> <span class="token comment" spellcheck="true"># overwriting    </span>\n    <span class="token operator">>></span><span class="token operator">></span> teams\n    <span class="token punctuation">{</span><span class="token string">\'chelsea\'</span><span class="token punctuation">:</span> <span class="token number">2017</span><span class="token punctuation">,</span> <span class="token string">\'barcelona\'</span><span class="token punctuation">:</span> <span class="token number">1875</span><span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><strong><code>in</code></strong> keyword can be used to check whether a key exist in the dict or not:  </p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>    <span class="token operator">>></span><span class="token operator">></span> <span class="token string">\'sanots\'</span> <span class="token keyword">in</span> teams\n    <span class="token boolean">False</span>    \n    <span class="token operator">>></span><span class="token operator">></span> <span class="token string">\'barcelona\'</span> <span class="token keyword">in</span> teams\n    <span class="token boolean">True</span>\n    <span class="token operator">>></span><span class="token operator">></span> <span class="token string">\'chelsea\'</span> <span class="token operator">not</span> <span class="token keyword">in</span> teams\n    <span class="token boolean">False</span>\n</code></pre>\n      </div>\n<p><strong><code>keys</code></strong> is a built-in <em>method</em> that can be used to get the keys of a given dictionary. To extract the keys present in a dict as lists:  </p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>    <span class="token operator">>></span><span class="token operator">></span> club_names <span class="token operator">=</span> list<span class="token punctuation">(</span>teams<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    \n    <span class="token operator">>></span><span class="token operator">></span> club_names\n    <span class="token punctuation">[</span><span class="token string">\'chelsea\'</span><span class="token punctuation">,</span> <span class="token string">\'barcelona\'</span><span class="token punctuation">]</span>\n</code></pre>\n      </div>\n<p>Yet another way of creating dictionary is using the <strong><code>dict()</code></strong> method:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>    <span class="token operator">>></span><span class="token operator">></span> players <span class="token operator">=</span> dict<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">\'messi\'</span><span class="token punctuation">,</span><span class="token string">\'argentina\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">\'ronaldo\'</span><span class="token punctuation">,</span><span class="token string">\'portugal\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">\'kaka\'</span><span class="token punctuation">,</span><span class="token string">\'brazil\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># sequence of key-value pair is passed  </span>\n    <span class="token operator">>></span><span class="token operator">></span> players\n    <span class="token punctuation">{</span><span class="token string">\'ronaldo\'</span><span class="token punctuation">:</span> <span class="token string">\'portugal\'</span><span class="token punctuation">,</span> <span class="token string">\'kaka\'</span><span class="token punctuation">:</span> <span class="token string">\'brazil\'</span><span class="token punctuation">,</span> <span class="token string">\'messi\'</span><span class="token punctuation">:</span> <span class="token string">\'argentina\'</span><span class="token punctuation">}</span>\n    <span class="token operator">>></span><span class="token operator">></span> \n    <span class="token operator">>></span><span class="token operator">></span> <span class="token comment" spellcheck="true"># If keys are simple strings, it\'s quite easier to specify pairs using keyword arguments</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">(</span> totti <span class="token operator">=</span> <span class="token number">38</span><span class="token punctuation">,</span> zidane <span class="token operator">=</span> <span class="token number">43</span> <span class="token punctuation">)</span>\n    <span class="token punctuation">{</span><span class="token string">\'zidane\'</span><span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token string">\'totti\'</span><span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Dict comprehensions can be used as well to create dictionaries from arbitrary key and value expressions:  </p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>    <span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n    <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><strong>Looping in Dictionary</strong><br>\nTo simply loop over the keys in the dictionary, rather than the keys and values:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>    <span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'x\'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">\'y\'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">\'z\'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span> \n    <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> key <span class="token keyword">in</span> d<span class="token punctuation">:</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># do something</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    x\n    y\n    z\n</code></pre>\n      </div>\n<p>To loop over both key and value you can use the following:<br>\nFor Python 2.x:  </p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>    <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> item <span class="token keyword">in</span> d<span class="token punctuation">.</span>iteritems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> items\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token number">1</span>\n    <span class="token number">2</span>\n    <span class="token number">3</span>\n</code></pre>\n      </div>\n<p>Use <strong><code>items()</code></strong> for Python 3.x:  </p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>    <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> item <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> items<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    x <span class="token number">1</span>\n    y <span class="token number">2</span>\n    z <span class="token number">3</span>\n</code></pre>\n      </div>',fields:{slug:"/python/data-structures/dictionaries/"},frontmatter:{title:"The Python Dict"}}},pathContext:{slug:"/python/data-structures/dictionaries/"}}}});
//# sourceMappingURL=path---python-data-structures-dictionaries-81581e73e6dfd82051a0.js.map