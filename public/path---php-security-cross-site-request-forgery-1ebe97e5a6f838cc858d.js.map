{"version":3,"sources":["webpack:///path---php-security-cross-site-request-forgery-1ebe97e5a6f838cc858d.js","webpack:///./.cache/json/php-security-cross-site-request-forgery.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/php-security-cross-site-request-forgery.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,iGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,i8LAA20KC,QAAmxBC,KAAA,6CAAmDC,aAAgBC,MAAA,gCAAuCC,aAAgBH,KAAA","file":"path---php-security-cross-site-request-forgery-1ebe97e5a6f838cc858d.js","sourcesContent":["webpackJsonp([11386850132786625000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/php-security-cross-site-request-forgery.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Cross Site Request Forgery</h2>\\n<p>Cross Site Request Forgery is a vulnerability in the application caused by the programmer not checking where a request was sent from - this attack is sent to a high privilege level user to gain higher level access to the application.</p>\\n<h3>Example Cross Site Request Forgery Attack</h3>\\n<p>An online blog allows users to submit comments and include an image in the comment, the blog’s admin panel allows the blog’s author to delete a comment by loading the URL <code>/admin/deletecomment.php?id=123</code>. A malicious user could make an image tag that loads the delete comment url for example <code>&#x3C;img src=\\\"/admin/deletecomment.php?id=123\\\" /></code> so next time an admin views the comment, the admin’s computer will load the url and delete comment number 123.</p>\\n<h3>Defending your website from cross site request forgery attacks in PHP</h3>\\n<p>To defend against a cross site request forgery attack, you should check against a regularly changed token. The url <code>/admin/deletecomment.php?id=123</code> would change to <code>/admin/deletecomment.php?id=123&#x26;csrf-token=random-per-user-unique-string-here</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Checking a request's CSRF Token (if true the comment is deleted, if false the comment remains.)</span>\\n<span class=\\\"token function\\\">session_start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$_GET</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'csrf-token'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'csrf-token'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>Tips:</strong></p>\\n<ul>\\n<li>Keep a CSRF Token completely random and change per session (the openssl functions can help with this)</li>\\n<li>PHP sessions are useful for storing a CSRF Token accessible to both the user and the server, you could also make this process database driven if you are so inclined.</li>\\n<li>Change the CSRF Token on a session every 24 hours. On a high risk application you might want to change it upon every successful request however that will cause issues with users using multiple tabs.</li>\\n</ul>\\n<h4>Securely generating a Token</h4>\\n<p>When setting a CSRF Token it is important that it is impossible to guess the key. The OpenSSL functions in PHP can generate a randomized key for you and store as a session variable.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token function\\\">session_start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'csrf-token'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">bin2hex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">openssl_random_pseudo_bytes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>Using a CSRF Token to complete legitimate requests</h4>\\n<p>You can include the session variable you saved earlier with your CSRF token in the URL make sure a legitimate administrator is allowed to delete comments. Without the correct token the request will be blocked.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token function\\\">session_start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">echo</span> <span class=\\\"token string\\\">'&lt;a href=\\\"/admin/?id=123&amp;csrf-token='</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'csrf-token'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token string\\\">'\\\">Delete Comment&lt;/a>'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Only the logged in user has access to the CSRF Token - the token isn't accessible to the attacker preventing their attack from being successful.</span>\\n</code></pre>\\n      </div>\\n<h4>More Information:</h4>\\n<ul>\\n<li><a href=\\\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\\\" rel=\\\"nofollow\\\">OWASP Wiki - Cross Site Request Forgery</a></li>\\n<li><a href=\\\"https://secure.php.net/manual/en/function.bin2hex.php\\\">php.net bin2hex() manual</a></li>\\n<li><a href=\\\"https://secure.php.net/manual/en/function.openssl-random-pseudo-bytes.php\\\">php.net openssl_random_pseudo_bytes() manual</a> <!-- I used html special entities here due to issues displaying the underscore characters --></li>\\n</ul>\",\"fields\":{\"slug\":\"/php/security/cross-site-request-forgery/\"},\"frontmatter\":{\"title\":\"Cross Site Request Forgery\"}}},\"pathContext\":{\"slug\":\"/php/security/cross-site-request-forgery/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---php-security-cross-site-request-forgery-1ebe97e5a6f838cc858d.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Cross Site Request Forgery</h2>\\n<p>Cross Site Request Forgery is a vulnerability in the application caused by the programmer not checking where a request was sent from - this attack is sent to a high privilege level user to gain higher level access to the application.</p>\\n<h3>Example Cross Site Request Forgery Attack</h3>\\n<p>An online blog allows users to submit comments and include an image in the comment, the blog’s admin panel allows the blog’s author to delete a comment by loading the URL <code>/admin/deletecomment.php?id=123</code>. A malicious user could make an image tag that loads the delete comment url for example <code>&#x3C;img src=\\\"/admin/deletecomment.php?id=123\\\" /></code> so next time an admin views the comment, the admin’s computer will load the url and delete comment number 123.</p>\\n<h3>Defending your website from cross site request forgery attacks in PHP</h3>\\n<p>To defend against a cross site request forgery attack, you should check against a regularly changed token. The url <code>/admin/deletecomment.php?id=123</code> would change to <code>/admin/deletecomment.php?id=123&#x26;csrf-token=random-per-user-unique-string-here</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Checking a request's CSRF Token (if true the comment is deleted, if false the comment remains.)</span>\\n<span class=\\\"token function\\\">session_start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$_GET</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'csrf-token'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'csrf-token'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>Tips:</strong></p>\\n<ul>\\n<li>Keep a CSRF Token completely random and change per session (the openssl functions can help with this)</li>\\n<li>PHP sessions are useful for storing a CSRF Token accessible to both the user and the server, you could also make this process database driven if you are so inclined.</li>\\n<li>Change the CSRF Token on a session every 24 hours. On a high risk application you might want to change it upon every successful request however that will cause issues with users using multiple tabs.</li>\\n</ul>\\n<h4>Securely generating a Token</h4>\\n<p>When setting a CSRF Token it is important that it is impossible to guess the key. The OpenSSL functions in PHP can generate a randomized key for you and store as a session variable.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token function\\\">session_start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'csrf-token'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">bin2hex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">openssl_random_pseudo_bytes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>Using a CSRF Token to complete legitimate requests</h4>\\n<p>You can include the session variable you saved earlier with your CSRF token in the URL make sure a legitimate administrator is allowed to delete comments. Without the correct token the request will be blocked.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token function\\\">session_start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">echo</span> <span class=\\\"token string\\\">'&lt;a href=\\\"/admin/?id=123&amp;csrf-token='</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$_SESSION</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'csrf-token'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token string\\\">'\\\">Delete Comment&lt;/a>'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Only the logged in user has access to the CSRF Token - the token isn't accessible to the attacker preventing their attack from being successful.</span>\\n</code></pre>\\n      </div>\\n<h4>More Information:</h4>\\n<ul>\\n<li><a href=\\\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\\\" rel=\\\"nofollow\\\">OWASP Wiki - Cross Site Request Forgery</a></li>\\n<li><a href=\\\"https://secure.php.net/manual/en/function.bin2hex.php\\\">php.net bin2hex() manual</a></li>\\n<li><a href=\\\"https://secure.php.net/manual/en/function.openssl-random-pseudo-bytes.php\\\">php.net openssl_random_pseudo_bytes() manual</a> <!-- I used html special entities here due to issues displaying the underscore characters --></li>\\n</ul>\",\"fields\":{\"slug\":\"/php/security/cross-site-request-forgery/\"},\"frontmatter\":{\"title\":\"Cross Site Request Forgery\"}}},\"pathContext\":{\"slug\":\"/php/security/cross-site-request-forgery/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/php-security-cross-site-request-forgery.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/php-security-cross-site-request-forgery.json\n// module chunks = 11386850132786625000"],"sourceRoot":""}