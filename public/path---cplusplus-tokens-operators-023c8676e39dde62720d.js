webpackJsonp([0xeb995ce93e472800],{"./node_modules/json-loader/index.js!./.cache/json/cplusplus-tokens-operators.json":function(n,a){n.exports={data:{markdownRemark:{html:'<h1>Operators :</h1>\n<ul>\n<li>Operators let you perform operations on your data.</li>\n<li>The data that is being operated on is called the  <em>operand</em> .</li>\n<li>The different types of operators in C++ are : </li>\n<li><em>OPERANDS</em> are the data on which the operator performs certain commands.</li>\n<li>Operators are of 3 types : unary(works on 1 operand), binary(works on 2 operands) , ternary(works on 3 operands).</li>\n</ul>\n<h3>1 The I/O operators -</h3>\n<ul>\n<li>\n<p>These operators allow you to direct input and output.</p>\n<h2>The Input oerator ”>>”</h2>\n<p>is used to read data from standard iinput (the “cin” statement) .  </p>\n</li>\n</ul>\n<h2>The Output operator ”&#x3C;&#x3C;”</h2>\n<p> is used to send output in the <code>cout</code> stateement.</p>\n<h3>2 The Arithmetic operators -</h3>\n<ul>\n<li>These operators allow you to perform basic arithmeic operations.</li>\n<li>The <code>+</code> operator <em>adds</em> the 2 operands.</li>\n<li>The <code>-</code> operator <em>subtracts</em> the 2 operands.</li>\n<li>The <code>*</code> operator <em>multiplies</em> the 2 operands.</li>\n<li>The <code>/</code> operator <em>divides and gives the quotient</em> of the 2 operands.</li>\n<li>The <code>%</code> operator <em>divides and gives the remainder</em> of the 2 operands.</li>\n</ul>\n<h3>Example of using arithmetic operators :</h3>\n<div class="gatsby-highlight">\n      <pre class="language-cpp"><code><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1st operand</span>\n <span class="token keyword">int</span> b<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2nd operand</span>\n \n cout<span class="token operator">&lt;&lt;</span><span class="token string">"+ operator "</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">+</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Add</span>\n cout<span class="token operator">&lt;&lt;</span><span class="token string">"- operator "</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">-</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Subtract</span>\n cout<span class="token operator">&lt;&lt;</span><span class="token string">"* operator "</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">*</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Multiply</span>\n cout<span class="token operator">&lt;&lt;</span><span class="token string">"/ operator "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">/</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Find Quotient</span>\n cout<span class="token operator">&lt;&lt;</span><span class="token string">"modulus operator "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">%</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Find remainder</span>\n<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p> OUTPUT :</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>+ operator 15\n- operator -5\n* operator 50\n/ operator 2\nmodulus operator 0</code></pre>\n      </div>\n<p><a href=\'https://repl.it/Mge9\' target=\'_blank\' rel=\'nofollow\'>Try the code yourself ! :) </a></p>\n<h3>The increment operator :</h3>\n<ul>\n<li><code>++</code> is known as the increment operator. It increases the value of an integer variable by 1.</li>\n</ul>\n<p>The 2 types of increment : </p>\n<ul>\n<li>Pre increment is 1st incrementing the value and then using it. Example : <code>int a ; ++a;</code></li>\n<li>Post increment is 1st using the variable then incrementing it. Example : <code>int b; b++;</code></li>\n</ul>\n<h3>The decrement operator :</h3>\n<ul>\n<li><code>--</code> is known as the decrement operator. It decreases the value of an integer variable by 1.</li>\n</ul>\n<p>The 2 types of decrement : </p>\n<ul>\n<li>Pre decrement is 1st decrementing the value and then using it. Example : <code>int a ; --;</code></li>\n<li>Post decrement is 1st using the variable then decrementing it. Example : <code>int b; b--;</code></li>\n</ul>\n<p>Example of Increment and decrement operators :</p>\n<div class="gatsby-highlight">\n      <pre class="language-cpp"><code><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span> \n  <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>\n  \n  <span class="token comment" spellcheck="true">// INCREMENT</span>\n  cout<span class="token operator">&lt;&lt;</span><span class="token string">"Value of int a PRE INCREMENTED : "</span><span class="token operator">&lt;&lt;</span><span class="token operator">++</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n  cout<span class="token operator">&lt;&lt;</span><span class="token string">"Value of int b POST INCREMENTED : "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">++</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n  cout<span class="token operator">&lt;&lt;</span><span class="token string">"Value of b is changed after using once : "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n  \n  <span class="token comment" spellcheck="true">// DECREMENT</span>\n  cout<span class="token operator">&lt;&lt;</span><span class="token string">"\\n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//go to next line </span>\n  a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Assigning a new value to a</span>\n  b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Assigning a new value to b</span>\n  cout<span class="token operator">&lt;&lt;</span><span class="token string">"Value of int a PRE DECREMENTED : "</span><span class="token operator">&lt;&lt;</span><span class="token operator">--</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n  cout<span class="token operator">&lt;&lt;</span><span class="token string">"Value of int b POST DECREMENTED : "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">--</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n  cout<span class="token operator">&lt;&lt;</span><span class="token string">"Value of b is changed after using once : "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>OUTPUT :</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Value of int a PRE INCREMENTED : 4\nValue of int b POST INCREMENTED : 4\nValue of b is changed after using once : 5\n\nValue of int a PRE DECREMENTED : 9\nValue of int b POST DECREMENTED : 10\nValue of b is changed after using once : 9</code></pre>\n      </div>\n<p><a href=\'https://repl.it/Mgg4/2\' target=\'_blank\' rel=\'nofollow\'>Try the code yourself ! :) </a></p>\n<h3>3 : Relational Operators :</h3>\n<ul>\n<li>\n<p>These operators tell us the relation among 2 operands and return a boolean value(0 or 1). If the relation is <code>true</code> then it results into 1 . If the realtion is false then it results into 0.</p>\n</li>\n<li>\n<p>The 6 relationall operators are :</p>\n<ol>\n<li>Less than <code>&#x3C;</code></li>\n<li>Greater than ’>’</li>\n<li>Less than or equal to <code>&#x3C;=</code></li>\n<li>Greater than or equal to <code>>=</code></li>\n<li>Equal to <code>==</code></li>\n<li>Not equal to <code>!=</code></li>\n</ol>\n</li>\n</ul>\n<h3>4 : Logical Operators :</h3>\n<ul>\n<li>These operators combine expressions for logical operations . They are :</li>\n<li>Logical AND <code>&#x26;&#x26;</code> : Evaluates to true if both values are true .</li>\n<li>Logical OR <code>||</code>  : Evaluates to true if any value is true .</li>\n<li>Logical NOT <code>!</code>  : If <em>expression</em> is true then <em>!expression</em> is false. This operator reverses the truth value and is a unary operator.</li>\n</ul>\n<p><em>Camper , You now know what are tokens. The next article will be about <need-to-put-topic> CONGRATULATIONS</em> </p>\n<p> <strong>Good Luck to all of you</strong> </p>\n<p> <strong>Happy Coding ! :)</strong></p>\n<p> <strong>Feel free to ask any queries on FreeCodeCamp’s GitHub page or <a href=\'https://forum.freecodecamp.org/\' target=\'_blank\' rel=\'nofollow\'>FreeCodeCamp’s Forum .</a></strong></p>',fields:{slug:"/cplusplus/Tokens - operators/"},frontmatter:{title:"Operators"}}},pathContext:{slug:"/cplusplus/Tokens - operators/"}}}});
//# sourceMappingURL=path---cplusplus-tokens-operators-023c8676e39dde62720d.js.map