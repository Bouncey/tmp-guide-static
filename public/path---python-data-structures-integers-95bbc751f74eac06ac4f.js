webpackJsonp([0xb433b7b442329000],{"./node_modules/json-loader/index.js!./.cache/json/python-data-structures-integers.json":function(e,n){e.exports={data:{markdownRemark:{html:'<p>The theoretical domain for integers in python is negative infinity to infinity. In practice, integer values are limited by the amount of available memory.</p>\n<p>In Python 2, there was a distinction between <strong><code>int</code></strong>, numbers that fit in a 32 or 64 bit <em>C long</em>, and <strong><code>long</code></strong>, numbers limited by available memory. Python 3 unified the two types into just <strong><code>int</code></strong>, more info in <a href=\'https://www.python.org/dev/peps/pep-0237/\' target=\'_blank\' rel=\'nofollow\'>PEP 237</a>.</p>\n<p><strong><code>int</code> creation using integer literals</strong></p>\n<p><a href=\'https://docs.python.org/3/reference/lexical_analysis.html#integer-literals\' target=\'_blank\' rel=\'nofollow\'>Integer Literals</a></p>\n<p><em>Integer objects</em> can be created using using integer literals. Unadorned numbers without decimals are integer literals:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> 1234567890           # Unadorned numbers are integer literals\n1234567890\n>>> type(1234567890)\n<class \'int\'></code></pre>\n      </div>\n<p>Numeric literals do not contain a sign, however creating negative <em>integer objects</em> is possible by prefixing with a unary <code>-</code> (minus) operator with no space before the literal:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> -1234567890\n-1234567890\n>>> type(-1234567890)\n<class \'int\'></code></pre>\n      </div>\n<p>Likewise, positive integer objects can be created by prefixing a unary <code>+</code> (plus) operator with no space before the digits. Usually <code>+</code> is ommited:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> +1234\n1234</code></pre>\n      </div>\n<p>Binary (base 2, prefix: <code>0b</code> or <code>0B</code>), octal (base 8, prefix: <code>0o</code> or <code>0O</code>), and hexadecimal (base 16, prefix: <code>0x</code> or <code>0X</code>) integers can also be created using integer literals:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> 0b1, 0b10, 0b11\n(1, 2, 3)\n>>> 0o1, 0o10, 0o11\n(1, 8, 9)\n>>> 0x1, 0x10, 0x11\n(1, 16, 17)</code></pre>\n      </div>\n<p>Note that leading 0’s for non-zero integer literals are <strong>not allowed</strong>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> 0     # Zero by itself is okay.\n0\n>>> 01    # Leading zero(s) cause SyntaxError.\n  File "<stdin>", line 1\n    01\n     ^\nSyntaxError: invalid token</code></pre>\n      </div>\n<p>The <code>int</code> <a href=\'https://docs.python.org/3/library/functions.html#int\' target=\'_blank\' rel=\'nofollow\'>constructor</a> is another way to create <em>integer objects</em>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>class int(x=0)\nclass int(x, base=10)</code></pre>\n      </div>\n<p>Creating <em>integer objects</em> with integer literals is preferred when possible:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> a = 1         # Prefer integer literal when possible.\n>>> type(a)\n<class \'int\'>\n>>> b = int(1)    # Works but unnecessary.\n>>> type(b)\n<class \'int\'></code></pre>\n      </div>\n<p>However, the constructor allows for creating <em>integer objects</em> from other number types:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> a = 1.123\n>>> type(a)\n<class \'float\'>\n>>> print(a)\n1.123\n>>> b = int(1.123)\n>>> type(b)\n<class \'int\'>\n>>> print(b)\n1</code></pre>\n      </div>\n<p>Using the <code>int</code> constructor for floating point numbers will truncate the number towards zero:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> int(-1.23)\n-1\n>>> int(1.23)\n1</code></pre>\n      </div>\n<p>The built-in <code>boolean</code> constants are instances of the <code>bool</code> class, and are subclasses of the <code>int</code> class, making them a kind of numeric type:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> type(True)\n<class \'bool\'>\n>>> issubclass(bool, int)\nTrue</code></pre>\n      </div>\n<p>If that doesn’t make sense to you, don’t worry. For now just remember that calling the int constructor with <code>boolean</code> objects will return <em>integer objects</em>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> int(True)\n1\n>>> int(False)\n0</code></pre>\n      </div>\n<p>The <code>int</code> constructor will also make <em>integer objects</em> from strings:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> a = "10"\n>>> type(a)\n<class \'str\'>\n>>> b = int("10")\n>>> type(b)\n<class \'int\'></code></pre>\n      </div>\n<p><em>Strings</em> for the <code>int</code> constructor must represent an integer literal:</p>\n<p>The second parameter of the <code>int</code> constructor is to specify a base (default: 10). Valid bases are 0 and 2-36.</p>\n<p>If an explicit base is provided the first argument must be a string.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> int("111", 2)\n7\n>>> int(111, 2)\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nTypeError: int() can\'t convert non-string with explicit base</code></pre>\n      </div>\n<p>The string used for the <code>int</code> constructor with an explicit base must be a valid integer literal for that base:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> int(\'11\', 2)\n3\n>>> int(\'12\', 2)\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nValueError: invalid literal for int() with base 2: \'12\'</code></pre>\n      </div>\n<p>Both prefixed and non-prefixed strings of integer literals can be used, however, if used, the prefix must match the provided base.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> int(\'1101\', 2)\n13\n>>> int(\'0b1101\', 2)\n13\n>>> int(\'0x1101\', 2)\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nValueError: invalid literal for int() with base 2: \'0x1101\'</code></pre>\n      </div>\n<p>If a prefixed string and base 0 is used, the created integer object will use the base specified by the prefix. If no prefix is used, then the base is assumed 10</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> int(\'100\', 0)\n100\n>>> int(\'0b100\', 0)\n4\n>>> int(\'0o100\', 0)\n64</code></pre>\n      </div>',fields:{slug:"/python/data-structures/integers/"},frontmatter:{title:"Python Integers"}}},pathContext:{slug:"/python/data-structures/integers/"}}}});
//# sourceMappingURL=path---python-data-structures-integers-95bbc751f74eac06ac4f.js.map