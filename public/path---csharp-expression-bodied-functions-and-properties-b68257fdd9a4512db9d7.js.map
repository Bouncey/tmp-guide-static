{"version":3,"sources":["webpack:///path---csharp-expression-bodied-functions-and-properties-b68257fdd9a4512db9d7.js","webpack:///./.cache/json/csharp-expression-bodied-functions-and-properties.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/csharp-expression-bodied-functions-and-properties.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,2GACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,w3BAA02BC,QAAuCC,KAAA,uDAA6DC,aAAgBC,MAAA,gDAAuDC,aAAgBH,KAAA","file":"path---csharp-expression-bodied-functions-and-properties-b68257fdd9a4512db9d7.js","sourcesContent":["webpackJsonp([3775843206443770400],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/csharp-expression-bodied-functions-and-properties.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Expression Bodied Functions and Properties</h1>\\n<p>You can declare functions and properties as a lambda expression, without the need for a statement block. Intended for simple implementations, this syntax is more concise than declaring a regular method or property in that it eliminates the need for some of the curly braces and the use of an explicit return statement.</p>\\n<p>Here is an example of a regular method declaration:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>public Point CreatePoint(int x, int y)\\n{\\n    return new Point(x, y);\\n}</code></pre>\\n      </div>\\n<p>The following gives the same result, but is written as an expression bodied function:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>public Point CreatePoint(int x, int y) => new Point(x, y);</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/csharp/expression-bodied-functions-and-properties/\"},\"frontmatter\":{\"title\":\"Expression Bodied Functions and Properties\"}}},\"pathContext\":{\"slug\":\"/csharp/expression-bodied-functions-and-properties/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---csharp-expression-bodied-functions-and-properties-b68257fdd9a4512db9d7.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Expression Bodied Functions and Properties</h1>\\n<p>You can declare functions and properties as a lambda expression, without the need for a statement block. Intended for simple implementations, this syntax is more concise than declaring a regular method or property in that it eliminates the need for some of the curly braces and the use of an explicit return statement.</p>\\n<p>Here is an example of a regular method declaration:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>public Point CreatePoint(int x, int y)\\n{\\n    return new Point(x, y);\\n}</code></pre>\\n      </div>\\n<p>The following gives the same result, but is written as an expression bodied function:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>public Point CreatePoint(int x, int y) => new Point(x, y);</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/csharp/expression-bodied-functions-and-properties/\"},\"frontmatter\":{\"title\":\"Expression Bodied Functions and Properties\"}}},\"pathContext\":{\"slug\":\"/csharp/expression-bodied-functions-and-properties/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/csharp-expression-bodied-functions-and-properties.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/csharp-expression-bodied-functions-and-properties.json\n// module chunks = 3775843206443770400"],"sourceRoot":""}