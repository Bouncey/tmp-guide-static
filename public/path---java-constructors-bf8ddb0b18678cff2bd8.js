webpackJsonp([0x797031677f9d5800],{"./node_modules/json-loader/index.js!./.cache/json/java-constructors.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h1>Constructors</h1>\n<p>What’s the point then? I should be able to store data in it right?</p>\n<p>That’s when we use either <strong>getter</strong> (e.g., <code>getName()</code>) / <strong>setter</strong> (e.g., <code>setName()</code>) methods or in this case constructors to initialize a class. Basically every Java Class has a constructor, which is the method which is called first when any object of the class is initialized. Think of it as a bit of starter code.</p>\n<p>When you write a class without any constructor, then Java assumes it has a default constructor :</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nCar modelS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>This initializing with no parameters is a way of calling the default constructor. You can also have a default constructor written yourself this way :</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>\n\n    <span class="token comment" spellcheck="true">// User Specified Default Constructor</span>\n    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> <span class="token string">"Tesla"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Then, when calling <code>new Car()</code>, the variable <code>name</code> will get auto-initialized to “Tesla”.</p>\n<p>Clearly, constructors are exactly what they sound like: they are used to <code>construct</code> i.e., instantiate an object of a particular class.<br>\nConstructors look similar to method declarations, but are slightly different in the sense that they:</p>\n<ol>\n<li>Are named exactly the same as the class.</li>\n<li>Don’t have a return type.</li>\n</ol>\n<p>Hence, the purpose of using <code>constructors</code> is to provide:</p>\n<ol>\n<li>A way to instantiate an object.</li>\n<li>Provide initial values to a object properties.</li>\n<li>Control how an object is created.</li>\n</ol>\n<p>Let’s look at another example. Say, Honda (the car manufacturer), wants all its cars to be named <code>Honda &#x3C;something></code>. In order to enforce this, we might represent this using a class as follows:</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>\n\n    <span class="token comment" spellcheck="true">// Constructor.</span>\n    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span>String model<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Honda "</span> <span class="token operator">+</span> model<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Civic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> car<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CTJ4/1\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<p>Notice that when we write a constructor in this way i.e., providing a parameter, we are controlling (point no. 3) the way an instance of <code>Car</code> is created. In short, we are saying in this example that <strong>you MUST provide a model name in order to get an instance of Car class</strong>.</p>\n<p>Why is this important? There are times when you’d want <strong>one and only one</strong> instance of a class which you’d want to use in your entire application. One way of achieving this is by using a <code>private</code> constructor.</p>\n<p>Assume you need a class to represent a Bank. You wouldn’t want people to create instance of <code>Bank</code> ever. So, you design your class:</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> Bank instance<span class="token punctuation">;</span>\n    \n    <span class="token keyword">private</span> <span class="token function">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> Bank <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CTJz/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<p>Notice that the constructor is <code>private</code>. This enforces the fact that no one else is allowed to create an instance of the Bank.<br>\nIn fact, if in another class, you try:</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code>Bank account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Throws a compilation error: Bank() has private access in Bank.</span>\n</code></pre>\n      </div>\n<p>So, the only way to gain access to the instance is by using <code>Bank.getInstance()</code>. Such instances are called <code>Singleton</code> since you get exactly one instance (per VM to be precise) throughout the life of your application.</p>\n<p>There can be many number of constructors in a class. But they should differ in the method parameters. This is Constructor Overloading. For example</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> String carType<span class="token punctuation">;</span>\n\n    <span class="token comment" spellcheck="true">// Constructor.</span>\n    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"No Name"</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>carType <span class="token operator">=</span> <span class="token string">"No Type"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span>String model<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Honda "</span> <span class="token operator">+</span> model<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span>String model<span class="token punctuation">,</span> String carType<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> model<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>carType <span class="token operator">=</span> carType<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">public</span> String <span class="token function">getCarType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Civic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> car<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token comment" spellcheck="true">// Other Way To Initialize</span>\n        Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Civic"</span><span class="token punctuation">,</span><span class="token string">"Sedan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> car<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token operator">+</span> car<span class="token punctuation">.</span><span class="token function">getCarType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Copy constructor</h2>\n<p>The copy constructor is a constructor which creates an object by initializing it with an object of the same class, which has been created previously. The copy constructor is used to-</p>\n<ol>\n<li>\n<p>Initialize an object from another of the same type.</p>\n</li>\n<li>\n<p>Copy an object to pass it as an argument to a function.</p>\n</li>\n<li>\n<p>Copy an object to return it from a function.\nHere is a program that shows a simple use of copy constructor:</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Complex</span> <span class="token punctuation">{</span>\n\n<span class="token keyword">private</span> <span class="token keyword">double</span> re<span class="token punctuation">,</span> im<span class="token punctuation">;</span>\n \n<span class="token comment" spellcheck="true">// A normal parametrized constructor </span>\n<span class="token keyword">public</span> <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">double</span> re<span class="token punctuation">,</span> <span class="token keyword">double</span> im<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>re <span class="token operator">=</span> re<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>im <span class="token operator">=</span> im<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n \n<span class="token comment" spellcheck="true">// Copy constructor</span>\n<span class="token function">Complex</span><span class="token punctuation">(</span>Complex c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Copy constructor called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    re <span class="token operator">=</span> c<span class="token punctuation">.</span>re<span class="token punctuation">;</span>\n    im <span class="token operator">=</span> c<span class="token punctuation">.</span>im<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n  \n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><a href="https://repl.it/MwnJ">run the full code</a></p>\n</li>\n</ol>',fields:{slug:"/java/constructors/"},frontmatter:{title:"Constructors"}}},pathContext:{slug:"/java/constructors/"}}}});
//# sourceMappingURL=path---java-constructors-bf8ddb0b18678cff2bd8.js.map