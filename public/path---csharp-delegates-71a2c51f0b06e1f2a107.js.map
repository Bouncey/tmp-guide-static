{"version":3,"sources":["webpack:///path---csharp-delegates-71a2c51f0b06e1f2a107.js","webpack:///./.cache/json/csharp-delegates.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/csharp-delegates.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,0EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,qtIAAkiIC,QAAgTC,KAAA,sBAA4BC,aAAgBC,MAAA,eAAsBC,aAAgBH,KAAA","file":"path---csharp-delegates-71a2c51f0b06e1f2a107.js","sourcesContent":["webpackJsonp([11154166901643182000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/csharp-delegates.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Delegates</h2>\\n<p>A C# delegate represents a reference to a method that has a given set\\nof parameters and a given return type. When you instantiate the delegate, you can associate it with\\nany method that is compatible with the delegate type: has the same amount of parameters, each is of the\\nsame type and the type of the return value is also the same.</p>\\n<p>You can either use an instance method or a static method when you assign it to a delegate.</p>\\n<p>Delegate allow you to pass methods as parameters to other methods. </p>\\n<p>Delegates are often used to implement callback functions. The most typical example are event handlers: you register\\na method that is to be called whenever a certain event happens (the mouse button is clicked, for example).</p>\\n<h3>Short explanation for developers</h3>\\n<p>Delegates are like function pointers in C type languages like C or C++. However, they are type safe.\\nUnlike simple function pointers they\\ncontain information about the object instance whose method will be called when invoking the delegate, and have\\nstrict type checks for the arguments and return value of the function.</p>\\n<h2>Example</h2>\\n<p>You declare a delegate similar to how you declare a function, but add the <code>delegate</code> keyword. For example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">delegate</span> <span class=\\\"token keyword\\\">string</span> StringOperation <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">string</span> s1<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">string</span> s2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Any method that takes two <code>string</code> arguments and returns <code>string</code> can be assigned to a variable of this delegate type.</p>\\n<p>After you have created the delegate type, you can use it just like any other type. You can declare a local variable,\\nother class members or pass them as parameters to other methods.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>    StringOperation a<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Before invoking the delegate, you will need to assign a value to it. Let’s assume we have a concatenation method\\nthat has the following implementation:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">string</span> Concatenate <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">string</span> one<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">string</span> two <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> one <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" \\\"</span> <span class=\\\"token operator\\\">+</span> two<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>You can then assign this to the delegate variable and invoke it like a function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>    StringOperation op <span class=\\\"token operator\\\">=</span> Concatenate<span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token keyword\\\">string</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">op</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"World\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    Console<span class=\\\"token punctuation\\\">.</span>WriteLine <span class=\\\"token punctuation\\\">(</span> result <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// print \\\"Hello World\\\" to the console</span>\\n</code></pre>\\n      </div>\\n<h2>More information</h2>\\n<p>Read more about delegates <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/\\\">here</a>.</p>\",\"fields\":{\"slug\":\"/csharp/delegates/\"},\"frontmatter\":{\"title\":\"Delegates\"}}},\"pathContext\":{\"slug\":\"/csharp/delegates/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---csharp-delegates-71a2c51f0b06e1f2a107.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Delegates</h2>\\n<p>A C# delegate represents a reference to a method that has a given set\\nof parameters and a given return type. When you instantiate the delegate, you can associate it with\\nany method that is compatible with the delegate type: has the same amount of parameters, each is of the\\nsame type and the type of the return value is also the same.</p>\\n<p>You can either use an instance method or a static method when you assign it to a delegate.</p>\\n<p>Delegate allow you to pass methods as parameters to other methods. </p>\\n<p>Delegates are often used to implement callback functions. The most typical example are event handlers: you register\\na method that is to be called whenever a certain event happens (the mouse button is clicked, for example).</p>\\n<h3>Short explanation for developers</h3>\\n<p>Delegates are like function pointers in C type languages like C or C++. However, they are type safe.\\nUnlike simple function pointers they\\ncontain information about the object instance whose method will be called when invoking the delegate, and have\\nstrict type checks for the arguments and return value of the function.</p>\\n<h2>Example</h2>\\n<p>You declare a delegate similar to how you declare a function, but add the <code>delegate</code> keyword. For example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">delegate</span> <span class=\\\"token keyword\\\">string</span> StringOperation <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">string</span> s1<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">string</span> s2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Any method that takes two <code>string</code> arguments and returns <code>string</code> can be assigned to a variable of this delegate type.</p>\\n<p>After you have created the delegate type, you can use it just like any other type. You can declare a local variable,\\nother class members or pass them as parameters to other methods.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>    StringOperation a<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Before invoking the delegate, you will need to assign a value to it. Let’s assume we have a concatenation method\\nthat has the following implementation:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">string</span> Concatenate <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">string</span> one<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">string</span> two <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> one <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" \\\"</span> <span class=\\\"token operator\\\">+</span> two<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>You can then assign this to the delegate variable and invoke it like a function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>    StringOperation op <span class=\\\"token operator\\\">=</span> Concatenate<span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token keyword\\\">string</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">op</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"World\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    Console<span class=\\\"token punctuation\\\">.</span>WriteLine <span class=\\\"token punctuation\\\">(</span> result <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// print \\\"Hello World\\\" to the console</span>\\n</code></pre>\\n      </div>\\n<h2>More information</h2>\\n<p>Read more about delegates <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/\\\">here</a>.</p>\",\"fields\":{\"slug\":\"/csharp/delegates/\"},\"frontmatter\":{\"title\":\"Delegates\"}}},\"pathContext\":{\"slug\":\"/csharp/delegates/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/csharp-delegates.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/csharp-delegates.json\n// module chunks = 11154166901643182000"],"sourceRoot":""}