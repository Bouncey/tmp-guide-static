{"version":3,"sources":["webpack:///path---javascript-es-6-arrow-functions-f67c15e6c5f000eeb34b.js","webpack:///./.cache/json/javascript-es-6-arrow-functions.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/javascript-es-6-arrow-functions.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,yFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,gmCAAkgCC,QAA2HC,KAAA,oCAA0CC,aAAgBC,MAAA,qBAA4BC,aAAgBH,KAAA","file":"path---javascript-es-6-arrow-functions-f67c15e6c5f000eeb34b.js","sourcesContent":["webpackJsonp([12317118586269686000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/javascript-es-6-arrow-functions.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Arrow functions</h2>\\n<p>Functions in ES6 have changed a bit. I mean the syntax.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>// Old Syntax\\nfunction oldOne() {\\n console.log(\\\"Hello World..!\\\");\\n}\\n\\n// New Syntax\\nvar newOne = () => {\\n console.log(\\\"Hello World..!\\\");\\n}</code></pre>\\n      </div>\\n<p>The new syntax may be confusing a little bit. But I will try to explain the syntax.\\nThere are two parts of the syntax.</p>\\n<ol>\\n<li>var newOne = ()</li>\\n<li>=> {}</li>\\n</ol>\\n<p>The first part is just declaring a variable and assigning the function (i.e) () to it. It just says the variable is actually a function.</p>\\n<p>Then the second part is declaring the body part of the function. The arrow part with the curly braces defines the body part.</p>\\n<p>Another example with parameters:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>let NewOneWithParameters = (a, b) => {\\n console.log(a+b); // 30\\n}\\nNewOneWithParameters(10, 20);</code></pre>\\n      </div>\\n<p>I don’t think I need to give an explanation for this. It’s straightforward.</p>\",\"fields\":{\"slug\":\"/javascript/es6/arrow_functions/\"},\"frontmatter\":{\"title\":\"Arrow Functions\"}}},\"pathContext\":{\"slug\":\"/javascript/es6/arrow_functions/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-es-6-arrow-functions-f67c15e6c5f000eeb34b.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Arrow functions</h2>\\n<p>Functions in ES6 have changed a bit. I mean the syntax.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>// Old Syntax\\nfunction oldOne() {\\n console.log(\\\"Hello World..!\\\");\\n}\\n\\n// New Syntax\\nvar newOne = () => {\\n console.log(\\\"Hello World..!\\\");\\n}</code></pre>\\n      </div>\\n<p>The new syntax may be confusing a little bit. But I will try to explain the syntax.\\nThere are two parts of the syntax.</p>\\n<ol>\\n<li>var newOne = ()</li>\\n<li>=> {}</li>\\n</ol>\\n<p>The first part is just declaring a variable and assigning the function (i.e) () to it. It just says the variable is actually a function.</p>\\n<p>Then the second part is declaring the body part of the function. The arrow part with the curly braces defines the body part.</p>\\n<p>Another example with parameters:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>let NewOneWithParameters = (a, b) => {\\n console.log(a+b); // 30\\n}\\nNewOneWithParameters(10, 20);</code></pre>\\n      </div>\\n<p>I don’t think I need to give an explanation for this. It’s straightforward.</p>\",\"fields\":{\"slug\":\"/javascript/es6/arrow_functions/\"},\"frontmatter\":{\"title\":\"Arrow Functions\"}}},\"pathContext\":{\"slug\":\"/javascript/es6/arrow_functions/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-es-6-arrow-functions.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/javascript-es-6-arrow-functions.json\n// module chunks = 12317118586269686000"],"sourceRoot":""}