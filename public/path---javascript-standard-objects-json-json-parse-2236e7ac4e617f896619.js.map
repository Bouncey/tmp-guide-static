{"version":3,"sources":["webpack:///path---javascript-standard-objects-json-json-parse-2236e7ac4e617f896619.js","webpack:///./.cache/json/javascript-standard-objects-json-json-parse.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/javascript-standard-objects-json-json-parse.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,qGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,ksKAA6+JC,QAA0ZC,KAAA,iDAAuDC,aAAgBC,MAAA,gBAAuBC,aAAgBH,KAAA","file":"path---javascript-standard-objects-json-json-parse-2236e7ac4e617f896619.js","sourcesContent":["webpackJsonp([4194002996865031700],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/javascript-standard-objects-json-json-parse.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>JSON Parse</h2>\\n<p>The <code>JSON.parse()</code> method parses a string and construct a new object described by a string.</p>\\n<h4>Syntax:</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>    JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>text <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> reviver<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h5>Parameters:</h5>\\n<p><code>text</code>\\nThe string to parse as JSON</p>\\n<p><code>reviver</code>(Optional)\\nThe function will receive <code>key</code> and <code>value</code> as arguments. This function can be used to tranform the result value.</p>\\n<p>Here is an example on how to use <code>JSON.parse()</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'{\\\"foo\\\": \\\"bar\\\"}'</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This will print `undefined` since `data` is of type string and has no property named as `foo`</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// You can use JSON.parse to create a new JSON object from the given string</span>\\n<span class=\\\"token keyword\\\">var</span> convertedData <span class=\\\"token operator\\\">=</span> JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>convertedData<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This will print `bar</span>\\n</code></pre>\\n      </div>\\n<p><a href='https://repl.it/MwgK/0' target='_blank' rel='nofollow'>Repl.it Demo</a></p>\\n<p>Here is an example with <code>reviver</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'{\\\"value\\\": 5}'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> value <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> value <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Original Data</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Original Data:\\\"</span><span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This will print Original Data: {\\\"value\\\": 5}</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Result after parsing</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Parsed Result: \\\"</span><span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This will print Parsed Result:  { value: 50 }</span>\\n</code></pre>\\n      </div>\\n<p>In the above example, all numberic values are being multipled by <code>10</code> - <a href='https://repl.it/Mwfp/0' target='_blank' rel='nofollow'>Repl.it Demo</a></p>\\n<h4>More Information:</h4>\\n<p><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse' target='_blank' rel='nofollow'>JSON.parse - MDN</a></p>\",\"fields\":{\"slug\":\"/javascript/standard-objects/json/json-parse/\"},\"frontmatter\":{\"title\":\"JSON Parse\"}}},\"pathContext\":{\"slug\":\"/javascript/standard-objects/json/json-parse/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-standard-objects-json-json-parse-2236e7ac4e617f896619.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>JSON Parse</h2>\\n<p>The <code>JSON.parse()</code> method parses a string and construct a new object described by a string.</p>\\n<h4>Syntax:</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>    JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>text <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> reviver<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h5>Parameters:</h5>\\n<p><code>text</code>\\nThe string to parse as JSON</p>\\n<p><code>reviver</code>(Optional)\\nThe function will receive <code>key</code> and <code>value</code> as arguments. This function can be used to tranform the result value.</p>\\n<p>Here is an example on how to use <code>JSON.parse()</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'{\\\"foo\\\": \\\"bar\\\"}'</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This will print `undefined` since `data` is of type string and has no property named as `foo`</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// You can use JSON.parse to create a new JSON object from the given string</span>\\n<span class=\\\"token keyword\\\">var</span> convertedData <span class=\\\"token operator\\\">=</span> JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>convertedData<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This will print `bar</span>\\n</code></pre>\\n      </div>\\n<p><a href='https://repl.it/MwgK/0' target='_blank' rel='nofollow'>Repl.it Demo</a></p>\\n<p>Here is an example with <code>reviver</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'{\\\"value\\\": 5}'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> value <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> value <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Original Data</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Original Data:\\\"</span><span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This will print Original Data: {\\\"value\\\": 5}</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Result after parsing</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Parsed Result: \\\"</span><span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This will print Parsed Result:  { value: 50 }</span>\\n</code></pre>\\n      </div>\\n<p>In the above example, all numberic values are being multipled by <code>10</code> - <a href='https://repl.it/Mwfp/0' target='_blank' rel='nofollow'>Repl.it Demo</a></p>\\n<h4>More Information:</h4>\\n<p><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse' target='_blank' rel='nofollow'>JSON.parse - MDN</a></p>\",\"fields\":{\"slug\":\"/javascript/standard-objects/json/json-parse/\"},\"frontmatter\":{\"title\":\"JSON Parse\"}}},\"pathContext\":{\"slug\":\"/javascript/standard-objects/json/json-parse/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-standard-objects-json-json-parse.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/javascript-standard-objects-json-json-parse.json\n// module chunks = 4194002996865031700"],"sourceRoot":""}