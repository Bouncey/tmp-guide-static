{"version":3,"sources":["webpack:///path---software-engineering-design-patterns-singleton-0137ecb00ae107e4fcd7.js","webpack:///./.cache/json/software-engineering-design-patterns-singleton.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/software-engineering-design-patterns-singleton.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,wGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,4uaAA2waC,QAAsgBC,KAAA,oDAA0DC,aAAgBC,MAAA,eAAsBC,aAAgBH,KAAA","file":"path---software-engineering-design-patterns-singleton-0137ecb00ae107e4fcd7.js","sourcesContent":["webpackJsonp([17762950487987513000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/software-engineering-design-patterns-singleton.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>The singleton is a design pattern that restricts the instantiation of a class to one object. It is useful when you want to give only one object the ability to coordinate actions across your application.</p>\\n<h2>Singleton in Android</h2>\\n<p>Singleton is a design pattern often used in Android. It is easily misused and so can cause app to be hard to maintain. It is useful in Android beause they live across fragments, activities, and rotations. </p>\\n<ul>\\n<li>Singletons are often used in Android to store temporary data</li>\\n<li>They allow the application to have one owner of the data and provides an easy way to pass data between controller classes</li>\\n<li>Singletons are destroyed when Android removes your app from memory</li>\\n<li>Singletons can make it difficult to unit test your app</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DataStore</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> DataStore sDataStore<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">private</span> List<span class=\\\"token operator\\\">&lt;</span>Data<span class=\\\"token operator\\\">></span> mData<span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> DataStore <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>Context context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>sDataStore <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      sDataStore <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">DataStore</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> sDataStore<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Make constructor private to prevent other classes from creating a DataStore instance</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token function\\\">DataStore</span><span class=\\\"token punctuation\\\">(</span>Context context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    mData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ArrayList</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// The only way for other classes to get data from DataStore</span>\\n  <span class=\\\"token keyword\\\">public</span> List<span class=\\\"token operator\\\">&lt;</span>Data<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> mData<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Singleton in PHP</h2>\\n<blockquote>\\n<p>A private constructor is used to prevent the direct creation of objects from the class.\\nThe only way to create an instance from the class is by using a static method that creates the object only if it wasnâ€™t already created.</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">Class</span> <span class=\\\"token class-name\\\">Singleton</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Hold the class instance</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token variable\\\">$instance</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n  * The constructor is private\\n  * it is ensure the class can be initialized only from itself\\n  */</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">__construct</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n  * Return the singleton instance of this class\\n  *\\n  * @return Singleton\\n  */</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token variable\\\">$instance</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      self<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token variable\\\">$instance</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Singleton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n \\n    <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token variable\\\">$instance</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token variable\\\">$obj1</span> <span class=\\\"token operator\\\">=</span> Singleton<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$obj2</span> <span class=\\\"token operator\\\">=</span> Singleton<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>Singleton in C</h2>\\n<p>The most elegant, simple and highly performant version of the pattern using <a href=\\\"http://msdn.microsoft.com/en-us/library/dd642331.aspx\\\">System.Lazy&#x3C;T></a> type from .NET 4.0 or higher.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Singleton</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">readonly</span> Lazy<span class=\\\"token operator\\\">&lt;</span>Singleton<span class=\\\"token operator\\\">></span> lazy <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Lazy</span><span class=\\\"token operator\\\">&lt;</span>Singleton<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Singleton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> Singleton Instance <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> lazy<span class=\\\"token punctuation\\\">.</span>Value<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n   \\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token function\\\">Singleton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Singleton in Python3</h2>\\n<p>We can use metaclass to implement Singleton in Python3.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Singleton</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Mapping from a class to its singleton instance</span>\\n    _instances <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__call__</span><span class=\\\"token punctuation\\\">(</span>cls<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">*</span>args<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span>kwargs<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">if</span> cls <span class=\\\"token operator\\\">not</span> <span class=\\\"token keyword\\\">in</span> Singleton<span class=\\\"token punctuation\\\">.</span>_instances<span class=\\\"token punctuation\\\">:</span>\\n            Singleton<span class=\\\"token punctuation\\\">.</span>_instances<span class=\\\"token punctuation\\\">[</span>cls<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> super<span class=\\\"token punctuation\\\">(</span>Singleton<span class=\\\"token punctuation\\\">,</span> cls<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>__call__<span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>args<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span>kwargs<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> Singleton<span class=\\\"token punctuation\\\">.</span>_instances<span class=\\\"token punctuation\\\">[</span>cls<span class=\\\"token punctuation\\\">]</span>\\n\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyClass</span><span class=\\\"token punctuation\\\">(</span>metaclass<span class=\\\"token operator\\\">=</span>Singleton<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">pass</span>\\n</code></pre>\\n      </div>\\n<h3>Testing</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>obj_0 <span class=\\\"token operator\\\">=</span> MyClass<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nobj_1 <span class=\\\"token operator\\\">=</span> MyClass<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\nIn <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> obj_0\\nOut<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">&lt;</span>__main__<span class=\\\"token punctuation\\\">.</span>MyClass at <span class=\\\"token number\\\">0x111130da0</span><span class=\\\"token operator\\\">></span>\\n\\nIn <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> obj_1\\nOut<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">&lt;</span>__main__<span class=\\\"token punctuation\\\">.</span>MyClass at <span class=\\\"token number\\\">0x111130da0</span><span class=\\\"token operator\\\">></span>\\n</code></pre>\\n      </div>\\n<p>For more information, visit the following links:</p>\\n<ul>\\n<li><a href=\\\"https://msdn.microsoft.com/en-us/library/ff650316.aspx\\\">MSDN: Implementing Singleton in C#</a></li>\\n<li><a href=\\\"http://csharpindepth.com/Articles/General/Singleton.aspx\\\">C# in Depth. Implementing the Singleton Pattern in C#</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/software-engineering/design-patterns/singleton/\"},\"frontmatter\":{\"title\":\"Singleton\"}}},\"pathContext\":{\"slug\":\"/software-engineering/design-patterns/singleton/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---software-engineering-design-patterns-singleton-0137ecb00ae107e4fcd7.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>The singleton is a design pattern that restricts the instantiation of a class to one object. It is useful when you want to give only one object the ability to coordinate actions across your application.</p>\\n<h2>Singleton in Android</h2>\\n<p>Singleton is a design pattern often used in Android. It is easily misused and so can cause app to be hard to maintain. It is useful in Android beause they live across fragments, activities, and rotations. </p>\\n<ul>\\n<li>Singletons are often used in Android to store temporary data</li>\\n<li>They allow the application to have one owner of the data and provides an easy way to pass data between controller classes</li>\\n<li>Singletons are destroyed when Android removes your app from memory</li>\\n<li>Singletons can make it difficult to unit test your app</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DataStore</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> DataStore sDataStore<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">private</span> List<span class=\\\"token operator\\\">&lt;</span>Data<span class=\\\"token operator\\\">></span> mData<span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> DataStore <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>Context context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>sDataStore <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      sDataStore <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">DataStore</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> sDataStore<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Make constructor private to prevent other classes from creating a DataStore instance</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token function\\\">DataStore</span><span class=\\\"token punctuation\\\">(</span>Context context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    mData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ArrayList</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// The only way for other classes to get data from DataStore</span>\\n  <span class=\\\"token keyword\\\">public</span> List<span class=\\\"token operator\\\">&lt;</span>Data<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> mData<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Singleton in PHP</h2>\\n<blockquote>\\n<p>A private constructor is used to prevent the direct creation of objects from the class.\\nThe only way to create an instance from the class is by using a static method that creates the object only if it wasnâ€™t already created.</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">Class</span> <span class=\\\"token class-name\\\">Singleton</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Hold the class instance</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token variable\\\">$instance</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n  * The constructor is private\\n  * it is ensure the class can be initialized only from itself\\n  */</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">__construct</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n  * Return the singleton instance of this class\\n  *\\n  * @return Singleton\\n  */</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token variable\\\">$instance</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      self<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token variable\\\">$instance</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Singleton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n \\n    <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token variable\\\">$instance</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token variable\\\">$obj1</span> <span class=\\\"token operator\\\">=</span> Singleton<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$obj2</span> <span class=\\\"token operator\\\">=</span> Singleton<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>Singleton in C</h2>\\n<p>The most elegant, simple and highly performant version of the pattern using <a href=\\\"http://msdn.microsoft.com/en-us/library/dd642331.aspx\\\">System.Lazy&#x3C;T></a> type from .NET 4.0 or higher.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Singleton</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">readonly</span> Lazy<span class=\\\"token operator\\\">&lt;</span>Singleton<span class=\\\"token operator\\\">></span> lazy <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Lazy</span><span class=\\\"token operator\\\">&lt;</span>Singleton<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Singleton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> Singleton Instance <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> lazy<span class=\\\"token punctuation\\\">.</span>Value<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n   \\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token function\\\">Singleton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Singleton in Python3</h2>\\n<p>We can use metaclass to implement Singleton in Python3.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Singleton</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Mapping from a class to its singleton instance</span>\\n    _instances <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__call__</span><span class=\\\"token punctuation\\\">(</span>cls<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">*</span>args<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span>kwargs<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">if</span> cls <span class=\\\"token operator\\\">not</span> <span class=\\\"token keyword\\\">in</span> Singleton<span class=\\\"token punctuation\\\">.</span>_instances<span class=\\\"token punctuation\\\">:</span>\\n            Singleton<span class=\\\"token punctuation\\\">.</span>_instances<span class=\\\"token punctuation\\\">[</span>cls<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> super<span class=\\\"token punctuation\\\">(</span>Singleton<span class=\\\"token punctuation\\\">,</span> cls<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>__call__<span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>args<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span>kwargs<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> Singleton<span class=\\\"token punctuation\\\">.</span>_instances<span class=\\\"token punctuation\\\">[</span>cls<span class=\\\"token punctuation\\\">]</span>\\n\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyClass</span><span class=\\\"token punctuation\\\">(</span>metaclass<span class=\\\"token operator\\\">=</span>Singleton<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">pass</span>\\n</code></pre>\\n      </div>\\n<h3>Testing</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>obj_0 <span class=\\\"token operator\\\">=</span> MyClass<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nobj_1 <span class=\\\"token operator\\\">=</span> MyClass<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\nIn <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> obj_0\\nOut<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">&lt;</span>__main__<span class=\\\"token punctuation\\\">.</span>MyClass at <span class=\\\"token number\\\">0x111130da0</span><span class=\\\"token operator\\\">></span>\\n\\nIn <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> obj_1\\nOut<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">&lt;</span>__main__<span class=\\\"token punctuation\\\">.</span>MyClass at <span class=\\\"token number\\\">0x111130da0</span><span class=\\\"token operator\\\">></span>\\n</code></pre>\\n      </div>\\n<p>For more information, visit the following links:</p>\\n<ul>\\n<li><a href=\\\"https://msdn.microsoft.com/en-us/library/ff650316.aspx\\\">MSDN: Implementing Singleton in C#</a></li>\\n<li><a href=\\\"http://csharpindepth.com/Articles/General/Singleton.aspx\\\">C# in Depth. Implementing the Singleton Pattern in C#</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/software-engineering/design-patterns/singleton/\"},\"frontmatter\":{\"title\":\"Singleton\"}}},\"pathContext\":{\"slug\":\"/software-engineering/design-patterns/singleton/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/software-engineering-design-patterns-singleton.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/software-engineering-design-patterns-singleton.json\n// module chunks = 17762950487987513000"],"sourceRoot":""}