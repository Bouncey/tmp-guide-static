webpackJsonp([0xd6cbd3f89a254000],{"./node_modules/json-loader/index.js!./.cache/json/cplusplus-if-else-statement.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h2>What does an If-Else Statement do?</h2>\n<ul>\n<li>The If-Else statement is an extension of the simple If statement.</li>\n<li>In the simple If statement, if the value of the test expression is false, then we skip the code of block and continue with our next statement.</li>\n<li>But many of the times we want to execute certain steps if the value of test expression is false.</li>\n<li>In such cases, we use the if-else statement.</li>\n</ul>\n<h3>General Form of If-Else Statement</h3>\n<div class="gatsby-highlight">\n      <pre class="language-cpp"><code>  <span class="token keyword">if</span> <span class="token punctuation">(</span>test expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">//True-Block statements;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">else</span>\n  <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">//False-Block statements;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>Example of If-Else Statement</h3>\n<p>If test expression is true :</p>\n<div class="gatsby-highlight">\n      <pre class="language-cpp"><code><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">//execute code of block</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">else</span>\n<span class="token punctuation">{</span>\n <span class="token comment" spellcheck="true">//skip code of block</span>\n<span class="token punctuation">}</span>\n<span class="token comment" spellcheck="true">//program continues</span>\n</code></pre>\n      </div>\n<p>If test expression is false :</p>\n<div class="gatsby-highlight">\n      <pre class="language-cpp"><code><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">//skip code of block</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">else</span>\n<span class="token punctuation">{</span>\n <span class="token comment" spellcheck="true">//execute code of block</span>\n<span class="token punctuation">}</span>\n<span class="token comment" spellcheck="true">//program continues</span>\n</code></pre>\n      </div>\n<h3>Example in C++:</h3>\n<div class="gatsby-highlight">\n      <pre class="language-cpp"><code><span class="token comment" spellcheck="true">//Program to check whether number entered by user is positive or negative</span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  \n<span class="token punctuation">{</span>\n  <span class="token keyword">int</span> no<span class="token punctuation">;</span>\n  cout<span class="token operator">&lt;&lt;</span><span class="token string">"Enter a number : "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n\n  cin<span class="token operator">>></span>no<span class="token punctuation">;</span>\n  <span class="token comment" spellcheck="true">//condition to check if number is positive or negative</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>no<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//negative</span>\n  <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//block if value is true</span>\n    cout<span class="token operator">&lt;&lt;</span><span class="token string">"You entered a positive number : "</span><span class="token operator">&lt;&lt;</span>no<span class="token operator">&lt;&lt;</span>endl <span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">else</span>       <span class="token comment" spellcheck="true">//positive</span>\n  <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//block if value is false</span>\n    cout<span class="token operator">&lt;&lt;</span><span class="token string">"You entered a negative number : "</span><span class="token operator">&lt;&lt;</span> no<span class="token operator">&lt;&lt;</span>endl <span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment" spellcheck="true">//program continues</span>\n  cout<span class="token operator">&lt;&lt;</span><span class="token string">"This step is always printed"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>Output</h3>\n<ul>\n<li>\n<p>When a positive number is entered :</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Enter a number : \n4\nYou entered a positive number : 4\nThis step is always printed</code></pre>\n      </div>\n</li>\n<li>\n<p>When a negative number is entered :</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Enter a number : \n-200\nYou entered a negative number : -200\nThis step is always printed</code></pre>\n      </div>\n</li>\n</ul>\n<p><a href="https://repl.it/MzBq">Try the code yourself</a></p>\n<p><em>CONGRATULATIONS . This is the end of the article on the IF statement</em> </p>\n<p><strong>Good Luck to all of you</strong> </p>\n<p><strong>Happy Coding ! :)</strong></p>\n<p>**Feel free to ask any queries on FreeCodeCamp’s GitHub page or <a href="https://forum.freecodecamp.org">FreeCodeCamp’s Forum</a></p>',fields:{slug:"/cplusplus/if-else-statement/"},frontmatter:{title:"If-Else Statement"}}},pathContext:{slug:"/cplusplus/if-else-statement/"}}}});
//# sourceMappingURL=path---cplusplus-if-else-statement-0d29ad0f32477a6825b7.js.map