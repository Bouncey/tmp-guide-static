webpackJsonp([0xbb59492be56e5800],{"./node_modules/json-loader/index.js!./.cache/json/javascript-naming-convention-for-javascript.json":function(e,a){e.exports={data:{markdownRemark:{html:'<p>Here you will get an overview of the different code cases that are widely used.</p>\n<h2>camelCase</h2>\n<p>In programming, camelCase formatting for variable names looks like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>var camelCase = "lower-case first word, capitalize each subsequent word";</code></pre>\n      </div>\n<h2>PascalCase</h2>\n<p>PascalCase (or CamelCase) is a variant of camelCase. It differs from camelCase by capitalizing every word, <em>including</em> the first word:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>var PascalCase = "upper-case every word";</code></pre>\n      </div>\n<h2>snake_case</h2>\n<p>Another popular case called snake_case separates each word with underscores in this manner:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>var snake_case = "lower-case everything, but separate words with underscores";</code></pre>\n      </div>',fields:{slug:"/javascript/naming-convention-for-javascript/"},frontmatter:{title:"Naming Convention for JavaScript"}}},pathContext:{slug:"/javascript/naming-convention-for-javascript/"}}}});
//# sourceMappingURL=path---javascript-naming-convention-for-javascript-ebdf8e6cc6f84ac2a100.js.map