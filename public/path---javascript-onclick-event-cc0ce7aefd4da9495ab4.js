webpackJsonp([0x64f1e0263459800],{"./node_modules/json-loader/index.js!./.cache/json/javascript-onclick-event.json":function(n,a){n.exports={data:{markdownRemark:{html:'<h2>Onclick Event</h2>\n<p>The <code>onclick</code> event in JavaScript lets you as a programmer execute a function when an element is clicked. </p>\n<h3>Example</h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"myFunction()"</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n  <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'Button was clicked!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n      </div>\n<p>In the simple example above, when a user clicks on the button they will see an alert in their browser showing <code>Button was clicked!</code>. </p>\n<h3>Adding <code>onclick</code> dynamically</h3>\n<p>The <code>onclick</code> event can also be programmatically added to any element using the following code in the following example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"foo"</span><span class="token operator">></span>click on <span class="token keyword">this</span> element<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n  <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Find the paragraph element in the page</span>\n  p<span class="token punctuation">.</span>onclick <span class="token operator">=</span> showAlert<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Add onclick function to element</span>\n    \n  <span class="token keyword">function</span> <span class="token function">showAlert</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"onclick Event triggered!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n      </div>\n<p>In the above example, when a user clicks on the <code>paragraph</code> element in the <code>html</code>, they will see an alert showing <code>onclick Event triggered</code>. </p>\n<h3>Preventing default action</h3>\n<p>However if we attach <code>onclick</code> to links (HTMLâ€™s <code>a</code> tag) we might want prevent default action to occur:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://guide.freecodecamp.org"</span> onclick<span class="token operator">=</span><span class="token string">"myAlert()"</span><span class="token operator">></span>Guides<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n  <span class="token keyword">function</span> <span class="token function">myAlert</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Link was clicked but page was not open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n      </div>\n<p>In the above example we prevented default behavior of <code>a</code> element (opening link) using <code>event.preventDefault()</code> inside our <code>onclick</code> callback function.</p>\n<h4>More Information:</h4>\n<p><a href=\'https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick\' target=\'_blank\' rel=\'nofollow\'>MDN</a></p>',fields:{slug:"/javascript/onclick-event/"},frontmatter:{title:"Onclick Event"}}},pathContext:{slug:"/javascript/onclick-event/"}}}});
//# sourceMappingURL=path---javascript-onclick-event-cc0ce7aefd4da9495ab4.js.map