{"version":3,"sources":["webpack:///path---python-comparisons-57f67a041da4be3b57f8.js","webpack:///./.cache/json/python-comparisons.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/python-comparisons.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,4EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,y5MAA46MC,QAAsGC,KAAA,wBAA8BC,aAAgBC,MAAA,wBAA+BC,aAAgBH,KAAA","file":"path---python-comparisons-57f67a041da4be3b57f8.js","sourcesContent":["webpackJsonp([2786088706509051400],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/python-comparisons.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><a href=\\\"https://docs.python.org/3/library/stdtypes.html#comparisons\\\">Python Docs - Comparisons</a></p>\\n<p>There are eight comparison operations in Python. They all have the same priority (which is higher than that of the Boolean operations). Comparisons can be chained arbitrarily; for example, <code>x &#x3C; y &#x3C;= z</code> is equivalent to <code>x &#x3C; y and y &#x3C;= z</code>, except that <code>y</code> is evaluated only once (but in both cases <code>z</code> is not evaluated at all when <code>x &#x3C; y</code> is found to be false).</p>\\n<p>This table summarizes the comparison operations:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Operation</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>&#x3C;</code></td>\\n<td>strictly less than</td>\\n</tr>\\n<tr>\\n<td><code>&#x3C;=</code></td>\\n<td>less than or equal to</td>\\n</tr>\\n<tr>\\n<td><code>></code></td>\\n<td>strictly greater than</td>\\n</tr>\\n<tr>\\n<td><code>>=</code></td>\\n<td>greater than or equal to</td>\\n</tr>\\n<tr>\\n<td><code>==</code></td>\\n<td>equal to</td>\\n</tr>\\n<tr>\\n<td><code>!=</code></td>\\n<td>not equal to</td>\\n</tr>\\n<tr>\\n<td><code>is</code></td>\\n<td>object identity</td>\\n</tr>\\n<tr>\\n<td><code>is not</code></td>\\n<td>negated object identity</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Objects of different types, except different numeric types, never compare equal. Furthermore, some types (for example, function objects) support only a degenerate notion of comparison where any two objects of that type are unequal. The <code>&#x3C;</code>, <code>&#x3C;=</code>, <code>></code> and <code>>=</code> operators will raise a <code>TypeError</code> exception when comparing a complex number with another built-in numeric type, when the objects are of different types that cannot be compared, or in other cases where there is no defined ordering.</p>\\n<p>Non-identical instances of a class normally compare as non-equal unless the class defines the <code>__eq__()</code> method.</p>\\n<p>Instances of a class cannot be ordered with respect to other instances of the same class, or other types of object, unless the class defines enough of the methods <code>__lt__()</code>, <code>__le__()</code>, <code>__gt__()</code>, and <code>__ge__()</code> (in general, <code>__lt__()</code> and <code>__eq__()</code> are sufficient, if you want the conventional meanings of the comparison operators).</p>\\n<p>The behavior of the <code>is</code> and <code>is not</code> operators cannot be customized; also they can be applied to any two objects and never raise an exception.</p>\\n<h3>Equality Comparisons - “is” vs ”==”</h3>\\n<p>In Python, there are two comparison operators which allow us to check to see if two objects are equal. The <code>is</code> operator and the <code>==</code> operator. However, there is a key difference between them!</p>\\n<p>The key difference between ‘is’ and ’==’ can be summed up as:</p>\\n<ul>\\n<li><code>is</code> is used to compare <b>identity</b></li>\\n<li><code>==</code> is used to compare <b>equality</b></li>\\n</ul>\\n<h2>Example</h2>\\n<p>First, create a list in Python.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>myListA <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>Next, create a copy of that list. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>myListB <span class=\\\"token operator\\\">=</span> myListA\\n</code></pre>\\n      </div>\\n<p>If we use the ’==’ operator or the ‘is’ operator, both will result in a <b>True</b> output. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> myListA <span class=\\\"token operator\\\">==</span> myListB <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># both lists contains similar elements</span>\\n<span class=\\\"token boolean\\\">True</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> myListB <span class=\\\"token keyword\\\">is</span> myListA <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># myListB contains the same elements</span>\\n<span class=\\\"token boolean\\\">True</span>\\n</code></pre>\\n      </div>\\n<p>This is because both myListA and myListB are pointing to the same list variable, which I defined at beginning of my Python program. Both lists are exactly the same, both in identity and in content.</p>\\n<p>However, what if I now create a new list?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>myListC <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>Performing the <code>==</code> operator still shows that both lists are the same, in terms of content.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> myListA <span class=\\\"token operator\\\">==</span> myListC\\n<span class=\\\"token boolean\\\">True</span>\\n</code></pre>\\n      </div>\\n<p>However, performing the <code>is</code> operator will now produce a <code>False</code> output. This is because myListA and myListC are two different variables, despite containing the same data. Even though they look the same, they are <b>different</b>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> myListA <span class=\\\"token keyword\\\">is</span> myListC\\n<span class=\\\"token boolean\\\">False</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># both lists have different reference</span>\\n</code></pre>\\n      </div>\\n<p>To sum up:</p>\\n<ul>\\n<li>An <code>is</code> expression outputs <code>True</code> if both variables are pointing to the same reference </li>\\n<li>An <code>==</code> expression outputs <code>True</code> if both variables contain the same data</li>\\n</ul>\\n<p><strong>TODO</strong></p>\\n<ul>\\n<li>Chained comparisons <code>w &#x3C; x &#x3C; y > z</code></li>\\n<li>Equality comparison <code>is</code> vs <code>==</code></li>\\n</ul>\",\"fields\":{\"slug\":\"/python/comparisons/\"},\"frontmatter\":{\"title\":\"Python Comparisons\"}}},\"pathContext\":{\"slug\":\"/python/comparisons/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---python-comparisons-57f67a041da4be3b57f8.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><a href=\\\"https://docs.python.org/3/library/stdtypes.html#comparisons\\\">Python Docs - Comparisons</a></p>\\n<p>There are eight comparison operations in Python. They all have the same priority (which is higher than that of the Boolean operations). Comparisons can be chained arbitrarily; for example, <code>x &#x3C; y &#x3C;= z</code> is equivalent to <code>x &#x3C; y and y &#x3C;= z</code>, except that <code>y</code> is evaluated only once (but in both cases <code>z</code> is not evaluated at all when <code>x &#x3C; y</code> is found to be false).</p>\\n<p>This table summarizes the comparison operations:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Operation</th>\\n<th>Meaning</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>&#x3C;</code></td>\\n<td>strictly less than</td>\\n</tr>\\n<tr>\\n<td><code>&#x3C;=</code></td>\\n<td>less than or equal to</td>\\n</tr>\\n<tr>\\n<td><code>></code></td>\\n<td>strictly greater than</td>\\n</tr>\\n<tr>\\n<td><code>>=</code></td>\\n<td>greater than or equal to</td>\\n</tr>\\n<tr>\\n<td><code>==</code></td>\\n<td>equal to</td>\\n</tr>\\n<tr>\\n<td><code>!=</code></td>\\n<td>not equal to</td>\\n</tr>\\n<tr>\\n<td><code>is</code></td>\\n<td>object identity</td>\\n</tr>\\n<tr>\\n<td><code>is not</code></td>\\n<td>negated object identity</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Objects of different types, except different numeric types, never compare equal. Furthermore, some types (for example, function objects) support only a degenerate notion of comparison where any two objects of that type are unequal. The <code>&#x3C;</code>, <code>&#x3C;=</code>, <code>></code> and <code>>=</code> operators will raise a <code>TypeError</code> exception when comparing a complex number with another built-in numeric type, when the objects are of different types that cannot be compared, or in other cases where there is no defined ordering.</p>\\n<p>Non-identical instances of a class normally compare as non-equal unless the class defines the <code>__eq__()</code> method.</p>\\n<p>Instances of a class cannot be ordered with respect to other instances of the same class, or other types of object, unless the class defines enough of the methods <code>__lt__()</code>, <code>__le__()</code>, <code>__gt__()</code>, and <code>__ge__()</code> (in general, <code>__lt__()</code> and <code>__eq__()</code> are sufficient, if you want the conventional meanings of the comparison operators).</p>\\n<p>The behavior of the <code>is</code> and <code>is not</code> operators cannot be customized; also they can be applied to any two objects and never raise an exception.</p>\\n<h3>Equality Comparisons - “is” vs ”==”</h3>\\n<p>In Python, there are two comparison operators which allow us to check to see if two objects are equal. The <code>is</code> operator and the <code>==</code> operator. However, there is a key difference between them!</p>\\n<p>The key difference between ‘is’ and ’==’ can be summed up as:</p>\\n<ul>\\n<li><code>is</code> is used to compare <b>identity</b></li>\\n<li><code>==</code> is used to compare <b>equality</b></li>\\n</ul>\\n<h2>Example</h2>\\n<p>First, create a list in Python.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>myListA <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>Next, create a copy of that list. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>myListB <span class=\\\"token operator\\\">=</span> myListA\\n</code></pre>\\n      </div>\\n<p>If we use the ’==’ operator or the ‘is’ operator, both will result in a <b>True</b> output. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> myListA <span class=\\\"token operator\\\">==</span> myListB <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># both lists contains similar elements</span>\\n<span class=\\\"token boolean\\\">True</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> myListB <span class=\\\"token keyword\\\">is</span> myListA <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># myListB contains the same elements</span>\\n<span class=\\\"token boolean\\\">True</span>\\n</code></pre>\\n      </div>\\n<p>This is because both myListA and myListB are pointing to the same list variable, which I defined at beginning of my Python program. Both lists are exactly the same, both in identity and in content.</p>\\n<p>However, what if I now create a new list?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>myListC <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>Performing the <code>==</code> operator still shows that both lists are the same, in terms of content.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> myListA <span class=\\\"token operator\\\">==</span> myListC\\n<span class=\\\"token boolean\\\">True</span>\\n</code></pre>\\n      </div>\\n<p>However, performing the <code>is</code> operator will now produce a <code>False</code> output. This is because myListA and myListC are two different variables, despite containing the same data. Even though they look the same, they are <b>different</b>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> myListA <span class=\\\"token keyword\\\">is</span> myListC\\n<span class=\\\"token boolean\\\">False</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># both lists have different reference</span>\\n</code></pre>\\n      </div>\\n<p>To sum up:</p>\\n<ul>\\n<li>An <code>is</code> expression outputs <code>True</code> if both variables are pointing to the same reference </li>\\n<li>An <code>==</code> expression outputs <code>True</code> if both variables contain the same data</li>\\n</ul>\\n<p><strong>TODO</strong></p>\\n<ul>\\n<li>Chained comparisons <code>w &#x3C; x &#x3C; y > z</code></li>\\n<li>Equality comparison <code>is</code> vs <code>==</code></li>\\n</ul>\",\"fields\":{\"slug\":\"/python/comparisons/\"},\"frontmatter\":{\"title\":\"Python Comparisons\"}}},\"pathContext\":{\"slug\":\"/python/comparisons/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/python-comparisons.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/python-comparisons.json\n// module chunks = 2786088706509051400"],"sourceRoot":""}