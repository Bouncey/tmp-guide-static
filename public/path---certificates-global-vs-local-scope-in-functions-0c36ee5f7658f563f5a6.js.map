{"version":3,"sources":["webpack:///path---certificates-global-vs-local-scope-in-functions-0c36ee5f7658f563f5a6.js","webpack:///./.cache/json/certificates-global-vs-local-scope-in-functions.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/certificates-global-vs-local-scope-in-functions.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,yGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,gjBAAoZC,QAAuLC,KAAA,qDAA2DC,aAAgBC,MAAA,wCAA+CC,aAAgBH,KAAA","file":"path---certificates-global-vs-local-scope-in-functions-0c36ee5f7658f563f5a6.js","sourcesContent":["webpackJsonp([9905492330828978000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/certificates-global-vs-local-scope-in-functions.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>It is possible to have both <code>local</code> and <code>global</code> variables with the same name. When you do this, the local variable takes precedence over the <code>global</code> variable.</p>\\n<p>In this example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>var someVar = \\\"Hat\\\";\\nfunction myOutfit() {\\n  var someVar = \\\"Head\\\";\\n  return someVar;\\n}</code></pre>\\n      </div>\\n<p>The function <code>myOutfit</code> will return <code>\\\"Head\\\"</code> because the <code>local</code> version of the variable is present.</p>\",\"fields\":{\"slug\":\"/certificates/global-vs-local-scope-in-functions/\"},\"frontmatter\":{\"title\":\"Global Vs Local Scope in Functions\"}}},\"pathContext\":{\"slug\":\"/certificates/global-vs-local-scope-in-functions/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---certificates-global-vs-local-scope-in-functions-0c36ee5f7658f563f5a6.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>It is possible to have both <code>local</code> and <code>global</code> variables with the same name. When you do this, the local variable takes precedence over the <code>global</code> variable.</p>\\n<p>In this example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>var someVar = \\\"Hat\\\";\\nfunction myOutfit() {\\n  var someVar = \\\"Head\\\";\\n  return someVar;\\n}</code></pre>\\n      </div>\\n<p>The function <code>myOutfit</code> will return <code>\\\"Head\\\"</code> because the <code>local</code> version of the variable is present.</p>\",\"fields\":{\"slug\":\"/certificates/global-vs-local-scope-in-functions/\"},\"frontmatter\":{\"title\":\"Global Vs Local Scope in Functions\"}}},\"pathContext\":{\"slug\":\"/certificates/global-vs-local-scope-in-functions/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/certificates-global-vs-local-scope-in-functions.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/certificates-global-vs-local-scope-in-functions.json\n// module chunks = 9905492330828978000"],"sourceRoot":""}