{"version":3,"sources":["webpack:///path---certificates-understanding-uninitialized-variables-37c561f33c9f93b780f7.js","webpack:///./.cache/json/certificates-understanding-uninitialized-variables.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/certificates-understanding-uninitialized-variables.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,4GACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,odAAAC,QAAqeC,KAAA,wDAA8DC,aAAgBC,MAAA,2CAAkDC,aAAgBH,KAAA","file":"path---certificates-understanding-uninitialized-variables-37c561f33c9f93b780f7.js","sourcesContent":["webpackJsonp([6391509113845539000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/certificates-understanding-uninitialized-variables.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>When JavaScript variables are declared, they have an initial value of <code>undefined</code>. If you do a mathematical operation on an undefined variable your result will be <code>NaN</code> which means “Not a Number”. If you concatenate a string with an undefined variable, you will get a literal string of “undefined”.</p>\\n<p>Basically this means that before you do any operations with them you <strong>must</strong> assign an initial value at some point.</p>\",\"fields\":{\"slug\":\"/certificates/understanding-uninitialized-variables/\"},\"frontmatter\":{\"title\":\"Understanding Uninitialized Variables\"}}},\"pathContext\":{\"slug\":\"/certificates/understanding-uninitialized-variables/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---certificates-understanding-uninitialized-variables-37c561f33c9f93b780f7.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>When JavaScript variables are declared, they have an initial value of <code>undefined</code>. If you do a mathematical operation on an undefined variable your result will be <code>NaN</code> which means “Not a Number”. If you concatenate a string with an undefined variable, you will get a literal string of “undefined”.</p>\\n<p>Basically this means that before you do any operations with them you <strong>must</strong> assign an initial value at some point.</p>\",\"fields\":{\"slug\":\"/certificates/understanding-uninitialized-variables/\"},\"frontmatter\":{\"title\":\"Understanding Uninitialized Variables\"}}},\"pathContext\":{\"slug\":\"/certificates/understanding-uninitialized-variables/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/certificates-understanding-uninitialized-variables.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/certificates-understanding-uninitialized-variables.json\n// module chunks = 6391509113845539000"],"sourceRoot":""}