webpackJsonp([0x8b61e4e6cecac000],{"./node_modules/json-loader/index.js!./.cache/json/logic-truth-tables.json":function(t,n){t.exports={data:{markdownRemark:{html:"<h2>Truth Tables</h2>\n<p>A truth table is a mathematical tool used in Boolean Algebra. It consists of a column each for the function variables. A final column holds the functional value evaluated for the corresponding values of the variables. For a boolean function of n variables, its truth table expansion will have 2^n rows. This is beacuse each variable has two possible states – true &#x26; false.</p>\n<h3>AND</h3>\n<p>Let us explore the truth table for the AND operator :</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>x AND y</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td>F</td>\n<td>T</td>\n<td>F</td>\n</tr>\n<tr>\n<td>T</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td>T</td>\n<td>T</td>\n<td>T</td>\n</tr>\n</tbody>\n</table>\n<p>AND is binary operator. It operates on two variables, say <code>x</code>, <code>y</code>. </p>\n<p>Thus we have 2^2 = 4 columns in our truth table !</p>\n<p>The last column is the functional value – x AND y.The logic for AND operation is that if values of x and y are both True only then the output would have the value True else it would be False. </p>\n<p>Similarly truth tables for other logical operators -</p>\n<h3>NOT</h3>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>NOT X</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F</td>\n<td>T</td>\n</tr>\n<tr>\n<td>T</td>\n<td>F</td>\n</tr>\n</tbody>\n</table>\n<h3>OR</h3>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>x OR y</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td>F</td>\n<td>T</td>\n<td>T</td>\n</tr>\n<tr>\n<td>T</td>\n<td>F</td>\n<td>T</td>\n</tr>\n<tr>\n<td>T</td>\n<td>T</td>\n<td>T</td>\n</tr>\n</tbody>\n</table>\n<h3>XOR</h3>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>x XOR y</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td>F</td>\n<td>T</td>\n<td>T</td>\n</tr>\n<tr>\n<td>T</td>\n<td>F</td>\n<td>T</td>\n</tr>\n<tr>\n<td>T</td>\n<td>T</td>\n<td>F</td>\n</tr>\n</tbody>\n</table>\n<p>OR operator:</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>x OR y</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td>F</td>\n<td>T</td>\n<td>T</td>\n</tr>\n<tr>\n<td>T</td>\n<td>F</td>\n<td>T</td>\n</tr>\n<tr>\n<td>T</td>\n<td>T</td>\n<td>T</td>\n</tr>\n</tbody>\n</table>\n<p>NOT operator:</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>NOT x</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F</td>\n<td>T</td>\n</tr>\n<tr>\n<td>T</td>\n<td>F</td>\n</tr>\n</tbody>\n</table>\n<p>Implication operator:</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>x IMPLY y</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F</td>\n<td>F</td>\n<td>T</td>\n</tr>\n<tr>\n<td>F</td>\n<td>T</td>\n<td>T</td>\n</tr>\n<tr>\n<td>T</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td>T</td>\n<td>T</td>\n<td>T</td>\n</tr>\n</tbody>\n</table>\n<p>The implication operator can often be confusing to some. It is useful to relate real world examples to aid understanding for this operator. For example, consider:\nIf it is raining then I use an umbrella.\nHere, assuming it is raining, then I use an umbrella (statement holds)\nBut if it is raining, and I don’t use an umbrella, then the statement fails to hold.\nDespite that, if it is not raining, and I still use an umbrella, then the statement also holds (it doesn’t really matter if the umbrella is used or not, since it’s not raining. Although it would look rather strange).</p>\n<p>However, the implication operator can be puzzling for propositions involved that are false in the real world. Consider:\nIf the sun is made out of water then 1 + 1 = 3.\nAccording to the implication truth table this propositional formula is true.</p>\n<p>P implies Q can also be thought as an abbreviation for NOT(P) OR Q.</p>\n<p>Double implication operator:</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>x &#x3C;-> y</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F</td>\n<td>F</td>\n<td>T</td>\n</tr>\n<tr>\n<td>F</td>\n<td>T</td>\n<td>F</td>\n</tr>\n<tr>\n<td>T</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td>T</td>\n<td>T</td>\n<td>T</td>\n</tr>\n</tbody>\n</table>\n<p>Truth tables are a powerful tool. They can be used to express &#x26; evaluate simple boolean functions and operations as well complex combinational circuits and sequential logic circuits !</p>\n<h4>More Information:</h4>\n<ul>\n<li><a href='http://hyperphysics.phy-astr.gsu.edu/hbase/Electronic/truth.html' target='_blank' rel='nofollow'>Hyperphysics - Georgia State University</a></li>\n<li><a href='https://en.wikipedia.org/wiki/Truth_table' target='_blank' rel='nofollow'>Wikipedia</a></li>\n</ul>",fields:{slug:"/logic/truth-tables/"},frontmatter:{title:"Truth Tables"}}},pathContext:{slug:"/logic/truth-tables/"}}}});
//# sourceMappingURL=path---logic-truth-tables-95f5994b44d99d2ef8d0.js.map