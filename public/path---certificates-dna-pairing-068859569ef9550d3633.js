webpackJsonp([0xeb761bd747a6b000],{"./node_modules/json-loader/index.js!./.cache/json/certificates-dna-pairing.json":function(n,s){n.exports={data:{markdownRemark:{html:'<p><img src="//discourse-user-assets.s3.amazonaws.com/original/2X/2/2798a83aaaa34ec2b18f4b8ec122b76c264a9d67.jpg" alt="DNA"></p>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/triangular_flag_on_post.png?v=3" title=":triangular_flag_on_post:" alt=":triangular_flag_on_post:" class="forum-image"> Remember to use <a><strong><code>Read-Search-Ask</code></strong></a> if you get stuck. Try to pair program <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/busts_in_silhouette.png?v=3" title=":busts_in_silhouette:" alt=":busts_in_silhouette:" class="forum-image"> and write your own code <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/pencil.png?v=3" title=":pencil:" alt=":pencil:" class="forum-image"></p>\n<h3><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/checkered_flag.png?v=3" title=":checkered_flag:" alt=":checkered_flag:" class="forum-image"> Problem Explanation:</h3>\n<ul>\n<li>You will get a DNA strand sequence and you need to get the pair and return it as a 2D array of the base pairs. Keep in mind that the provided strand should be first always.</li>\n</ul>\n<h4>Relevant Links</h4>\n<ul>\n<li><a href=\'http://forum.freecodecamp.com/t/javascript-array-prototype-push/14298\' target=\'_blank\' rel=\'nofollow\'>Array.push()</a></li>\n<li><a href=\'http://forum.freecodecamp.com/t/javascript-string-prototype-split/15944\' target=\'_blank\' rel=\'nofollow\'>String.split()</a></li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" title=":speech_balloon:" alt=":speech_balloon:" class="forum-image"> Hint: 1</h2>\n<ul>\n<li>There are two base case, A-T and C-G, these go both way. You can use regular expression, if statements of anything that you can think of.</li>\n</ul>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" title=":speech_balloon:" alt=":speech_balloon:" class="forum-image"> Hint: 2</h2>\n<ul>\n<li>I would recommend using a switch, as it makes things a lot smoother.</li>\n</ul>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" title=":speech_balloon:" alt=":speech_balloon:" class="forum-image"> Hint: 3</h2>\n<ul>\n<li>The result must be an array of arrays, so keep that in mind when pushing things.</li>\n</ul>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2>Spoiler Alert!</h2>\n<p><img src="//discourse-user-assets.s3.amazonaws.com/original/2X/2/2d6c412a50797771301e7ceabd554cef4edcd74d.gif" alt="warning sign"></p>\n<p><strong>Solution ahead!</strong></p>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/beginner.png?v=3" title=":beginner:" alt=":beginner:" class="forum-image"> Basic Code Solution:</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">pairElement</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment" spellcheck="true">// Return each strand as an array of two elements, the original and the pair.</span>\n      <span class="token keyword">var</span> paired <span class="token operator">=</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">\'https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3 ":rocket:"\'</span> target<span class="token operator">=</span><span class="token string">\'_blank\'</span> rel<span class="token operator">=</span><span class="token string">\'nofollow\'</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n      <span class="token comment" spellcheck="true">// Function to check with strand to pair.</span>\n      <span class="token keyword">var</span> search <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">switch</span> <span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">case</span> <span class="token string">\'A\'</span><span class="token punctuation">:</span>\n            paired<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'A\'</span><span class="token punctuation">,</span> <span class="token string">\'T\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n          <span class="token keyword">case</span> <span class="token string">\'T\'</span><span class="token punctuation">:</span>\n            paired<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'T\'</span><span class="token punctuation">,</span> <span class="token string">\'A\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n          <span class="token keyword">case</span> <span class="token string">\'C\'</span><span class="token punctuation">:</span>\n            paired<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'C\'</span><span class="token punctuation">,</span> <span class="token string">\'G\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n          <span class="token keyword">case</span> <span class="token string">\'G\'</span><span class="token punctuation">:</span>\n            paired<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'G\'</span><span class="token punctuation">,</span> <span class="token string">\'C\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n      <span class="token comment" spellcheck="true">// Loops through the input and pair.</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">search</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> paired<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment" spellcheck="true">// test here</span>\n    <span class="token function">pairElement</span><span class="token punctuation">(</span><span class="token string">"GCG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CLmz/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<h3>Code Explanation:</h3>\n<ul>\n<li>The program is very simple, the best solution that I have come up with is to use a switch to catch all the possible four elements. Using if statements would take too much code. You could also use Regular Expressions.</li>\n<li>Since we have to the original and the pair, I decided to take all four cases instead of the base two.</li>\n<li>Create an empty array and use the <code>search</code> function to push the right values to the array and return them.</li>\n</ul>\n<h4>Relevant Links</h4>\n<ul>\n<li><a>Switch Statements</a></li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/sunflower.png?v=3" title=":sunflower:" alt=":sunflower:" class="forum-image"> Intermediate Code Solution:</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">pairElement</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment" spellcheck="true">//define a map object with all pair possibilities </span>\n      <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>T<span class="token punctuation">:</span><span class="token string">\'A\'</span><span class="token punctuation">,</span> A<span class="token punctuation">:</span><span class="token string">\'T\'</span><span class="token punctuation">,</span> G<span class="token punctuation">:</span><span class="token string">\'C\'</span><span class="token punctuation">,</span> C<span class="token punctuation">:</span><span class="token string">\'G\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token comment" spellcheck="true">//split str into a char Array</span>\n      strArr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment" spellcheck="true">//replace each Array item with a 2d Array using map</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        strArr<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">\'https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3 ":rocket:"\'</span> target<span class="token operator">=</span><span class="token string">\'_blank\'</span> rel<span class="token operator">=</span><span class="token string">\'nofollow\'</span><span class="token operator">></span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>strArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>strArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n     <span class="token keyword">return</span> strArr<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment" spellcheck="true">// test here</span>\n    <span class="token function">pairElement</span><span class="token punctuation">(</span><span class="token string">"GCG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3" title=":rocket:" alt=":rocket:" class="forum-image"> <a href=\'https://repl.it/CLnA/0\' target=\'_blank\' rel=\'nofollow\'>Run Code</a></p>\n<h2>Code Explanation:</h2>\n<ul>\n<li>First define an object with all pair possibilities, this allows us to easily find by key or value.</li>\n<li>Split <code>str</code> into a characters array so we can use each letter to find its pair.</li>\n<li>Use a loop to go throw the array of characters and replace each character by an array of the pair, thus creating 2d arrays.</li>\n</ul>\n<h4>Relevant Links</h4>\n<ul>\n<li><a>Bracket Notation for objects</a></li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/clipboard.png?v=3" title=":clipboard:" alt=":clipboard:" class="forum-image"> NOTES FOR CONTRIBUTIONS:</h2>\n<ul>\n<li><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3" title=":warning:" alt=":warning:" class="forum-image"> <strong>DO NOT</strong> add solutions that are similar to any existing solutions. If you think it is <strong><em>similar but better</em></strong>, then try to merge (or replace) the existing similar solution.</li>\n<li>Add an explanation of your solution.</li>\n<li>Categorize the solution in one of the following categories — <strong>Basic</strong>, <strong>Intermediate</strong> and <strong>Advanced</strong>. <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/traffic_light.png?v=3" title=":traffic_light:" alt=":traffic_light:" class="forum-image"></li>\n<li>Please add your username only if you have added any <strong>relevant main contents</strong>. (<img src="https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3" title=":warning:" alt=":warning:" class="forum-image"> <strong><em>DO NOT</em></strong> <em>remove any existing usernames</em>)</li>\n</ul>\n<blockquote>\n<p>See <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/point_right.png?v=3" title=":point_right:" alt=":point_right:" class="forum-image"> <a href=\'http://forum.freecodecamp.com/t/algorithm-article-template/14272\' target=\'_blank\' rel=\'nofollow\'><strong><code>Wiki Challenge Solution Template</code></strong></a> for reference.</p>\n</blockquote>',fields:{slug:"/certificates/dna-pairing/"},frontmatter:{title:"Dna Pairing"}}},pathContext:{slug:"/certificates/dna-pairing/"}}}});
//# sourceMappingURL=path---certificates-dna-pairing-068859569ef9550d3633.js.map