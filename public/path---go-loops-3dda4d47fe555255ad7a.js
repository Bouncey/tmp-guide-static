webpackJsonp([0x456d7ba34aa0c000],{"./node_modules/json-loader/index.js!./.cache/json/go-loops.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h1>For loop in Go</h1>\n<p>Go has only <code>for</code> loop. The basic <code>for</code> loop has three components separated by <code>;</code> -</p>\n<ul>\n<li>\n<p>the <strong>init</strong> statement: executed before the first iteration</p>\n</li>\n<li>\n<p>the <strong>condition</strong> expression: evaluated before every iteration</p>\n</li>\n<li>\n<p>the <strong>post</strong> statement: executed at the end of every iteration</p>\n</li>\n</ul>\n<p>The <strong>init</strong> statement is often a short variable declaration. The variables declared there are visible only in the scope of the <code>for</code> statement. The loop stops iterating once the boolean condition evaluates to false.</p>\n<p>An example of the <code>for</code> loop is given below -</p>\n<p><strong>for.go</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">"fmt"</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tsum <span class="token operator">:=</span> <span class="token number">0</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\tsum <span class="token operator">+=</span> i\n\t<span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"The sum of first 10 natural numbers is"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Running the above program produces an output similar to the following output -</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ go run for.go\nThe sum of first 10 natural numbers is 55</code></pre>\n      </div>\n<h2>Replacement for while-loop</h2>\n<p>To simulate while-loop of other languages, you can simply exclude the <strong>init</strong> and <strong>post</strong> statement:</p>\n<div class="gatsby-highlight">\n      <pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tnum <span class="token operator">:=</span> <span class="token number">1</span>\n\t<span class="token keyword">for</span> num <span class="token operator">&lt;=</span> <span class="token number">1000</span> <span class="token punctuation">{</span>\n\t\tnum <span class="token operator">*=</span> <span class="token number">2</span>\n\t<span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"The smallest power of 2 above 1000 is"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>',fields:{slug:"/go/loops/"},frontmatter:{title:"Loops"}}},pathContext:{slug:"/go/loops/"}}}});
//# sourceMappingURL=path---go-loops-3dda4d47fe555255ad7a.js.map