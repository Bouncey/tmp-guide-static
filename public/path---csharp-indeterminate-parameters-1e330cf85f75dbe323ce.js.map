{"version":3,"sources":["webpack:///path---csharp-indeterminate-parameters-1e330cf85f75dbe323ce.js","webpack:///./.cache/json/csharp-indeterminate-parameters.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/csharp-indeterminate-parameters.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,yFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,sgCAAkzBC,QAA+OC,KAAA,qCAA2CC,aAAgBC,MAAA,8BAAqCC,aAAgBH,KAAA","file":"path---csharp-indeterminate-parameters-1e330cf85f75dbe323ce.js","sourcesContent":["webpackJsonp([17413364954165084000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/csharp-indeterminate-parameters.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Indeterminate parameters</h1>\\n<p>Let’s imagine we need to write a method where the number of parameters are variable. How can we do that? Well, C# (and other languages) has an easy way to do so; by using the <code>params</code> keyword on a method’s parameter we can call that method with a variable number of parameters. </p>\\n<h2>Example</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>public static void Main (string[] args) {\\n\\t// Call PrintParams with 3 parameters\\n\\tPrintParams(1, 2, 3);\\n\\t\\n\\t// Call PrintParams with 1 parameter\\n\\tPrintParams(4);\\n}\\n\\npublic static void PrintParams(params int[] values)\\n{\\n\\t// Iterate through parameters\\n\\tfor (int i = 0; i < values.Length; i++)\\n\\t{\\n\\t\\tConsole.WriteLine(\\\"Parameter {0} is {1}\\\", i, values[i]);\\n\\t}\\n}</code></pre>\\n      </div>\\n<h2>Output:</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>> Parameter 0 is 1\\n> Parameter 1 is 2\\n> Parameter 2 is 3\\n> Parameter 0 is 4</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/csharp/indeterminate-parameters/\"},\"frontmatter\":{\"title\":\"Indeterminate parameters\"}}},\"pathContext\":{\"slug\":\"/csharp/indeterminate-parameters/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---csharp-indeterminate-parameters-1e330cf85f75dbe323ce.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Indeterminate parameters</h1>\\n<p>Let’s imagine we need to write a method where the number of parameters are variable. How can we do that? Well, C# (and other languages) has an easy way to do so; by using the <code>params</code> keyword on a method’s parameter we can call that method with a variable number of parameters. </p>\\n<h2>Example</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>public static void Main (string[] args) {\\n\\t// Call PrintParams with 3 parameters\\n\\tPrintParams(1, 2, 3);\\n\\t\\n\\t// Call PrintParams with 1 parameter\\n\\tPrintParams(4);\\n}\\n\\npublic static void PrintParams(params int[] values)\\n{\\n\\t// Iterate through parameters\\n\\tfor (int i = 0; i < values.Length; i++)\\n\\t{\\n\\t\\tConsole.WriteLine(\\\"Parameter {0} is {1}\\\", i, values[i]);\\n\\t}\\n}</code></pre>\\n      </div>\\n<h2>Output:</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>> Parameter 0 is 1\\n> Parameter 1 is 2\\n> Parameter 2 is 3\\n> Parameter 0 is 4</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/csharp/indeterminate-parameters/\"},\"frontmatter\":{\"title\":\"Indeterminate parameters\"}}},\"pathContext\":{\"slug\":\"/csharp/indeterminate-parameters/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/csharp-indeterminate-parameters.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/csharp-indeterminate-parameters.json\n// module chunks = 17413364954165084000"],"sourceRoot":""}