{"version":3,"sources":["webpack:///path---c-arrays-and-strings-356b180d8e95feacbc9a.js","webpack:///./.cache/json/c-arrays-and-strings.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/c-arrays-and-strings.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,8EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,yogBAAqmgBC,QAAigBC,KAAA,0BAAgCC,aAAgBC,MAAA,wBAA+BC,aAAgBH,KAAA","file":"path---c-arrays-and-strings-356b180d8e95feacbc9a.js","sourcesContent":["webpackJsonp([17321429222614680000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/c-arrays-and-strings.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Arrays in C</h1>\\n<p>Arrays allow for a set of variables to be grouped together as one variable. This is useful in its own right, but also because strings fall into this category. Strings, which are how we represent words and sentences in computer languages, are just collections of character variables. Therefore, we represent strings using arrays in C.</p>\\n<h2>Making an Array</h2>\\n<p>A normal integer variable would be declared like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> my_variable<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>To declare this as an array, and make it an array of 5 integers, it can be declared like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> my_array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This will produce an array called <code>my_array</code> that can hold 5 integers. However, none of the positions in the array have been set (yet). You could declare the array, and have the values be set at the beginning:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> my_array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Notice that in this example, we didn’t bother specifying a number in the square brackets. This is because the curly brackets have values in them that will be assigned to each position in the array. You could put a number in the brackets anyway, as long as you made sure to create enough memory locations to store the values you’ve passing in.</p>\\n<p>Now that the array has been declared with 5 values, it has 5 memory locations. Consider this table for a visual example of that:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Position</th>\\n<th>0</th>\\n<th>1</th>\\n<th>2</th>\\n<th>3</th>\\n<th>4</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Value</td>\\n<td>1</td>\\n<td>5</td>\\n<td>3</td>\\n<td>6</td>\\n<td>2</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Notice that even though there are 5 memory locations, the array positions only go up to 4. This is because arrays in C (and most other languages) start at 0, because arrays are implemented using pointers. When you call a position in an array, you’re really calling that memory location plus a certain number. To get the beginning of the array, move 0 places in memory, to get the position after that, move one place in memory, and so on.</p>\\n<p>Here’s an example of setting the array to 9 at position 1:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>my_array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>So it’s just like any other variable, except it has multiple values to access using the number within the square brackets. Values can be returned that way, too:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> variable <span class=\\\"token operator\\\">=</span> my_array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This will declare <code>variable</code> to be an integer equal to the value at position 4 of <code>my_array</code>. However, because <code>variable</code> is a single <code>int</code>, and not an array, this is <strong>not</strong> code that will have the right outcome:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This code will NOT work properly!</span>\\n<span class=\\\"token keyword\\\">int</span> variable <span class=\\\"token operator\\\">=</span> my_array<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Any integer can be placed in the square brackets to get a position in the array. Those integers can be variables, too. Take a look at this example, which prints the contents of an array:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">int</span> my_array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> count <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">;</span> count<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"%i, \\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> my_array<span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Strings</h2>\\n<p>Arrays are sets of variables, and strings are sets of characters. As a result, we can represent strings with an array. You <em>can</em> declare something in the same way as before, but you’ll need to place ‘\\\\0’ as one of your values (more on that in a minute!):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">char</span> hello_world<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'H'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'e'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'l'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'l'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'o'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">' '</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'w'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'o'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'r'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'l'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'d'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'!'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'\\\\0'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Yikes. That’s not really a great solution. Thankfully, C provides a better way with strings in mind:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">char</span> hello_world<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Hello world!\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>That’s much nicer. It doesn’t even require you to place the ‘\\\\0’ at the end, either. So what was that?</p>\\n<h3>Null Termination</h3>\\n<p>Strings in C are null terminated, meaning that they end with the null character. This way, the compiler (and your and everyone else’s) code will know where the string ends: once the character is null, the string is over.</p>\\n<p>Of course, there is no ‘null’ button on your keyboard, but you still need to type it out somehow. That’s what \\\\0 does. Whenever the C compiler sees \\\\0, it will insert a null character. It’s just like how \\\\n prints a newline.</p>\\n<h3>Printing Strings</h3>\\n<p>Another thing C makes easier for us is the printing of strings. Rather than forcing you to print out every character in the array, you can just use the %s format specifier, and treat the string like you would any <code>int</code> or <code>double</code> value. Here’s an example of the hello, world program from the very beginning, made slightly more complicated with strings:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">char</span> hello_world<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Hello, World!\\\\n\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"%s\\\"</span><span class=\\\"token punctuation\\\">,</span> hello_world<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>Playing with Strings</h3>\\n<p>Printing strings is easy, but other operations are slightly more complex. Thankfully, the <code>string.h</code> library has some helpful functions to use for a number of situations.</p>\\n<h4>Copying: <code>strcpy</code></h4>\\n<p><code>strcpy</code> (from ‘string copy’) copies a string. For example, this code snippet will copy the contents of the string <code>second</code> into the string <code>first</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token function\\\">strpy</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">,</span> second<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>Concatenate: <code>strcat</code></h4>\\n<p><code>strcat</code> (from ‘string concatenate’) will concatenate a string, meaning it will take the contents of one string and place it on the end of another string. In this example, the contents of <code>second</code> will be concatenated onto <code>first</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token function\\\">strcat</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">,</span> second<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>Get length: <code>strlen</code></h4>\\n<p><code>strlen</code> (from ‘string length’) will return an integer value corresponding to the length of the string. In this example, an integer called <code>string_length</code> will be assigned the length of <code>my_string</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>string_length <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">strlen</span><span class=\\\"token punctuation\\\">(</span>my_string<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>Compare: <code>strcmp</code></h4>\\n<p><code>strcmp</code> (from ‘string compare’) compares two strings. The integer value it returns is 0 if they are the same, but it will also return negative if the value of the first (by adding up characters) is less than the value of the second, and positive if the first is greater than the second. Take a look at an example of how this might be used:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">strcmp</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">,</span> second<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"These strings are the same!\\\\n\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"These strings are not the same!\\\\n\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Notice the <code>!</code>, which is needed because this function returns 0 if they are the same. Placing the exclamation point here will make that comparison return true.</p>\\n<h4>Split a string: <code>strtok</code></h4>\\n<p><code>strtok</code> (from ‘string token’) breaks a string into a series of tokens using a  delimiter. In this example, strtok breaks  string str into a series of tokens using the delimiter delim:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">char</span> <span class=\\\"token operator\\\">*</span><span class=\\\"token function\\\">strtok</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">char</span> <span class=\\\"token operator\\\">*</span>str<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token keyword\\\">char</span> <span class=\\\"token operator\\\">*</span>delim<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h1>Before you go on…</h1>\\n<h2>A Review</h2>\\n<ul>\\n<li>Arrays are collections of variables.</li>\\n<li>Arrays have separate positions that can be declared with brackets, and accessed with square brackets.</li>\\n<li>Strings are arrays too, but we can treat them a little differently: they can be declared using double quotes, and printed using %s.</li>\\n<li>Strings have their own library, <code>string.h</code>, which has some handy functions to use.</li>\\n</ul>\",\"fields\":{\"slug\":\"/c/arrays-and-strings/\"},\"frontmatter\":{\"title\":\"Arrays and Strings\"}}},\"pathContext\":{\"slug\":\"/c/arrays-and-strings/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---c-arrays-and-strings-356b180d8e95feacbc9a.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Arrays in C</h1>\\n<p>Arrays allow for a set of variables to be grouped together as one variable. This is useful in its own right, but also because strings fall into this category. Strings, which are how we represent words and sentences in computer languages, are just collections of character variables. Therefore, we represent strings using arrays in C.</p>\\n<h2>Making an Array</h2>\\n<p>A normal integer variable would be declared like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> my_variable<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>To declare this as an array, and make it an array of 5 integers, it can be declared like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> my_array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This will produce an array called <code>my_array</code> that can hold 5 integers. However, none of the positions in the array have been set (yet). You could declare the array, and have the values be set at the beginning:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> my_array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Notice that in this example, we didn’t bother specifying a number in the square brackets. This is because the curly brackets have values in them that will be assigned to each position in the array. You could put a number in the brackets anyway, as long as you made sure to create enough memory locations to store the values you’ve passing in.</p>\\n<p>Now that the array has been declared with 5 values, it has 5 memory locations. Consider this table for a visual example of that:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Position</th>\\n<th>0</th>\\n<th>1</th>\\n<th>2</th>\\n<th>3</th>\\n<th>4</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Value</td>\\n<td>1</td>\\n<td>5</td>\\n<td>3</td>\\n<td>6</td>\\n<td>2</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Notice that even though there are 5 memory locations, the array positions only go up to 4. This is because arrays in C (and most other languages) start at 0, because arrays are implemented using pointers. When you call a position in an array, you’re really calling that memory location plus a certain number. To get the beginning of the array, move 0 places in memory, to get the position after that, move one place in memory, and so on.</p>\\n<p>Here’s an example of setting the array to 9 at position 1:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>my_array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>So it’s just like any other variable, except it has multiple values to access using the number within the square brackets. Values can be returned that way, too:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> variable <span class=\\\"token operator\\\">=</span> my_array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This will declare <code>variable</code> to be an integer equal to the value at position 4 of <code>my_array</code>. However, because <code>variable</code> is a single <code>int</code>, and not an array, this is <strong>not</strong> code that will have the right outcome:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This code will NOT work properly!</span>\\n<span class=\\\"token keyword\\\">int</span> variable <span class=\\\"token operator\\\">=</span> my_array<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Any integer can be placed in the square brackets to get a position in the array. Those integers can be variables, too. Take a look at this example, which prints the contents of an array:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">int</span> my_array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> count <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">;</span> count<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"%i, \\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> my_array<span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Strings</h2>\\n<p>Arrays are sets of variables, and strings are sets of characters. As a result, we can represent strings with an array. You <em>can</em> declare something in the same way as before, but you’ll need to place ‘\\\\0’ as one of your values (more on that in a minute!):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">char</span> hello_world<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'H'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'e'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'l'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'l'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'o'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">' '</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'w'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'o'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'r'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'l'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'d'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'!'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'\\\\0'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Yikes. That’s not really a great solution. Thankfully, C provides a better way with strings in mind:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">char</span> hello_world<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Hello world!\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>That’s much nicer. It doesn’t even require you to place the ‘\\\\0’ at the end, either. So what was that?</p>\\n<h3>Null Termination</h3>\\n<p>Strings in C are null terminated, meaning that they end with the null character. This way, the compiler (and your and everyone else’s) code will know where the string ends: once the character is null, the string is over.</p>\\n<p>Of course, there is no ‘null’ button on your keyboard, but you still need to type it out somehow. That’s what \\\\0 does. Whenever the C compiler sees \\\\0, it will insert a null character. It’s just like how \\\\n prints a newline.</p>\\n<h3>Printing Strings</h3>\\n<p>Another thing C makes easier for us is the printing of strings. Rather than forcing you to print out every character in the array, you can just use the %s format specifier, and treat the string like you would any <code>int</code> or <code>double</code> value. Here’s an example of the hello, world program from the very beginning, made slightly more complicated with strings:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">char</span> hello_world<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Hello, World!\\\\n\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"%s\\\"</span><span class=\\\"token punctuation\\\">,</span> hello_world<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>Playing with Strings</h3>\\n<p>Printing strings is easy, but other operations are slightly more complex. Thankfully, the <code>string.h</code> library has some helpful functions to use for a number of situations.</p>\\n<h4>Copying: <code>strcpy</code></h4>\\n<p><code>strcpy</code> (from ‘string copy’) copies a string. For example, this code snippet will copy the contents of the string <code>second</code> into the string <code>first</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token function\\\">strpy</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">,</span> second<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>Concatenate: <code>strcat</code></h4>\\n<p><code>strcat</code> (from ‘string concatenate’) will concatenate a string, meaning it will take the contents of one string and place it on the end of another string. In this example, the contents of <code>second</code> will be concatenated onto <code>first</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token function\\\">strcat</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">,</span> second<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>Get length: <code>strlen</code></h4>\\n<p><code>strlen</code> (from ‘string length’) will return an integer value corresponding to the length of the string. In this example, an integer called <code>string_length</code> will be assigned the length of <code>my_string</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>string_length <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">strlen</span><span class=\\\"token punctuation\\\">(</span>my_string<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>Compare: <code>strcmp</code></h4>\\n<p><code>strcmp</code> (from ‘string compare’) compares two strings. The integer value it returns is 0 if they are the same, but it will also return negative if the value of the first (by adding up characters) is less than the value of the second, and positive if the first is greater than the second. Take a look at an example of how this might be used:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">strcmp</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">,</span> second<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"These strings are the same!\\\\n\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"These strings are not the same!\\\\n\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Notice the <code>!</code>, which is needed because this function returns 0 if they are the same. Placing the exclamation point here will make that comparison return true.</p>\\n<h4>Split a string: <code>strtok</code></h4>\\n<p><code>strtok</code> (from ‘string token’) breaks a string into a series of tokens using a  delimiter. In this example, strtok breaks  string str into a series of tokens using the delimiter delim:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">char</span> <span class=\\\"token operator\\\">*</span><span class=\\\"token function\\\">strtok</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">char</span> <span class=\\\"token operator\\\">*</span>str<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token keyword\\\">char</span> <span class=\\\"token operator\\\">*</span>delim<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h1>Before you go on…</h1>\\n<h2>A Review</h2>\\n<ul>\\n<li>Arrays are collections of variables.</li>\\n<li>Arrays have separate positions that can be declared with brackets, and accessed with square brackets.</li>\\n<li>Strings are arrays too, but we can treat them a little differently: they can be declared using double quotes, and printed using %s.</li>\\n<li>Strings have their own library, <code>string.h</code>, which has some handy functions to use.</li>\\n</ul>\",\"fields\":{\"slug\":\"/c/arrays-and-strings/\"},\"frontmatter\":{\"title\":\"Arrays and Strings\"}}},\"pathContext\":{\"slug\":\"/c/arrays-and-strings/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/c-arrays-and-strings.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/c-arrays-and-strings.json\n// module chunks = 17321429222614680000"],"sourceRoot":""}