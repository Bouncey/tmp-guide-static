{"version":3,"sources":["webpack:///path---javascript-tutorials-iterate-with-javascript-for-loops-869c6d16c1a7f7c5df60.js","webpack:///./.cache/json/javascript-tutorials-iterate-with-javascript-for-loops.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/javascript-tutorials-iterate-with-javascript-for-loops.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,gHACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,8hDAAy6BC,QAA8oBC,KAAA,4DAAkEC,aAAgBC,MAAA,uCAA8CC,aAAgBH,KAAA","file":"path---javascript-tutorials-iterate-with-javascript-for-loops-869c6d16c1a7f7c5df60.js","sourcesContent":["webpackJsonp([14499543059887962000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/javascript-tutorials-iterate-with-javascript-for-loops.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>The most common type of JavaScript loop is called a <code>for loop</code> because it runs <code>for</code> a specific number of times.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>var ourArray = [];\\nfor(var i = 0; i < 5; i++) {\\n  ourArray.push(i);\\n}</code></pre>\\n      </div>\\n<p>ourArray will now contain [0,1,2,3,4]</p>\\n<h2>More about for loops</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>for(var i = 0; i < 5; i++) {  // There are 3 parts here</code></pre>\\n      </div>\\n<p>There are three parts to for loop. They are separated by semicolons.</p>\\n<ol>\\n<li>\\n<p>The initialization: <code>var i = 0;</code> - This code runs only once at the start of the loop. It’s usually used to declare the counter variable (with <code>var</code>) and initialize the counter (in this case it is set to 0).</p>\\n</li>\\n<li>\\n<p>The condition: <code>i &#x3C; 5;</code> - The loop will run as long as this is <code>true</code>. That means that as soon as <code>i</code> is equal to 5, the loop will stop looping. Note that the inside of the loop will never see <code>i</code> as 5 because it will stop before then. If this condition is initially <code>false</code>, the loop will never execute.</p>\\n</li>\\n<li>\\n<p>The increment: <code>i++</code> - This code is run at the end of each loop. It’s usually a simple increment (<code>++</code> operator), but can really be any mathematical transformation. It is used to move the counter (<code>i</code>) forward (or backwards, or whatever.</p>\\n</li>\\n</ol>\",\"fields\":{\"slug\":\"/javascript/tutorials/iterate-with-javascript-for-loops/\"},\"frontmatter\":{\"title\":\"Iterate with JavaScript for Loops\"}}},\"pathContext\":{\"slug\":\"/javascript/tutorials/iterate-with-javascript-for-loops/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-tutorials-iterate-with-javascript-for-loops-869c6d16c1a7f7c5df60.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>The most common type of JavaScript loop is called a <code>for loop</code> because it runs <code>for</code> a specific number of times.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>var ourArray = [];\\nfor(var i = 0; i < 5; i++) {\\n  ourArray.push(i);\\n}</code></pre>\\n      </div>\\n<p>ourArray will now contain [0,1,2,3,4]</p>\\n<h2>More about for loops</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>for(var i = 0; i < 5; i++) {  // There are 3 parts here</code></pre>\\n      </div>\\n<p>There are three parts to for loop. They are separated by semicolons.</p>\\n<ol>\\n<li>\\n<p>The initialization: <code>var i = 0;</code> - This code runs only once at the start of the loop. It’s usually used to declare the counter variable (with <code>var</code>) and initialize the counter (in this case it is set to 0).</p>\\n</li>\\n<li>\\n<p>The condition: <code>i &#x3C; 5;</code> - The loop will run as long as this is <code>true</code>. That means that as soon as <code>i</code> is equal to 5, the loop will stop looping. Note that the inside of the loop will never see <code>i</code> as 5 because it will stop before then. If this condition is initially <code>false</code>, the loop will never execute.</p>\\n</li>\\n<li>\\n<p>The increment: <code>i++</code> - This code is run at the end of each loop. It’s usually a simple increment (<code>++</code> operator), but can really be any mathematical transformation. It is used to move the counter (<code>i</code>) forward (or backwards, or whatever.</p>\\n</li>\\n</ol>\",\"fields\":{\"slug\":\"/javascript/tutorials/iterate-with-javascript-for-loops/\"},\"frontmatter\":{\"title\":\"Iterate with JavaScript for Loops\"}}},\"pathContext\":{\"slug\":\"/javascript/tutorials/iterate-with-javascript-for-loops/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-tutorials-iterate-with-javascript-for-loops.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/javascript-tutorials-iterate-with-javascript-for-loops.json\n// module chunks = 14499543059887962000"],"sourceRoot":""}