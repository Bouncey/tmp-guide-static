{"version":3,"sources":["webpack:///path---python-for-loop-statements-a08aa0b79d7d43b60bcd.js","webpack:///./.cache/json/python-for-loop-statements.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/python-for-loop-statements.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,oFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,8/aAAuiRC,QAAggLC,KAAA,gCAAsCC,aAAgBC,MAAA,yBAAgCC,aAAgBH,KAAA","file":"path---python-for-loop-statements-a08aa0b79d7d43b60bcd.js","sourcesContent":["webpackJsonp([16540373062040146000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/python-for-loop-statements.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>For Loop Statements</h2>\\n<p>Python utilizes a for loop to iterate over a list of elements. Unlike C or Java, which use the for loop to change a value in steps and access something such as an array using that value.</p>\\n<p>For loops iterate over collection based data structures like lists, tuples, and dictionaries.</p>\\n<p>The basic syntax is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> value <span class=\\\"token keyword\\\">in</span> list_of_values<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># use value inside this block</span>\\n</code></pre>\\n      </div>\\n<p>In general, you can use anything as the iterator value, where entries of the iterable can be assigned to. E.g. you can unpack tuples from a list of tuples:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>list_of_tuples <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token keyword\\\">for</span> a<span class=\\\"token punctuation\\\">,</span> b <span class=\\\"token keyword\\\">in</span> list_of_tuples<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"a:\\\"</span><span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"b:\\\"</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>On the other hand, you can loop over anything that is iterable. You can call a function or use a list literal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> person <span class=\\\"token keyword\\\">in</span> load_persons<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The name is:\\\"</span><span class=\\\"token punctuation\\\">,</span> person<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> character <span class=\\\"token keyword\\\">in</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"P\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"y\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"t\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"h\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"o\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"n\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Give me a '{}'!\\\"</span><span class=\\\"token punctuation\\\">.</span>format<span class=\\\"token punctuation\\\">(</span>character<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Some ways in which For loops are used: </p>\\n<p><strong>Iterate over the range() function</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> range<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Rather than being a function, range is actually an immutable sequence type.\\nThe output will contain results from lower bound i.e 0 to the upper bound i.e 10 but excluding 10.By default the lower bound or the starting index is set to zero.\\nOutput:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>\\n0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n></code></pre>\\n      </div>\\n<p>Additionally, one can specify the lower bound of the sequence and even the step of the sequence by adding a second and a third parameter. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> range<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">#From 4 to 9 using a step of two</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>\\n4\\n6\\n8\\n></code></pre>\\n      </div>\\n<p><strong>xrange() function</strong></p>\\n<p>For the most part, xrange and range are the exact same in terms of functionality. They both provide a way to generate a list of integers for you to use, however you please. The only difference is that range returns a Python list object and xrange returns an xrange object. It means that xrange doesnâ€™t actually generate a static list at run-time like range does. It creates the values as you need them with a special technique called yielding. This technique is used with a type of object known as generators.</p>\\n<p>One more thing to add. In Python 3.x, the xrange function does not exist anymore. The range function now does what xrange does in Python 2.x</p>\\n<p><strong>Iterate over values in a list or tuple</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>A <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">65</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"thank you\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">for</span> value <span class=\\\"token keyword\\\">in</span> A<span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>\\nhello\\n1\\n65\\nthank you\\n[2, 3]\\n></code></pre>\\n      </div>\\n<p><strong>Iterate over keys in a dictionary (aka hashmap)</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>fruits_to_colors <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"apple\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"#ff0000\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token string\\\">\\\"lemon\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"#ffff00\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token string\\\">\\\"orange\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"#ffa500\\\"</span><span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">for</span> key <span class=\\\"token keyword\\\">in</span> fruits_to_colors<span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> fruits_to_colors<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>\\napple #ff0000\\nlemon #ffff00\\norange #ffa500\\n></code></pre>\\n      </div>\\n<p><strong>Iterate over two lists of same size in a single loop with the zip() function</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>A <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"a\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"b\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"c\\\"</span><span class=\\\"token punctuation\\\">]</span>\\nB <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"a\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"d\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"e\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token keyword\\\">for</span> a<span class=\\\"token punctuation\\\">,</span> b <span class=\\\"token keyword\\\">in</span> zip<span class=\\\"token punctuation\\\">(</span>A<span class=\\\"token punctuation\\\">,</span> B<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span> a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">,</span> a <span class=\\\"token operator\\\">==</span> b\\n  \\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>\\na a True\\nb d False\\nc e False\\n></code></pre>\\n      </div>\\n<p><strong>Iterate over a list and get the corresponding index with the enumerate() function</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>A <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"this\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"is\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"something\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"fun\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token keyword\\\">for</span> index<span class=\\\"token punctuation\\\">,</span>word <span class=\\\"token keyword\\\">in</span> enumerate<span class=\\\"token punctuation\\\">(</span>A<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">,</span> word<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>\\n0 this\\n1 is\\n2 something\\n3 fun\\n></code></pre>\\n      </div>\\n<p>A common use case is iterating over a dictionary:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> name<span class=\\\"token punctuation\\\">,</span> phonenumber <span class=\\\"token keyword\\\">in</span> contacts<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"is reachable under\\\"</span><span class=\\\"token punctuation\\\">,</span> phonenumber<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>If you absolutely need to access the current index of your iteration, do <strong>NOT</strong> use <code>range(len(iterable))</code>! This is an extremely bad practice and will get you plenty of chuckles from senior Python developers. Use the built in function <code>enumerate()</code> instead:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> index<span class=\\\"token punctuation\\\">,</span> item <span class=\\\"token keyword\\\">in</span> enumerate<span class=\\\"token punctuation\\\">(</span>shopping_basket<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Item\\\"</span><span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"is a\\\"</span><span class=\\\"token punctuation\\\">,</span> item<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>More Information:</h4>\\n<ul>\\n<li>\\n<p><a href='https://docs.python.org/2.7/tutorial/controlflow.html#for-statements' target='_blank' rel='nofollow'>Python2 for loop documentation</a></p>\\n</li>\\n<li>\\n<p><a href='https://docs.python.org/3/tutorial/controlflow.html#for-statements' target='_blank' rel='nofollow'>Python3 for loop documentation</a></p>\\n</li>\\n</ul>\",\"fields\":{\"slug\":\"/python/for-loop-statements/\"},\"frontmatter\":{\"title\":\"For Loop Statements\"}}},\"pathContext\":{\"slug\":\"/python/for-loop-statements/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---python-for-loop-statements-a08aa0b79d7d43b60bcd.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>For Loop Statements</h2>\\n<p>Python utilizes a for loop to iterate over a list of elements. Unlike C or Java, which use the for loop to change a value in steps and access something such as an array using that value.</p>\\n<p>For loops iterate over collection based data structures like lists, tuples, and dictionaries.</p>\\n<p>The basic syntax is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> value <span class=\\\"token keyword\\\">in</span> list_of_values<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># use value inside this block</span>\\n</code></pre>\\n      </div>\\n<p>In general, you can use anything as the iterator value, where entries of the iterable can be assigned to. E.g. you can unpack tuples from a list of tuples:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>list_of_tuples <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token keyword\\\">for</span> a<span class=\\\"token punctuation\\\">,</span> b <span class=\\\"token keyword\\\">in</span> list_of_tuples<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"a:\\\"</span><span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"b:\\\"</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>On the other hand, you can loop over anything that is iterable. You can call a function or use a list literal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> person <span class=\\\"token keyword\\\">in</span> load_persons<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The name is:\\\"</span><span class=\\\"token punctuation\\\">,</span> person<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> character <span class=\\\"token keyword\\\">in</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"P\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"y\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"t\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"h\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"o\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"n\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Give me a '{}'!\\\"</span><span class=\\\"token punctuation\\\">.</span>format<span class=\\\"token punctuation\\\">(</span>character<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Some ways in which For loops are used: </p>\\n<p><strong>Iterate over the range() function</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> range<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Rather than being a function, range is actually an immutable sequence type.\\nThe output will contain results from lower bound i.e 0 to the upper bound i.e 10 but excluding 10.By default the lower bound or the starting index is set to zero.\\nOutput:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>\\n0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n></code></pre>\\n      </div>\\n<p>Additionally, one can specify the lower bound of the sequence and even the step of the sequence by adding a second and a third parameter. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> range<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">#From 4 to 9 using a step of two</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>\\n4\\n6\\n8\\n></code></pre>\\n      </div>\\n<p><strong>xrange() function</strong></p>\\n<p>For the most part, xrange and range are the exact same in terms of functionality. They both provide a way to generate a list of integers for you to use, however you please. The only difference is that range returns a Python list object and xrange returns an xrange object. It means that xrange doesnâ€™t actually generate a static list at run-time like range does. It creates the values as you need them with a special technique called yielding. This technique is used with a type of object known as generators.</p>\\n<p>One more thing to add. In Python 3.x, the xrange function does not exist anymore. The range function now does what xrange does in Python 2.x</p>\\n<p><strong>Iterate over values in a list or tuple</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>A <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">65</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"thank you\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">for</span> value <span class=\\\"token keyword\\\">in</span> A<span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>\\nhello\\n1\\n65\\nthank you\\n[2, 3]\\n></code></pre>\\n      </div>\\n<p><strong>Iterate over keys in a dictionary (aka hashmap)</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>fruits_to_colors <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"apple\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"#ff0000\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token string\\\">\\\"lemon\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"#ffff00\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token string\\\">\\\"orange\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"#ffa500\\\"</span><span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">for</span> key <span class=\\\"token keyword\\\">in</span> fruits_to_colors<span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> fruits_to_colors<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>\\napple #ff0000\\nlemon #ffff00\\norange #ffa500\\n></code></pre>\\n      </div>\\n<p><strong>Iterate over two lists of same size in a single loop with the zip() function</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>A <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"a\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"b\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"c\\\"</span><span class=\\\"token punctuation\\\">]</span>\\nB <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"a\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"d\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"e\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token keyword\\\">for</span> a<span class=\\\"token punctuation\\\">,</span> b <span class=\\\"token keyword\\\">in</span> zip<span class=\\\"token punctuation\\\">(</span>A<span class=\\\"token punctuation\\\">,</span> B<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span> a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">,</span> a <span class=\\\"token operator\\\">==</span> b\\n  \\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>\\na a True\\nb d False\\nc e False\\n></code></pre>\\n      </div>\\n<p><strong>Iterate over a list and get the corresponding index with the enumerate() function</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code>A <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"this\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"is\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"something\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"fun\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token keyword\\\">for</span> index<span class=\\\"token punctuation\\\">,</span>word <span class=\\\"token keyword\\\">in</span> enumerate<span class=\\\"token punctuation\\\">(</span>A<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">,</span> word<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>>\\n0 this\\n1 is\\n2 something\\n3 fun\\n></code></pre>\\n      </div>\\n<p>A common use case is iterating over a dictionary:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> name<span class=\\\"token punctuation\\\">,</span> phonenumber <span class=\\\"token keyword\\\">in</span> contacts<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"is reachable under\\\"</span><span class=\\\"token punctuation\\\">,</span> phonenumber<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>If you absolutely need to access the current index of your iteration, do <strong>NOT</strong> use <code>range(len(iterable))</code>! This is an extremely bad practice and will get you plenty of chuckles from senior Python developers. Use the built in function <code>enumerate()</code> instead:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">for</span> index<span class=\\\"token punctuation\\\">,</span> item <span class=\\\"token keyword\\\">in</span> enumerate<span class=\\\"token punctuation\\\">(</span>shopping_basket<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Item\\\"</span><span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"is a\\\"</span><span class=\\\"token punctuation\\\">,</span> item<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>More Information:</h4>\\n<ul>\\n<li>\\n<p><a href='https://docs.python.org/2.7/tutorial/controlflow.html#for-statements' target='_blank' rel='nofollow'>Python2 for loop documentation</a></p>\\n</li>\\n<li>\\n<p><a href='https://docs.python.org/3/tutorial/controlflow.html#for-statements' target='_blank' rel='nofollow'>Python3 for loop documentation</a></p>\\n</li>\\n</ul>\",\"fields\":{\"slug\":\"/python/for-loop-statements/\"},\"frontmatter\":{\"title\":\"For Loop Statements\"}}},\"pathContext\":{\"slug\":\"/python/for-loop-statements/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/python-for-loop-statements.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/python-for-loop-statements.json\n// module chunks = 16540373062040146000"],"sourceRoot":""}