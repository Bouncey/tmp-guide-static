{"version":3,"sources":["webpack:///path---javascript-standard-objects-array-array-prototype-reduce-cdbe21d3a0c190ecc778.js","webpack:///./.cache/json/javascript-standard-objects-array-array-prototype-reduce.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/javascript-standard-objects-array-array-prototype-reduce.json","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,kHACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,8qOAAk9NC,QAAqdC,KAAA,8DAAoEC,aAAgBC,MAAA,4BAAmCC,aAAgBH,KAAA","file":"path---javascript-standard-objects-array-array-prototype-reduce-cdbe21d3a0c190ecc778.js","sourcesContent":["webpackJsonp([4830616103405297000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/javascript-standard-objects-array-array-prototype-reduce.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Array.prototype.reduce</h2>\\n<p>The <code>reduce()</code> method reduces an array of values down to just one value. </p>\\n<p>The single value that is returned can be of any type. </p>\\n<h3>Example 1</h3>\\n<p>Transform an array of integers into the sum of all integers in the array. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">var</span> numbers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token keyword\\\">var</span> sum <span class=\\\"token operator\\\">=</span> numbers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>total<span class=\\\"token punctuation\\\">,</span> current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> total <span class=\\\"token operator\\\">+</span> current<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n</code></pre>\\n      </div>\\n<p>This will output <code>6</code> to the console.</p>\\n<h3>Description</h3>\\n<p>The <code>reduce()</code> method has been called the Swiss Army knife, or multi-tool, of array transformation methods. Others, such as <code>map()</code> and <code>filter()</code>, provide more specific transformations, whereas <code>reduce()</code> can be used to transform arrays into any output you desire.</p>\\n<h3>Syntax</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span>callback<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> initialValue<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>\\n<p>The <code>callback</code> argument is a function that will be called once for every item in the array. This function takes four arguments, but often only the first two are used.</p>\\n<ul>\\n<li><em>accumulator</em> - the returned value of the previous iteration</li>\\n<li><em>currentValue</em> - the current item in the array</li>\\n<li><em>index</em> - the index of the current item </li>\\n<li><em>array</em> - the original array on which reduce was called</li>\\n</ul>\\n</li>\\n<li>The <code>initialValue</code> argument is optional. If provided, it will be used as the initial accumulator value in the first call to the callback function (see Example 2 below).</li>\\n</ul>\\n<h3>Example 2</h3>\\n<p>Transform an array of strings into a single object that shows how many times each string appears in the array. Notice this call to reduce passes an empty object <code>{}</code> as the <code>initialValue</code> parameter. This will be used as the initial value of the accumulator (the first argument) passed to the callback function. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> pets <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'dog'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'chicken'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'cat'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'dog'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'chicken'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'chicken'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'rabbit'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> petCounts <span class=\\\"token operator\\\">=</span> pets<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> pet<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>obj<span class=\\\"token punctuation\\\">[</span>pet<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        obj<span class=\\\"token punctuation\\\">[</span>pet<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        obj<span class=\\\"token punctuation\\\">[</span>pet<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> obj<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>petCounts<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n</code></pre>\\n      </div>\\n<p>Output: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code> <span class=\\\"token punctuation\\\">{</span> \\n    dog<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> \\n    chicken<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> \\n    cat<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> \\n    rabbit<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> \\n <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>More Information:</h2>\\n<ul>\\n<li><a href=\\\"https://medium.freecodecamp.org/reduce-f47a7da511a9\\\">How JavaScriptâ€™s Reduce method works, when to use it, and some of the cool things it can do</a></li>\\n<li><a href=\\\"https://www.youtube.com/watch?v=1DMolJ2FrNY\\\">Advanced Reduce</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\\\">MDN</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/javascript/standard-objects/array/array-prototype-reduce/\"},\"frontmatter\":{\"title\":\"Array.prototype.reduce\"}}},\"pathContext\":{\"slug\":\"/javascript/standard-objects/array/array-prototype-reduce/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-standard-objects-array-array-prototype-reduce-cdbe21d3a0c190ecc778.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Array.prototype.reduce</h2>\\n<p>The <code>reduce()</code> method reduces an array of values down to just one value. </p>\\n<p>The single value that is returned can be of any type. </p>\\n<h3>Example 1</h3>\\n<p>Transform an array of integers into the sum of all integers in the array. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">var</span> numbers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token keyword\\\">var</span> sum <span class=\\\"token operator\\\">=</span> numbers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>total<span class=\\\"token punctuation\\\">,</span> current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> total <span class=\\\"token operator\\\">+</span> current<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n</code></pre>\\n      </div>\\n<p>This will output <code>6</code> to the console.</p>\\n<h3>Description</h3>\\n<p>The <code>reduce()</code> method has been called the Swiss Army knife, or multi-tool, of array transformation methods. Others, such as <code>map()</code> and <code>filter()</code>, provide more specific transformations, whereas <code>reduce()</code> can be used to transform arrays into any output you desire.</p>\\n<h3>Syntax</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>    arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span>callback<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> initialValue<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>\\n<p>The <code>callback</code> argument is a function that will be called once for every item in the array. This function takes four arguments, but often only the first two are used.</p>\\n<ul>\\n<li><em>accumulator</em> - the returned value of the previous iteration</li>\\n<li><em>currentValue</em> - the current item in the array</li>\\n<li><em>index</em> - the index of the current item </li>\\n<li><em>array</em> - the original array on which reduce was called</li>\\n</ul>\\n</li>\\n<li>The <code>initialValue</code> argument is optional. If provided, it will be used as the initial accumulator value in the first call to the callback function (see Example 2 below).</li>\\n</ul>\\n<h3>Example 2</h3>\\n<p>Transform an array of strings into a single object that shows how many times each string appears in the array. Notice this call to reduce passes an empty object <code>{}</code> as the <code>initialValue</code> parameter. This will be used as the initial value of the accumulator (the first argument) passed to the callback function. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> pets <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'dog'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'chicken'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'cat'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'dog'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'chicken'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'chicken'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'rabbit'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> petCounts <span class=\\\"token operator\\\">=</span> pets<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> pet<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>obj<span class=\\\"token punctuation\\\">[</span>pet<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        obj<span class=\\\"token punctuation\\\">[</span>pet<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        obj<span class=\\\"token punctuation\\\">[</span>pet<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> obj<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>petCounts<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n</code></pre>\\n      </div>\\n<p>Output: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code> <span class=\\\"token punctuation\\\">{</span> \\n    dog<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> \\n    chicken<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> \\n    cat<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> \\n    rabbit<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> \\n <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>More Information:</h2>\\n<ul>\\n<li><a href=\\\"https://medium.freecodecamp.org/reduce-f47a7da511a9\\\">How JavaScriptâ€™s Reduce method works, when to use it, and some of the cool things it can do</a></li>\\n<li><a href=\\\"https://www.youtube.com/watch?v=1DMolJ2FrNY\\\">Advanced Reduce</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\\\">MDN</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/javascript/standard-objects/array/array-prototype-reduce/\"},\"frontmatter\":{\"title\":\"Array.prototype.reduce\"}}},\"pathContext\":{\"slug\":\"/javascript/standard-objects/array/array-prototype-reduce/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-standard-objects-array-array-prototype-reduce.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/javascript-standard-objects-array-array-prototype-reduce.json\n// module chunks = 4830616103405297000"],"sourceRoot":""}