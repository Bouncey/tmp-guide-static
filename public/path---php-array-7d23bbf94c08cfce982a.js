webpackJsonp([0x2312012321011e00],{"./node_modules/json-loader/index.js!./.cache/json/php-array.json":function(a,e){a.exports={data:{markdownRemark:{html:'<h2>Introduction of PHP array</h2>\n<p>An array in PHP is actually an ordered map. A map is a type that associates values to keys.\nThis type is optimized for several different uses; it can be treated as an array, list (vector), hash table (an implementation of a map), dictionary, collection, stack, queue, and probably more.\nAs array values can be other arrays, trees and multidimensional arrays are also possible.</p>\n<p>Here is an example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code><?php\n// array without keys\n$bikes = array("Suzuki","BMW","Yamaha");\necho "I like " . $bikes[0] . ", " . $bikes[1] . " and " . $bikes[2] . ".";\n?></code></pre>\n      </div>\n<p>PHP array has so many functions to work with. Here is all list sorted: <a href="https://www.w3schools.com/php/php_ref_array.asp" target="_blank">Functions</a></p>\n<h2>Associative arrays</h2>\n<p>PHP arrays can be used as key and value like map. It can be accessed by key too.</p>\n<p>Here is an simple example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code><?php\n$array = array(\n    "foo" => "bar",\n    "bar" => "foo",\n);\n\necho $array[\'bar\'];</code></pre>\n      </div>\n<p>Have a good day, happy coding !!!</p>',fields:{slug:"/php/Array/"},frontmatter:{title:"array"}}},pathContext:{slug:"/php/Array/"}}}});
//# sourceMappingURL=path---php-array-7d23bbf94c08cfce982a.js.map